/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n,i,o={252:e=>{"use strict";e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var i,o,r;if(Array.isArray(t)){if((i=t.length)!=n.length)return!1;for(o=i;0!=o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((i=(r=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=i;0!=o--;)if(!Object.prototype.hasOwnProperty.call(n,r[o]))return!1;for(o=i;0!=o--;){var a=r[o];if(!("_owner"===a&&t.$$typeof||e(t[a],n[a])))return!1}return!0}return t!=t&&n!=n}},679:(e,t,n)=>{"use strict";var i=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return i.isMemo(e)?a:s[e.$$typeof]||o}s[i.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[i.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,h=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,i){if("string"!=typeof n){if(p){var o=f(n);o&&o!==p&&e(t,o,i)}var a=u(n);d&&(a=a.concat(d(n)));for(var s=l(t),v=l(n),m=0;m<a.length;++m){var y=a[m];if(!(r[y]||i&&i[y]||v&&v[y]||s&&s[y])){var g=h(n,y);try{c(t,y,g)}catch(e){}}}}return t}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(e){i[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,r){for(var a,s,l=o(e),c=1;c<arguments.length;c++){for(var u in a=Object(arguments[c]))n.call(a,u)&&(l[u]=a[u]);if(t){s=t(a);for(var d=0;d<s.length;d++)i.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},448:(e,t,n)=>{"use strict";var i=n(294),o=n(418),r=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!i)throw Error(a(227));var s=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,p={},v={};function m(e,t,n,i,o,r,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=i,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=r,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,i){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!i&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,i){if(null==t||function(e,t,n,i){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,i)&&(n=null),i||null===o?function(e){return!!f.call(v,e)||!f.call(p,e)&&(h.test(e)?v[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,i=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,i?e.setAttributeNS(i,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,E=60106,S=60107,C=60108,P=60114,M=60109,z=60110,T=60112,O=60113,R=60120,A=60115,_=60116,I=60121,L=60128,D=60129,F=60130,N=60131;if("function"==typeof Symbol&&Symbol.for){var j=Symbol.for;x=j("react.element"),E=j("react.portal"),S=j("react.fragment"),C=j("react.strict_mode"),P=j("react.profiler"),M=j("react.provider"),z=j("react.context"),T=j("react.forward_ref"),O=j("react.suspense"),R=j("react.suspense_list"),A=j("react.memo"),_=j("react.lazy"),I=j("react.block"),j("react.scope"),L=j("react.opaque.id"),D=j("react.debug_trace_mode"),F=j("react.offscreen"),N=j("react.legacy_hidden")}var H,V="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function U(e){if(void 0===H)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);H=t&&t[1]||""}return"\n"+H+e}var q=!1;function W(e,t){if(!e||q)return"";q=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var i=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){i=e}e.call(t.prototype)}else{try{throw Error()}catch(e){i=e}e()}}catch(e){if(e&&i&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),r=i.stack.split("\n"),a=o.length-1,s=r.length-1;1<=a&&0<=s&&o[a]!==r[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==r[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==r[s])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{q=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function $(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case E:return"Portal";case P:return"Profiler";case C:return"StrictMode";case O:return"Suspense";case R:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case z:return(e.displayName||"Context")+".Consumer";case M:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return G(e.type);case I:return G(e._render);case _:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Z(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,r=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){i=""+e,r.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(e){i=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),i="";return e&&(i=Y(e)?e.checked?"true":"false":e.value),(e=i)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,i=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),i=t.type;if(null!=n)"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===i||"reset"===i)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ie(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!("submit"!==i&&"reset"!==i||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function re(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,i){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&i&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(i&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function ce(e,t){var n=Q(t.value),i=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=i&&(e.defaultValue=""+i)}function ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function he(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?he(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,ve,me=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,i){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var i=0===n.indexOf("--"),o=we(n,t[n],i);"float"===n&&(n="cssFloat"),i?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,Me=null,ze=null;function Te(e){if(e=no(e)){if("function"!=typeof Pe)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),Pe(e.stateNode,e.type,t))}}function Oe(e){Me?ze?ze.push(e):ze=[e]:Me=e}function Re(){if(Me){var e=Me,t=ze;if(ze=Me=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Ae(e,t){return e(t)}function _e(e,t,n,i,o){return e(t,n,i,o)}function Ie(){}var Le=Ae,De=!1,Fe=!1;function Ne(){null===Me&&null===ze||(Ie(),Re())}function je(e,t){var n=e.stateNode;if(null===n)return null;var i=oo(n);if(null===i)return null;n=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var He=!1;if(d)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){He=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(ve){He=!1}function Be(e,t,n,i,o,r,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ue=!1,qe=null,We=!1,$e=null,Ge={onError:function(e){Ue=!0,qe=e}};function Qe(e,t,n,i,o,r,a,s,l){Ue=!1,qe=null,Be.apply(Ge,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ye(e)!==e)throw Error(a(188))}function Ke(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,i=t;;){var o=n.return;if(null===o)break;var r=o.alternate;if(null===r){if(null!==(i=o.return)){n=i;continue}break}if(o.child===r.child){for(r=o.child;r;){if(r===n)return Xe(o),e;if(r===i)return Xe(o),t;r=r.sibling}throw Error(a(188))}if(n.return!==i.return)n=o,i=r;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,i=r;break}if(l===i){s=!0,i=o,n=r;break}l=l.sibling}if(!s){for(l=r.child;l;){if(l===n){s=!0,n=r,i=o;break}if(l===i){s=!0,i=r,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==i)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,it,ot=!1,rt=[],at=null,st=null,lt=null,ct=new Map,ut=new Map,dt=[],ht="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,i,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[i]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function vt(e,t,n,i,o,r){return null===e||e.nativeEvent!==r?(e=ft(t,n,i,o,r),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=i,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=to(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void it(e.lanePriority,(function(){r.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<rt.length;){var e=rt[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&rt.shift()}null!==at&&yt(at)&&(at=null),null!==st&&yt(st)&&(st=null),null!==lt&&yt(lt)&&(lt=null),ct.forEach(gt),ut.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,bt)))}function kt(e){function t(t){return wt(t,e)}if(0<rt.length){wt(rt[0],e);for(var n=1;n<rt.length;n++){var i=rt[n];i.blockedOn===e&&(i.blockedOn=null)}}for(null!==at&&wt(at,e),null!==st&&wt(st,e),null!==lt&&wt(lt,e),ct.forEach(t),ut.forEach(t),n=0;n<dt.length;n++)(i=dt[n]).blockedOn===e&&(i.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)mt(n),null===n.blockedOn&&dt.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},St={},Ct={};function Pt(e){if(St[e])return St[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return St[e]=n[t];return e}d&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Mt=Pt("animationend"),zt=Pt("animationiteration"),Tt=Pt("animationstart"),Ot=Pt("transitionend"),Rt=new Map,At=new Map,_t=["abort","abort",Mt,"animationEnd",zt,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ot,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var i=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(i,t),Rt.set(i,o),c(o,[i])}}(0,r.unstable_now)();var Lt=8;function Dt(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var i=0,o=0,r=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==r)i=r,o=Lt=15;else if(0!=(r=134217727&n)){var l=r&~a;0!==l?(i=Dt(l),o=Lt):0!=(s&=r)&&(i=Dt(s),o=Lt)}else 0!=(r=n&~a)?(i=Dt(r),o=Lt):0!==s&&(i=Dt(s),o=Lt);if(0===i)return 0;if(i=n&((0>(i=31-Ut(i))?0:1<<i)<<1)-1,0!==t&&t!==i&&0==(t&a)){if(Dt(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=i;0<t;)o=1<<(n=31-Ut(t)),i|=e[n],t&=~o;return i}function Nt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function jt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ht(24&~t))?jt(10,t):e;case 10:return 0===(e=Ht(192&~t))?jt(8,t):e;case 8:return 0===(e=Ht(3584&~t))&&0===(e=Ht(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ht(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ht(e){return e&-e}function Vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var i=t-1;e.suspendedLanes&=i,e.pingedLanes&=i,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(qt(e)/Wt|0)|0},qt=Math.log,Wt=Math.LN2,$t=r.unstable_UserBlockingPriority,Gt=r.unstable_runWithPriority,Qt=!0;function Yt(e,t,n,i){De||Ie();var o=Xt,r=De;De=!0;try{_e(o,e,t,n,i)}finally{(De=r)||Ne()}}function Zt(e,t,n,i){Gt($t,Xt.bind(null,e,t,n,i))}function Xt(e,t,n,i){var o;if(Qt)if((o=0==(4&t))&&0<rt.length&&-1<ht.indexOf(e))e=ft(null,e,t,n,i),rt.push(e);else{var r=Kt(e,t,n,i);if(null===r)o&&pt(e,i);else{if(o){if(-1<ht.indexOf(e))return e=ft(r,e,t,n,i),void rt.push(e);if(function(e,t,n,i,o){switch(t){case"focusin":return at=vt(at,e,t,n,i,o),!0;case"dragenter":return st=vt(st,e,t,n,i,o),!0;case"mouseover":return lt=vt(lt,e,t,n,i,o),!0;case"pointerover":var r=o.pointerId;return ct.set(r,vt(ct.get(r)||null,e,t,n,i,o)),!0;case"gotpointercapture":return r=o.pointerId,ut.set(r,vt(ut.get(r)||null,e,t,n,i,o)),!0}return!1}(r,e,t,n,i))return;pt(e,i)}Ii(e,t,i,null,n)}}}function Kt(e,t,n,i){var o=Ce(i);if(null!==(o=to(o))){var r=Ye(o);if(null===r)o=null;else{var a=r.tag;if(13===a){if(null!==(o=Ze(r)))return o;o=null}else if(3===a){if(r.stateNode.hydrate)return 3===r.tag?r.stateNode.containerInfo:null;o=null}else r!==o&&(o=null)}}return Ii(e,t,i,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,i=n.length,o="value"in Jt?Jt.value:Jt.textContent,r=o.length;for(e=0;e<i&&n[e]===o[e];e++);var a=i-e;for(t=1;t<=a&&n[i-t]===o[r-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function on(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function an(){return!1}function sn(e){function t(t,n,i,o,r){for(var a in this._reactName=t,this._targetInst=i,this.type=n,this.nativeEvent=o,this.target=r,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rn:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,cn,un,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},hn=sn(dn),fn=o({},dn,{view:0,detail:0}),pn=sn(fn),vn=o({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,cn=e.screenY-un.screenY):cn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),mn=sn(vn),yn=sn(o({},vn,{dataTransfer:0})),gn=sn(o({},fn,{relatedTarget:0})),bn=sn(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),kn=sn(wn),xn=sn(o({},dn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Mn(){return Pn}var zn=o({},fn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=on(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Mn,charCode:function(e){return"keypress"===e.type?on(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?on(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=sn(zn),On=sn(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=sn(o({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Mn})),An=sn(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),_n=o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),In=sn(_n),Ln=[9,13,27,32],Dn=d&&"CompositionEvent"in window,Fn=null;d&&"documentMode"in document&&(Fn=document.documentMode);var Nn=d&&"TextEvent"in window&&!Fn,jn=d&&(!Dn||Fn&&8<Fn&&11>=Fn),Hn=String.fromCharCode(32),Vn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Gn(e,t,n,i){Oe(i),0<(t=Di(t,"onChange")).length&&(n=new hn("onChange","change",null,n,i),e.push({event:n,listeners:t}))}var Qn=null,Yn=null;function Zn(e){zi(e,0)}function Xn(e){if(X(io(e)))return e}function Kn(e,t){if("change"===e)return t}var Jn=!1;if(d){var ei;if(d){var ti="oninput"in document;if(!ti){var ni=document.createElement("div");ni.setAttribute("oninput","return;"),ti="function"==typeof ni.oninput}ei=ti}else ei=!1;Jn=ei&&(!document.documentMode||9<document.documentMode)}function ii(){Qn&&(Qn.detachEvent("onpropertychange",oi),Yn=Qn=null)}function oi(e){if("value"===e.propertyName&&Xn(Yn)){var t=[];if(Gn(t,Yn,e,Ce(e)),e=Zn,De)e(t);else{De=!0;try{Ae(e,t)}finally{De=!1,Ne()}}}}function ri(e,t,n){"focusin"===e?(ii(),Yn=n,(Qn=t).attachEvent("onpropertychange",oi)):"focusout"===e&&ii()}function ai(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn(Yn)}function si(e,t){if("click"===e)return Xn(t)}function li(e,t){if("input"===e||"change"===e)return Xn(t)}var ci="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ui=Object.prototype.hasOwnProperty;function di(e,t){if(ci(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++)if(!ui.call(t,n[i])||!ci(e[n[i]],t[n[i]]))return!1;return!0}function hi(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fi(e,t){var n,i=hi(e);for(e=0;i;){if(3===i.nodeType){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=hi(i)}}function pi(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pi(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function vi(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function mi(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yi=d&&"documentMode"in document&&11>=document.documentMode,gi=null,bi=null,wi=null,ki=!1;function xi(e,t,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ki||null==gi||gi!==K(i)||(i="selectionStart"in(i=gi)&&mi(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},wi&&di(wi,i)||(wi=i,0<(i=Di(bi,"onSelect")).length&&(t=new hn("onSelect","select",null,t,n),e.push({event:t,listeners:i}),t.target=gi)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(_t,2);for(var Ei="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Si=0;Si<Ei.length;Si++)At.set(Ei[Si],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ci="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Pi=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ci));function Mi(e,t,n){var i=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,i,o,r,s,l,c){if(Qe.apply(this,arguments),Ue){if(!Ue)throw Error(a(198));var u=qe;Ue=!1,qe=null,We||(We=!0,$e=u)}}(i,t,void 0,e),e.currentTarget=null}function zi(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var i=e[n],o=i.event;i=i.listeners;e:{var r=void 0;if(t)for(var a=i.length-1;0<=a;a--){var s=i[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==r&&o.isPropagationStopped())break e;Mi(o,s,c),r=l}else for(a=0;a<i.length;a++){if(l=(s=i[a]).instance,c=s.currentTarget,s=s.listener,l!==r&&o.isPropagationStopped())break e;Mi(o,s,c),r=l}}}if(We)throw e=$e,We=!1,$e=null,e}function Ti(e,t){var n=ro(t),i=e+"__bubble";n.has(i)||(_i(t,e,2,!1),n.add(i))}var Oi="_reactListening"+Math.random().toString(36).slice(2);function Ri(e){e[Oi]||(e[Oi]=!0,s.forEach((function(t){Pi.has(t)||Ai(t,!1,e,null),Ai(t,!0,e,null)})))}function Ai(e,t,n,i){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,r=n;if("selectionchange"===e&&9!==n.nodeType&&(r=n.ownerDocument),null!==i&&!t&&Pi.has(e)){if("scroll"!==e)return;o|=2,r=i}var a=ro(r),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(o|=4),_i(r,e,o,t),a.add(s))}function _i(e,t,n,i){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Zt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!He||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),i?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ii(e,t,n,i,o){var r=i;if(0==(1&t)&&0==(2&t)&&null!==i)e:for(;;){if(null===i)return;var a=i.tag;if(3===a||4===a){var s=i.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=i.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=to(s)))return;if(5===(l=a.tag)||6===l){i=r=a;continue e}s=s.parentNode}}i=i.return}!function(e,t,n){if(Fe)return e();Fe=!0;try{Le(e,t,n)}finally{Fe=!1,Ne()}}((function(){var i=r,o=Ce(n),a=[];e:{var s=Rt.get(e);if(void 0!==s){var l=hn,c=e;switch(e){case"keypress":if(0===on(n))break e;case"keydown":case"keyup":l=Tn;break;case"focusin":c="focus",l=gn;break;case"focusout":c="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Rn;break;case Mt:case zt:case Tt:l=bn;break;case Ot:l=An;break;case"scroll":l=pn;break;case"wheel":l=In;break;case"copy":case"cut":case"paste":l=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=On}var u=0!=(4&t),d=!u&&"scroll"===e,h=u?null!==s?s+"Capture":null:s;u=[];for(var f,p=i;null!==p;){var v=(f=p).stateNode;if(5===f.tag&&null!==v&&(f=v,null!==h&&null!=(v=je(p,h))&&u.push(Li(p,v,f))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,o),a.push({event:s,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!to(c)&&!c[Ji])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=i,null!==(c=(c=n.relatedTarget||n.toElement)?to(c):null)&&(c!==(d=Ye(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=i),l!==c)){if(u=mn,v="onMouseLeave",h="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=On,v="onPointerLeave",h="onPointerEnter",p="pointer"),d=null==l?s:io(l),f=null==c?s:io(c),(s=new u(v,p+"leave",l,n,o)).target=d,s.relatedTarget=f,v=null,to(o)===i&&((u=new u(h,p+"enter",c,n,o)).target=f,u.relatedTarget=d,v=u),d=v,l&&c)e:{for(h=c,p=0,f=u=l;f;f=Fi(f))p++;for(f=0,v=h;v;v=Fi(v))f++;for(;0<p-f;)u=Fi(u),p--;for(;0<f-p;)h=Fi(h),f--;for(;p--;){if(u===h||null!==h&&u===h.alternate)break e;u=Fi(u),h=Fi(h)}u=null}else u=null;null!==l&&Ni(a,s,l,u,!1),null!==c&&null!==d&&Ni(a,d,c,u,!0)}if("select"===(l=(s=i?io(i):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Kn;else if($n(s))if(Jn)m=li;else{m=ai;var y=ri}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=si);switch(m&&(m=m(e,i))?Gn(a,m,n,o):(y&&y(e,s,i),"focusout"===e&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&oe(s,"number",s.value)),y=i?io(i):window,e){case"focusin":($n(y)||"true"===y.contentEditable)&&(gi=y,bi=i,wi=null);break;case"focusout":wi=bi=gi=null;break;case"mousedown":ki=!0;break;case"contextmenu":case"mouseup":case"dragend":ki=!1,xi(a,n,o);break;case"selectionchange":if(yi)break;case"keydown":case"keyup":xi(a,n,o)}var g;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else qn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(qn||"onCompositionStart"!==b?"onCompositionEnd"===b&&qn&&(g=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,qn=!0)),0<(y=Di(i,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:y}),(g||null!==(g=Un(n)))&&(b.data=g))),(g=Nn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Vn=!0,Hn);case"textInput":return(e=t.data)===Hn&&Vn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!Dn&&Bn(e,t)?(e=nn(),tn=en=Jt=null,qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(i=Di(i,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:i}),o.data=g)}zi(a,t)}))}function Li(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Di(e,t){for(var n=t+"Capture",i=[];null!==e;){var o=e,r=o.stateNode;5===o.tag&&null!==r&&(o=r,null!=(r=je(e,n))&&i.unshift(Li(e,r,o)),null!=(r=je(e,t))&&i.push(Li(e,r,o))),e=e.return}return i}function Fi(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ni(e,t,n,i,o){for(var r=t._reactName,a=[];null!==n&&n!==i;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===i)break;5===s.tag&&null!==c&&(s=c,o?null!=(l=je(n,r))&&a.unshift(Li(n,l,s)):o||null!=(l=je(n,r))&&a.push(Li(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function ji(){}var Hi=null,Vi=null;function Bi(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ui(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var qi="function"==typeof setTimeout?setTimeout:void 0,Wi="function"==typeof clearTimeout?clearTimeout:void 0;function $i(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Gi(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qi(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Yi=0,Zi=Math.random().toString(36).slice(2),Xi="__reactFiber$"+Zi,Ki="__reactProps$"+Zi,Ji="__reactContainer$"+Zi,eo="__reactEvents$"+Zi;function to(e){var t=e[Xi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ji]||n[Xi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Qi(e);null!==e;){if(n=e[Xi])return n;e=Qi(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Xi]||e[Ji])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function io(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Ki]||null}function ro(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],so=-1;function lo(e){return{current:e}}function co(e){0>so||(e.current=ao[so],ao[so]=null,so--)}function uo(e,t){so++,ao[so]=e.current,e.current=t}var ho={},fo=lo(ho),po=lo(!1),vo=ho;function mo(e,t){var n=e.type.contextTypes;if(!n)return ho;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var o,r={};for(o in n)r[o]=t[o];return i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=r),r}function yo(e){return null!=e.childContextTypes}function go(){co(po),co(fo)}function bo(e,t,n){if(fo.current!==ho)throw Error(a(168));uo(fo,t),uo(po,n)}function wo(e,t,n){var i=e.stateNode;if(e=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var r in i=i.getChildContext())if(!(r in e))throw Error(a(108,G(t)||"Unknown",r));return o({},n,i)}function ko(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ho,vo=fo.current,uo(fo,e),uo(po,po.current),!0}function xo(e,t,n){var i=e.stateNode;if(!i)throw Error(a(169));n?(e=wo(e,t,vo),i.__reactInternalMemoizedMergedChildContext=e,co(po),co(fo),uo(fo,e)):co(po),uo(po,n)}var Eo=null,So=null,Co=r.unstable_runWithPriority,Po=r.unstable_scheduleCallback,Mo=r.unstable_cancelCallback,zo=r.unstable_shouldYield,To=r.unstable_requestPaint,Oo=r.unstable_now,Ro=r.unstable_getCurrentPriorityLevel,Ao=r.unstable_ImmediatePriority,_o=r.unstable_UserBlockingPriority,Io=r.unstable_NormalPriority,Lo=r.unstable_LowPriority,Do=r.unstable_IdlePriority,Fo={},No=void 0!==To?To:function(){},jo=null,Ho=null,Vo=!1,Bo=Oo(),Uo=1e4>Bo?Oo:function(){return Oo()-Bo};function qo(){switch(Ro()){case Ao:return 99;case _o:return 98;case Io:return 97;case Lo:return 96;case Do:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return Ao;case 98:return _o;case 97:return Io;case 96:return Lo;case 95:return Do;default:throw Error(a(332))}}function $o(e,t){return e=Wo(e),Co(e,t)}function Go(e,t,n){return e=Wo(e),Po(e,t,n)}function Qo(){if(null!==Ho){var e=Ho;Ho=null,Mo(e)}Yo()}function Yo(){if(!Vo&&null!==jo){Vo=!0;var e=0;try{var t=jo;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),jo=null}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),Po(Ao,Qo),t}finally{Vo=!1}}}var Zo=k.ReactCurrentBatchConfig;function Xo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=lo(null),Jo=null,er=null,tr=null;function nr(){tr=er=Jo=null}function ir(e){var t=Ko.current;co(Ko),e.type._context._currentValue=t}function or(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function rr(e,t){Jo=e,tr=er=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Da=!0),e.firstContext=null)}function ar(e,t){if(tr!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(tr=e,t=1073741823),t={context:e,observedBits:t,next:null},null===er){if(null===Jo)throw Error(a(308));er=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else er=er.next=t;return e._currentValue}var sr=!1;function lr(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function cr(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ur(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function dr(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function hr(e,t){var n=e.updateQueue,i=e.alternate;if(null!==i&&n===(i=i.updateQueue)){var o=null,r=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===r?o=r=a:r=r.next=a,n=n.next}while(null!==n);null===r?o=r=t:r=r.next=t}else o=r=t;return n={baseState:i.baseState,firstBaseUpdate:o,lastBaseUpdate:r,shared:i.shared,effects:i.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fr(e,t,n,i){var r=e.updateQueue;sr=!1;var a=r.firstBaseUpdate,s=r.lastBaseUpdate,l=r.shared.pending;if(null!==l){r.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var d=e.alternate;if(null!==d){var h=(d=d.updateQueue).lastBaseUpdate;h!==s&&(null===h?d.firstBaseUpdate=u:h.next=u,d.lastBaseUpdate=c)}}if(null!==a){for(h=r.baseState,s=0,d=u=c=null;;){l=a.lane;var f=a.eventTime;if((i&l)===l){null!==d&&(d=d.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,v=a;switch(l=t,f=n,v.tag){case 1:if("function"==typeof(p=v.payload)){h=p.call(f,h,l);break e}h=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=v.payload)?p.call(f,h,l):p))break e;h=o({},h,l);break e;case 2:sr=!0}}null!==a.callback&&(e.flags|=32,null===(l=r.effects)?r.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=f,c=h):d=d.next=f,s|=l;if(null===(a=a.next)){if(null===(l=r.shared.pending))break;a=l.next,l.next=null,r.lastBaseUpdate=l,r.shared.pending=null}}null===d&&(c=h),r.baseState=c,r.firstBaseUpdate=u,r.lastBaseUpdate=d,Ns|=s,e.lanes=s,e.memoizedState=h}}function pr(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var i=e[t],o=i.callback;if(null!==o){if(i.callback=null,i=n,"function"!=typeof o)throw Error(a(191,o));o.call(i)}}}var vr=(new i.Component).refs;function mr(e,t,n,i){n=null==(n=n(i,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var yr={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var i=cl(),o=ul(e),r=ur(i,o);r.payload=t,null!=n&&(r.callback=n),dr(e,r),dl(e,o,i)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var i=cl(),o=ul(e),r=ur(i,o);r.tag=1,r.payload=t,null!=n&&(r.callback=n),dr(e,r),dl(e,o,i)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=cl(),i=ul(e),o=ur(n,i);o.tag=2,null!=t&&(o.callback=t),dr(e,o),dl(e,i,n)}};function gr(e,t,n,i,o,r,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(i,r,a):!(t.prototype&&t.prototype.isPureReactComponent&&di(n,i)&&di(o,r))}function br(e,t,n){var i=!1,o=ho,r=t.contextType;return"object"==typeof r&&null!==r?r=ar(r):(o=yo(t)?vo:fo.current,r=(i=null!=(i=t.contextTypes))?mo(e,o):ho),t=new t(n,r),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=yr,e.stateNode=t,t._reactInternals=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=r),t}function wr(e,t,n,i){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,i),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,i),t.state!==e&&yr.enqueueReplaceState(t,t.state,null)}function kr(e,t,n,i){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=vr,lr(e);var r=t.contextType;"object"==typeof r&&null!==r?o.context=ar(r):(r=yo(t)?vo:fo.current,o.context=mo(e,r)),fr(e,n,o,i),o.state=e.memoizedState,"function"==typeof(r=t.getDerivedStateFromProps)&&(mr(e,t,r,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&yr.enqueueReplaceState(o,o.state,null),fr(e,n,o,i),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var xr=Array.isArray;function Er(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var i=n.stateNode}if(!i)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=i.refs;t===vr&&(t=i.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Sr(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Cr(e){function t(t,n){if(e){var i=t.lastEffect;null!==i?(i.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,i){if(!e)return null;for(;null!==i;)t(n,i),i=i.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ul(e,t)).index=0,e.sibling=null,e}function r(t,n,i){return t.index=i,e?null!==(i=t.alternate)?(i=i.index)<n?(t.flags=2,n):i:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,i){return null===t||6!==t.tag?((t=Gl(n,e.mode,i)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,i){return null!==t&&t.elementType===n.type?((i=o(t,n.props)).ref=Er(e,t,n),i.return=e,i):((i=ql(n.type,n.key,n.props,null,e.mode,i)).ref=Er(e,t,n),i.return=e,i)}function u(e,t,n,i){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ql(n,e.mode,i)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,i,r){return null===t||7!==t.tag?((t=Wl(n,e.mode,i,r)).return=e,t):((t=o(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=ql(t.type,t.key,t.props,null,e.mode,n)).ref=Er(e,null,t),n.return=e,n;case E:return(t=Ql(t,e.mode,n)).return=e,t}if(xr(t)||B(t))return(t=Wl(t,e.mode,n,null)).return=e,t;Sr(e,t)}return null}function f(e,t,n,i){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===S?d(e,t,n.props.children,i,o):c(e,t,n,i):null;case E:return n.key===o?u(e,t,n,i):null}if(xr(n)||B(n))return null!==o?null:d(e,t,n,i,null);Sr(e,n)}return null}function p(e,t,n,i,o){if("string"==typeof i||"number"==typeof i)return l(t,e=e.get(n)||null,""+i,o);if("object"==typeof i&&null!==i){switch(i.$$typeof){case x:return e=e.get(null===i.key?n:i.key)||null,i.type===S?d(t,e,i.props.children,o,i.key):c(t,e,i,o);case E:return u(t,e=e.get(null===i.key?n:i.key)||null,i,o)}if(xr(i)||B(i))return d(t,e=e.get(n)||null,i,o,null);Sr(t,i)}return null}function v(o,a,s,l){for(var c=null,u=null,d=a,v=a=0,m=null;null!==d&&v<s.length;v++){d.index>v?(m=d,d=null):m=d.sibling;var y=f(o,d,s[v],l);if(null===y){null===d&&(d=m);break}e&&d&&null===y.alternate&&t(o,d),a=r(y,a,v),null===u?c=y:u.sibling=y,u=y,d=m}if(v===s.length)return n(o,d),c;if(null===d){for(;v<s.length;v++)null!==(d=h(o,s[v],l))&&(a=r(d,a,v),null===u?c=d:u.sibling=d,u=d);return c}for(d=i(o,d);v<s.length;v++)null!==(m=p(d,o,v,s[v],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?v:m.key),a=r(m,a,v),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(o,e)})),c}function m(o,s,l,c){var u=B(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var d=u=null,v=s,m=s=0,y=null,g=l.next();null!==v&&!g.done;m++,g=l.next()){v.index>m?(y=v,v=null):y=v.sibling;var b=f(o,v,g.value,c);if(null===b){null===v&&(v=y);break}e&&v&&null===b.alternate&&t(o,v),s=r(b,s,m),null===d?u=b:d.sibling=b,d=b,v=y}if(g.done)return n(o,v),u;if(null===v){for(;!g.done;m++,g=l.next())null!==(g=h(o,g.value,c))&&(s=r(g,s,m),null===d?u=g:d.sibling=g,d=g);return u}for(v=i(o,v);!g.done;m++,g=l.next())null!==(g=p(v,o,m,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?m:g.key),s=r(g,s,m),null===d?u=g:d.sibling=g,d=g);return e&&v.forEach((function(e){return t(o,e)})),u}return function(e,i,r,l){var c="object"==typeof r&&null!==r&&r.type===S&&null===r.key;c&&(r=r.props.children);var u="object"==typeof r&&null!==r;if(u)switch(r.$$typeof){case x:e:{for(u=r.key,c=i;null!==c;){if(c.key===u){if(7===c.tag){if(r.type===S){n(e,c.sibling),(i=o(c,r.props.children)).return=e,e=i;break e}}else if(c.elementType===r.type){n(e,c.sibling),(i=o(c,r.props)).ref=Er(e,c,r),i.return=e,e=i;break e}n(e,c);break}t(e,c),c=c.sibling}r.type===S?((i=Wl(r.props.children,e.mode,l,r.key)).return=e,e=i):((l=ql(r.type,r.key,r.props,null,e.mode,l)).ref=Er(e,i,r),l.return=e,e=l)}return s(e);case E:e:{for(c=r.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===r.containerInfo&&i.stateNode.implementation===r.implementation){n(e,i.sibling),(i=o(i,r.children||[])).return=e,e=i;break e}n(e,i);break}t(e,i),i=i.sibling}(i=Ql(r,e.mode,l)).return=e,e=i}return s(e)}if("string"==typeof r||"number"==typeof r)return r=""+r,null!==i&&6===i.tag?(n(e,i.sibling),(i=o(i,r)).return=e,e=i):(n(e,i),(i=Gl(r,e.mode,l)).return=e,e=i),s(e);if(xr(r))return v(e,i,r,l);if(B(r))return m(e,i,r,l);if(u&&Sr(e,r),void 0===r&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,G(e.type)||"Component"))}return n(e,i)}}var Pr=Cr(!0),Mr=Cr(!1),zr={},Tr=lo(zr),Or=lo(zr),Rr=lo(zr);function Ar(e){if(e===zr)throw Error(a(174));return e}function _r(e,t){switch(uo(Rr,t),uo(Or,e),uo(Tr,zr),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}co(Tr),uo(Tr,t)}function Ir(){co(Tr),co(Or),co(Rr)}function Lr(e){Ar(Rr.current);var t=Ar(Tr.current),n=fe(t,e.type);t!==n&&(uo(Or,e),uo(Tr,n))}function Dr(e){Or.current===e&&(co(Tr),co(Or))}var Fr=lo(0);function Nr(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var jr=null,Hr=null,Vr=!1;function Br(e,t){var n=Vl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ur(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function qr(e){if(Vr){var t=Hr;if(t){var n=t;if(!Ur(e,t)){if(!(t=Gi(n.nextSibling))||!Ur(e,t))return e.flags=-1025&e.flags|2,Vr=!1,void(jr=e);Br(jr,n)}jr=e,Hr=Gi(t.firstChild)}else e.flags=-1025&e.flags|2,Vr=!1,jr=e}}function Wr(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;jr=e}function $r(e){if(e!==jr)return!1;if(!Vr)return Wr(e),Vr=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ui(t,e.memoizedProps))for(t=Hr;t;)Br(e,t),t=Gi(t.nextSibling);if(Wr(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Hr=Gi(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Hr=null}}else Hr=jr?Gi(e.stateNode.nextSibling):null;return!0}function Gr(){Hr=jr=null,Vr=!1}var Qr=[];function Yr(){for(var e=0;e<Qr.length;e++)Qr[e]._workInProgressVersionPrimary=null;Qr.length=0}var Zr=k.ReactCurrentDispatcher,Xr=k.ReactCurrentBatchConfig,Kr=0,Jr=null,ea=null,ta=null,na=!1,ia=!1;function oa(){throw Error(a(321))}function ra(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ci(e[n],t[n]))return!1;return!0}function aa(e,t,n,i,o,r){if(Kr=r,Jr=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Zr.current=null===e||null===e.memoizedState?Aa:_a,e=n(i,o),ia){r=0;do{if(ia=!1,!(25>r))throw Error(a(301));r+=1,ta=ea=null,t.updateQueue=null,Zr.current=Ia,e=n(i,o)}while(ia)}if(Zr.current=Ra,t=null!==ea&&null!==ea.next,Kr=0,ta=ea=Jr=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Jr.memoizedState=ta=e:ta=ta.next=e,ta}function la(){if(null===ea){var e=Jr.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Jr.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Jr.memoizedState=ta=e:ta=ta.next=e}return ta}function ca(e,t){return"function"==typeof t?t(e):t}function ua(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var i=ea,o=i.baseQueue,r=n.pending;if(null!==r){if(null!==o){var s=o.next;o.next=r.next,r.next=s}i.baseQueue=o=r,n.pending=null}if(null!==o){o=o.next,i=i.baseState;var l=s=r=null,c=o;do{var u=c.lane;if((Kr&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),i=c.eagerReducer===e?c.eagerState:e(i,c.action);else{var d={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=d,r=i):l=l.next=d,Jr.lanes|=u,Ns|=u}c=c.next}while(null!==c&&c!==o);null===l?r=i:l.next=s,ci(i,t.memoizedState)||(Da=!0),t.memoizedState=i,t.baseState=r,t.baseQueue=l,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function da(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var i=n.dispatch,o=n.pending,r=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{r=e(r,s.action),s=s.next}while(s!==o);ci(r,t.memoizedState)||(Da=!0),t.memoizedState=r,null===t.baseQueue&&(t.baseState=r),n.lastRenderedState=r}return[r,i]}function ha(e,t,n){var i=t._getVersion;i=i(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===i:(e=e.mutableReadLanes,(e=(Kr&e)===e)&&(t._workInProgressVersionPrimary=i,Qr.push(t))),e)return n(t._source);throw Qr.push(t),Error(a(350))}function fa(e,t,n,i){var o=Os;if(null===o)throw Error(a(349));var r=t._getVersion,s=r(t._source),l=Zr.current,c=l.useState((function(){return ha(o,t,n)})),u=c[1],d=c[0];c=ta;var h=e.memoizedState,f=h.refs,p=f.getSnapshot,v=h.source;h=h.subscribe;var m=Jr;return e.memoizedState={refs:f,source:t,subscribe:i},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=u;var e=r(t._source);if(!ci(s,e)){e=n(t._source),ci(d,e)||(u(e),e=ul(m),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var i=o.entanglements,a=e;0<a;){var l=31-Ut(a),c=1<<l;i[l]|=e,a&=~c}}}),[n,t,i]),l.useEffect((function(){return i(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var i=ul(m);o.mutableReadLanes|=i&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,i]),ci(p,n)&&ci(v,t)&&ci(h,i)||((e={pending:null,dispatch:null,lastRenderedReducer:ca,lastRenderedState:d}).dispatch=u=Oa.bind(null,Jr,e),c.queue=e,c.baseQueue=null,d=ha(o,t,n),c.memoizedState=c.baseState=d),d}function pa(e,t,n){return fa(la(),e,t,n)}function va(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ca,lastRenderedState:e}).dispatch=Oa.bind(null,Jr,e),[t.memoizedState,e]}function ma(e,t,n,i){return e={tag:e,create:t,destroy:n,deps:i,next:null},null===(t=Jr.updateQueue)?(t={lastEffect:null},Jr.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(i=n.next,n.next=e,e.next=i,t.lastEffect=e),e}function ya(e){return e={current:e},sa().memoizedState=e}function ga(){return la().memoizedState}function ba(e,t,n,i){var o=sa();Jr.flags|=e,o.memoizedState=ma(1|t,n,void 0,void 0===i?null:i)}function wa(e,t,n,i){var o=la();i=void 0===i?null:i;var r=void 0;if(null!==ea){var a=ea.memoizedState;if(r=a.destroy,null!==i&&ra(i,a.deps))return void ma(t,n,r,i)}Jr.flags|=e,o.memoizedState=ma(1|t,n,r,i)}function ka(e,t){return ba(516,4,e,t)}function xa(e,t){return wa(516,4,e,t)}function Ea(e,t){return wa(4,2,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ca(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,2,Sa.bind(null,t,e),n)}function Pa(){}function Ma(e,t){var n=la();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&ra(t,i[1])?i[0]:(n.memoizedState=[e,t],e)}function za(e,t){var n=la();t=void 0===t?null:t;var i=n.memoizedState;return null!==i&&null!==t&&ra(t,i[1])?i[0]:(e=e(),n.memoizedState=[e,t],e)}function Ta(e,t){var n=qo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=Xr.transition;Xr.transition=1;try{e(!1),t()}finally{Xr.transition=n}}))}function Oa(e,t,n){var i=cl(),o=ul(e),r={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?r.next=r:(r.next=a.next,a.next=r),t.pending=r,a=e.alternate,e===Jr||null!==a&&a===Jr)ia=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(r.eagerReducer=a,r.eagerState=l,ci(l,s))return}catch(e){}dl(e,o,i)}}var Ra={readContext:ar,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Aa={readContext:ar,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:ar,useEffect:ka,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var i=sa();return t=void 0!==n?n(t):t,i.memoizedState=i.baseState=t,e=(e=i.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oa.bind(null,Jr,e),[i.memoizedState,e]},useRef:ya,useState:va,useDebugValue:Pa,useDeferredValue:function(e){var t=va(e),n=t[0],i=t[1];return ka((function(){var t=Xr.transition;Xr.transition=1;try{i(e)}finally{Xr.transition=t}}),[e]),n},useTransition:function(){var e=va(!1),t=e[0];return ya(e=Ta.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var i=sa();return i.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fa(i,e,t,n)},useOpaqueIdentifier:function(){if(Vr){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Yi++).toString(36))),Error(a(355))})),n=va(t)[1];return 0==(2&Jr.mode)&&(Jr.flags|=516,ma(5,(function(){n("r:"+(Yi++).toString(36))}),void 0,null)),t}return va(t="r:"+(Yi++).toString(36)),t},unstable_isNewReconciler:!1},_a={readContext:ar,useCallback:Ma,useContext:ar,useEffect:xa,useImperativeHandle:Ca,useLayoutEffect:Ea,useMemo:za,useReducer:ua,useRef:ga,useState:function(){return ua(ca)},useDebugValue:Pa,useDeferredValue:function(e){var t=ua(ca),n=t[0],i=t[1];return xa((function(){var t=Xr.transition;Xr.transition=1;try{i(e)}finally{Xr.transition=t}}),[e]),n},useTransition:function(){var e=ua(ca)[0];return[ga().current,e]},useMutableSource:pa,useOpaqueIdentifier:function(){return ua(ca)[0]},unstable_isNewReconciler:!1},Ia={readContext:ar,useCallback:Ma,useContext:ar,useEffect:xa,useImperativeHandle:Ca,useLayoutEffect:Ea,useMemo:za,useReducer:da,useRef:ga,useState:function(){return da(ca)},useDebugValue:Pa,useDeferredValue:function(e){var t=da(ca),n=t[0],i=t[1];return xa((function(){var t=Xr.transition;Xr.transition=1;try{i(e)}finally{Xr.transition=t}}),[e]),n},useTransition:function(){var e=da(ca)[0];return[ga().current,e]},useMutableSource:pa,useOpaqueIdentifier:function(){return da(ca)[0]},unstable_isNewReconciler:!1},La=k.ReactCurrentOwner,Da=!1;function Fa(e,t,n,i){t.child=null===e?Mr(t,null,n,i):Pr(t,e.child,n,i)}function Na(e,t,n,i,o){n=n.render;var r=t.ref;return rr(t,o),i=aa(e,t,n,i,r,o),null===e||Da?(t.flags|=1,Fa(e,t,i,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function ja(e,t,n,i,o,r){if(null===e){var a=n.type;return"function"!=typeof a||Bl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=ql(n.type,null,i,t,t.mode,r)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ha(e,t,a,i,o,r))}return a=e.child,0==(o&r)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:di)(o,i)&&e.ref===t.ref)?ns(e,t,r):(t.flags|=1,(e=Ul(a,i)).ref=t.ref,e.return=t,t.child=e)}function Ha(e,t,n,i,o,r){if(null!==e&&di(e.memoizedProps,i)&&e.ref===t.ref){if(Da=!1,0==(r&o))return t.lanes=e.lanes,ns(e,t,r);0!=(16384&e.flags)&&(Da=!0)}return Ua(e,t,n,i,r)}function Va(e,t,n){var i=t.pendingProps,o=i.children,r=null!==e?e.memoizedState:null;if("hidden"===i.mode||"unstable-defer-without-hiding"===i.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bl(0,n);else{if(0==(1073741824&n))return e=null!==r?r.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bl(0,e),null;t.memoizedState={baseLanes:0},bl(0,null!==r?r.baseLanes:n)}else null!==r?(i=r.baseLanes|n,t.memoizedState=null):i=n,bl(0,i);return Fa(e,t,o,n),t.child}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ua(e,t,n,i,o){var r=yo(n)?vo:fo.current;return r=mo(t,r),rr(t,o),n=aa(e,t,n,i,r,o),null===e||Da?(t.flags|=1,Fa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function qa(e,t,n,i,o){if(yo(n)){var r=!0;ko(t)}else r=!1;if(rr(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),br(t,n,i),kr(t,n,i,o),i=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?ar(c):mo(t,c=yo(n)?vo:fo.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==i||l!==c)&&wr(t,a,i,c),sr=!1;var h=t.memoizedState;a.state=h,fr(t,i,a,o),l=t.memoizedState,s!==i||h!==l||po.current||sr?("function"==typeof u&&(mr(t,n,u,i),l=t.memoizedState),(s=sr||gr(t,n,s,i,h,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=i,t.memoizedState=l),a.props=i,a.state=l,a.context=c,i=s):("function"==typeof a.componentDidMount&&(t.flags|=4),i=!1)}else{a=t.stateNode,cr(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:Xo(t.type,s),a.props=c,d=t.pendingProps,h=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ar(l):mo(t,l=yo(n)?vo:fo.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||h!==l)&&wr(t,a,i,l),sr=!1,h=t.memoizedState,a.state=h,fr(t,i,a,o);var p=t.memoizedState;s!==d||h!==p||po.current||sr?("function"==typeof f&&(mr(t,n,f,i),p=t.memoizedState),(c=sr||gr(t,n,c,i,h,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(i,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(i,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),t.memoizedProps=i,t.memoizedState=p),a.props=i,a.state=p,a.context=l,i=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),i=!1)}return Wa(e,t,n,i,r,o)}function Wa(e,t,n,i,o,r){Ba(e,t);var a=0!=(64&t.flags);if(!i&&!a)return o&&xo(t,n,!1),ns(e,t,r);i=t.stateNode,La.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return t.flags|=1,null!==e&&a?(t.child=Pr(t,e.child,null,r),t.child=Pr(t,null,s,r)):Fa(e,t,s,r),t.memoizedState=i.state,o&&xo(t,n,!0),t.child}function $a(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),_r(e,t.containerInfo)}var Ga,Qa,Ya,Za={dehydrated:null,retryLane:0};function Xa(e,t,n){var i,o=t.pendingProps,r=Fr.current,a=!1;return(i=0!=(64&t.flags))||(i=(null===e||null!==e.memoizedState)&&0!=(2&r)),i?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(r|=1),uo(Fr,1&r),null===e?(void 0!==o.fallback&&qr(t),e=o.children,r=o.fallback,a?(e=Ka(t,e,r,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Za,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ka(t,e,r,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Za,t.lanes=33554432,e):((n=$l({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,i,o){var r=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&r)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ul(a,s),null!==e?i=Ul(e,i):(i=Wl(i,r,o,null)).flags|=2,i.return=t,n.return=t,n.sibling=i,t.child=n,i}(e,t,o.children,o.fallback,n),a=t.child,r=e.child.memoizedState,a.memoizedState=null===r?{baseLanes:n}:{baseLanes:r.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Za,o):(n=function(e,t,n,i){var o=e.child;return e=o.sibling,n=Ul(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=i),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ka(e,t,n,i){var o=e.mode,r=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==r?(r.childLanes=0,r.pendingProps=t):r=$l(t,o,0,null),n=Wl(n,o,i,null),r.return=e,n.return=e,r.sibling=n,e.child=r,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),or(e.return,t)}function es(e,t,n,i,o,r){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:o,lastEffect:r}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=i,a.tail=n,a.tailMode=o,a.lastEffect=r)}function ts(e,t,n){var i=t.pendingProps,o=i.revealOrder,r=i.tail;if(Fa(e,t,i.children,n),0!=(2&(i=Fr.current)))i=1&i|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(uo(Fr,i),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Nr(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),es(t,!1,o,n,r,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Nr(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}es(t,!0,n,null,r,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ns|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ul(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ul(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function is(e,t){if(!Vr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?t||null===e.tail?e.tail=null:e.tail.sibling=null:i.sibling=null}}function os(e,t,n){var i=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return yo(t.type)&&go(),null;case 3:return Ir(),co(po),co(fo),Yr(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==e&&null!==e.child||($r(t)?t.flags|=4:i.hydrate||(t.flags|=256)),null;case 5:Dr(t);var r=Ar(Rr.current);if(n=t.type,null!==e&&null!=t.stateNode)Qa(e,t,n,i),e.ref!==t.ref&&(t.flags|=128);else{if(!i){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ar(Tr.current),$r(t)){i=t.stateNode,n=t.type;var s=t.memoizedProps;switch(i[Xi]=t,i[Ki]=s,n){case"dialog":Ti("cancel",i),Ti("close",i);break;case"iframe":case"object":case"embed":Ti("load",i);break;case"video":case"audio":for(e=0;e<Ci.length;e++)Ti(Ci[e],i);break;case"source":Ti("error",i);break;case"img":case"image":case"link":Ti("error",i),Ti("load",i);break;case"details":Ti("toggle",i);break;case"input":ee(i,s),Ti("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},Ti("invalid",i);break;case"textarea":le(i,s),Ti("invalid",i)}for(var c in Ee(n,s),e=null,s)s.hasOwnProperty(c)&&(r=s[c],"children"===c?"string"==typeof r?i.textContent!==r&&(e=["children",r]):"number"==typeof r&&i.textContent!==""+r&&(e=["children",""+r]):l.hasOwnProperty(c)&&null!=r&&"onScroll"===c&&Ti("scroll",i));switch(n){case"input":Z(i),ie(i,s,!0);break;case"textarea":Z(i),ue(i);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(i.onclick=ji)}i=e,t.updateQueue=i,null!==i&&(t.flags|=4)}else{switch(c=9===r.nodeType?r:r.ownerDocument,e===de&&(e=he(n)),e===de?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof i.is?e=c.createElement(n,{is:i.is}):(e=c.createElement(n),"select"===n&&(c=e,i.multiple?c.multiple=!0:i.size&&(c.size=i.size))):e=c.createElementNS(e,n),e[Xi]=t,e[Ki]=i,Ga(e,t),t.stateNode=e,c=Se(n,i),n){case"dialog":Ti("cancel",e),Ti("close",e),r=i;break;case"iframe":case"object":case"embed":Ti("load",e),r=i;break;case"video":case"audio":for(r=0;r<Ci.length;r++)Ti(Ci[r],e);r=i;break;case"source":Ti("error",e),r=i;break;case"img":case"image":case"link":Ti("error",e),Ti("load",e),r=i;break;case"details":Ti("toggle",e),r=i;break;case"input":ee(e,i),r=J(e,i),Ti("invalid",e);break;case"option":r=re(e,i);break;case"select":e._wrapperState={wasMultiple:!!i.multiple},r=o({},i,{value:void 0}),Ti("invalid",e);break;case"textarea":le(e,i),r=se(e,i),Ti("invalid",e);break;default:r=i}Ee(n,r);var u=r;for(s in u)if(u.hasOwnProperty(s)){var d=u[s];"style"===s?ke(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&me(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&ye(e,d):"number"==typeof d&&ye(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Ti("scroll",e):null!=d&&w(e,s,d,c))}switch(n){case"input":Z(e),ie(e,i,!1);break;case"textarea":Z(e),ue(e);break;case"option":null!=i.value&&e.setAttribute("value",""+Q(i.value));break;case"select":e.multiple=!!i.multiple,null!=(s=i.value)?ae(e,!!i.multiple,s,!1):null!=i.defaultValue&&ae(e,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof r.onClick&&(e.onclick=ji)}Bi(n,i)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ya(0,t,e.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));n=Ar(Rr.current),Ar(Tr.current),$r(t)?(i=t.stateNode,n=t.memoizedProps,i[Xi]=t,i.nodeValue!==n&&(t.flags|=4)):((i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[Xi]=t,t.stateNode=i)}return null;case 13:return co(Fr),i=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(i=null!==i,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$r(t):n=null!==e.memoizedState,i&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Fr.current)?0===Ls&&(Ls=3):(0!==Ls&&3!==Ls||(Ls=4),null===Os||0==(134217727&Ns)&&0==(134217727&js)||vl(Os,As))),(i||n)&&(t.flags|=4),null);case 4:return Ir(),null===e&&Ri(t.stateNode.containerInfo),null;case 10:return ir(t),null;case 19:if(co(Fr),null===(i=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(c=i.rendering))if(s)is(i,!1);else{if(0!==Ls||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Nr(e))){for(t.flags|=64,is(i,!1),null!==(s=c.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=n,n=t.child;null!==n;)e=i,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,e=c.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return uo(Fr,1&Fr.current|2),t.child}e=e.sibling}null!==i.tail&&Uo()>Us&&(t.flags|=64,s=!0,is(i,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Nr(c))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),is(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!Vr)return null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-i.renderingStartTime>Us&&1073741824!==n&&(t.flags|=64,s=!0,is(i,!1),t.lanes=33554432);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=i.last)?n.sibling=c:t.child=c,i.last=c)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.lastEffect=t.lastEffect,i.renderingStartTime=Uo(),n.sibling=null,t=Fr.current,uo(Fr,s?1&t|2:1&t),n):null;case 23:case 24:return wl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==i.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function rs(e){switch(e.tag){case 1:yo(e.type)&&go();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ir(),co(po),co(fo),Yr(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Dr(e),null;case 13:return co(Fr),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return co(Fr),null;case 4:return Ir(),null;case 10:return ir(e),null;case 23:case 24:return wl(),null;default:return null}}function as(e,t){try{var n="",i=t;do{n+=$(i),i=i.return}while(i);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ga=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Qa=function(e,t,n,i){var r=e.memoizedProps;if(r!==i){e=t.stateNode,Ar(Tr.current);var a,s=null;switch(n){case"input":r=J(e,r),i=J(e,i),s=[];break;case"option":r=re(e,r),i=re(e,i),s=[];break;case"select":r=o({},r,{value:void 0}),i=o({},i,{value:void 0}),s=[];break;case"textarea":r=se(e,r),i=se(e,i),s=[];break;default:"function"!=typeof r.onClick&&"function"==typeof i.onClick&&(e.onclick=ji)}for(d in Ee(n,i),n=null,r)if(!i.hasOwnProperty(d)&&r.hasOwnProperty(d)&&null!=r[d])if("style"===d){var c=r[d];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in i){var u=i[d];if(c=null!=r?r[d]:void 0,i.hasOwnProperty(d)&&u!==c&&(null!=u||null!=c))if("style"===d)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(s||(s=[]),s.push(d,n)),n=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Ti("scroll",e),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===L?u.toString():(s=s||[]).push(d,u))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Ya=function(e,t,n,i){n!==i&&(t.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function cs(e,t,n){(n=ur(-1,n)).tag=3,n.payload={element:null};var i=t.value;return n.callback=function(){Gs||(Gs=!0,Qs=i),ss(0,t)},n}function us(e,t,n){(n=ur(-1,n)).tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var o=t.value;n.payload=function(){return ss(0,t),i(o)}}var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){"function"!=typeof i&&(null===Ys?Ys=new Set([this]):Ys.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function hs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Fl(e,t)}else t.current=null}function fs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,i=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xo(t.type,n),i),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$i(t.stateNode.containerInfo))}throw Error(a(163))}function ps(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var i=e.create;e.destroy=i()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;i=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Il(n,e),_l(n,e)),e=i}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(i=n.elementType===n.type?t.memoizedProps:Xo(n.type,t.memoizedProps),e.componentDidUpdate(i,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&pr(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}pr(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Bi(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))))}throw Error(a(163))}function vs(e,t){for(var n=e;;){if(5===n.tag){var i=n.stateNode;if(t)"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{i=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,i.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ms(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(Eo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var i=n,o=i.destroy;if(i=i.tag,void 0!==o)if(0!=(4&i))Il(t,n);else{i=t;try{o()}catch(e){Fl(i,e)}}n=n.next}while(n!==e)}break;case 1:if(hs(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Fl(t,e)}break;case 5:hs(t);break;case 4:xs(e,t)}}function ys(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gs(e){return 5===e.tag||3===e.tag||4===e.tag}function bs(e){e:{for(var t=e.return;null!==t;){if(gs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var i=!1;break;case 3:case 4:t=t.containerInfo,i=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}i?ws(e,n,t):ks(e,n,t)}function ws(e,t,n){var i=e.tag,o=5===i||6===i;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=ji));else if(4!==i&&null!==(e=e.child))for(ws(e,t,n),e=e.sibling;null!==e;)ws(e,t,n),e=e.sibling}function ks(e,t,n){var i=e.tag,o=5===i||6===i;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==i&&null!==(e=e.child))for(ks(e,t,n),e=e.sibling;null!==e;)ks(e,t,n),e=e.sibling}function xs(e,t){for(var n,i,o=t,r=!1;;){if(!r){r=o.return;e:for(;;){if(null===r)throw Error(a(160));switch(n=r.stateNode,r.tag){case 5:i=!1;break e;case 3:case 4:n=n.containerInfo,i=!0;break e}r=r.return}r=!0}if(5===o.tag||6===o.tag){e:for(var s=e,l=o,c=l;;)if(ms(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}i?(s=n,l=o.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(ms(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(r=!1)}o.sibling.return=o.return,o=o.sibling}}function Es(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var i=n=n.next;do{3==(3&i.tag)&&(e=i.destroy,i.destroy=void 0,void 0!==e&&e()),i=i.next}while(i!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){i=t.memoizedProps;var o=null!==e?e.memoizedProps:i;e=t.type;var r=t.updateQueue;if(t.updateQueue=null,null!==r){for(n[Ki]=i,"input"===e&&"radio"===i.type&&null!=i.name&&te(n,i),Se(e,o),t=Se(e,i),o=0;o<r.length;o+=2){var s=r[o],l=r[o+1];"style"===s?ke(n,l):"dangerouslySetInnerHTML"===s?me(n,l):"children"===s?ye(n,l):w(n,s,l,t)}switch(e){case"input":ne(n,i);break;case"textarea":ce(n,i);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!i.multiple,null!=(r=i.value)?ae(n,!!i.multiple,r,!1):e!==!!i.multiple&&(null!=i.defaultValue?ae(n,!!i.multiple,i.defaultValue,!0):ae(n,!!i.multiple,i.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Bs=Uo(),vs(t.child,!0)),void Ss(t);case 19:return void Ss(t);case 23:case 24:return void vs(t,null!==t.memoizedState)}throw Error(a(163))}function Ss(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ds),t.forEach((function(t){var i=jl.bind(null,e,t);n.has(t)||(n.add(t),t.then(i,i))}))}}function Cs(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ps=Math.ceil,Ms=k.ReactCurrentDispatcher,zs=k.ReactCurrentOwner,Ts=0,Os=null,Rs=null,As=0,_s=0,Is=lo(0),Ls=0,Ds=null,Fs=0,Ns=0,js=0,Hs=0,Vs=null,Bs=0,Us=1/0;function qs(){Us=Uo()+500}var Ws,$s=null,Gs=!1,Qs=null,Ys=null,Zs=!1,Xs=null,Ks=90,Js=[],el=[],tl=null,nl=0,il=null,ol=-1,rl=0,al=0,sl=null,ll=!1;function cl(){return 0!=(48&Ts)?Uo():-1!==ol?ol:ol=Uo()}function ul(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===qo()?1:2;if(0===rl&&(rl=Fs),0!==Zo.transition){0!==al&&(al=null!==Vs?Vs.pendingLanes:0),e=rl;var t=4186112&~al;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=qo(),e=jt(0!=(4&Ts)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),rl)}function dl(e,t,n){if(50<nl)throw nl=0,il=null,Error(a(185));if(null===(e=hl(e,t)))return null;Bt(e,t,n),e===Os&&(js|=t,4===Ls&&vl(e,As));var i=qo();1===t?0!=(8&Ts)&&0==(48&Ts)?ml(e):(fl(e,n),0===Ts&&(qs(),Qo())):(0==(4&Ts)||98!==i&&99!==i||(null===tl?tl=new Set([e]):tl.add(e)),fl(e,n)),Vs=e}function hl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fl(e,t){for(var n=e.callbackNode,i=e.suspendedLanes,o=e.pingedLanes,r=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ut(s),c=1<<l,u=r[l];if(-1===u){if(0==(c&i)||0!=(c&o)){u=t,Dt(c);var d=Lt;r[l]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=t&&(e.expiredLanes|=c);s&=~c}if(i=Ft(e,e===Os?As:0),t=Lt,0===i)null!==n&&(n!==Fo&&Mo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Fo&&Mo(n)}15===t?(n=ml.bind(null,e),null===jo?(jo=[n],Ho=Po(Ao,Yo)):jo.push(n),n=Fo):14===t?n=Go(99,ml.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Go(n,pl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function pl(e){if(ol=-1,al=rl=0,0!=(48&Ts))throw Error(a(327));var t=e.callbackNode;if(Al()&&e.callbackNode!==t)return null;var n=Ft(e,e===Os?As:0);if(0===n)return null;var i=n,o=Ts;Ts|=16;var r=El();for(Os===e&&As===i||(qs(),kl(e,i));;)try{Pl();break}catch(t){xl(e,t)}if(nr(),Ms.current=r,Ts=o,null!==Rs?i=0:(Os=null,As=0,i=Ls),0!=(Fs&js))kl(e,0);else if(0!==i){if(2===i&&(Ts|=64,e.hydrate&&(e.hydrate=!1,$i(e.containerInfo)),0!==(n=Nt(e))&&(i=Sl(e,n))),1===i)throw t=Ds,kl(e,0),vl(e,n),fl(e,Uo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,i){case 0:case 1:throw Error(a(345));case 2:case 5:Tl(e);break;case 3:if(vl(e,n),(62914560&n)===n&&10<(i=Bs+500-Uo())){if(0!==Ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){cl(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=qi(Tl.bind(null,e),i);break}Tl(e);break;case 4:if(vl(e,n),(4186112&n)===n)break;for(i=e.eventTimes,o=-1;0<n;){var s=31-Ut(n);r=1<<s,(s=i[s])>o&&(o=s),n&=~r}if(n=o,10<(n=(120>(n=Uo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ps(n/1960))-n)){e.timeoutHandle=qi(Tl.bind(null,e),n);break}Tl(e);break;default:throw Error(a(329))}}return fl(e,Uo()),e.callbackNode===t?pl.bind(null,e):null}function vl(e,t){for(t&=~Hs,t&=~js,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),i=1<<n;e[n]=-1,t&=~i}}function ml(e){if(0!=(48&Ts))throw Error(a(327));if(Al(),e===Os&&0!=(e.expiredLanes&As)){var t=As,n=Sl(e,t);0!=(Fs&js)&&(n=Sl(e,t=Ft(e,t)))}else n=Sl(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Ts|=64,e.hydrate&&(e.hydrate=!1,$i(e.containerInfo)),0!==(t=Nt(e))&&(n=Sl(e,t))),1===n)throw n=Ds,kl(e,0),vl(e,t),fl(e,Uo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tl(e),fl(e,Uo()),null}function yl(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&(qs(),Qo())}}function gl(e,t){var n=Ts;Ts&=-2,Ts|=8;try{return e(t)}finally{0===(Ts=n)&&(qs(),Qo())}}function bl(e,t){uo(Is,_s),_s|=t,Fs|=t}function wl(){_s=Is.current,co(Is)}function kl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Wi(n)),null!==Rs)for(n=Rs.return;null!==n;){var i=n;switch(i.tag){case 1:null!=(i=i.type.childContextTypes)&&go();break;case 3:Ir(),co(po),co(fo),Yr();break;case 5:Dr(i);break;case 4:Ir();break;case 13:case 19:co(Fr);break;case 10:ir(i);break;case 23:case 24:wl()}n=n.return}Os=e,Rs=Ul(e.current,null),As=_s=Fs=t,Ls=0,Ds=null,Hs=js=Ns=0}function xl(e,t){for(;;){var n=Rs;try{if(nr(),Zr.current=Ra,na){for(var i=Jr.memoizedState;null!==i;){var o=i.queue;null!==o&&(o.pending=null),i=i.next}na=!1}if(Kr=0,ta=ea=Jr=null,ia=!1,zs.current=null,null===n||null===n.return){Ls=1,Ds=t,Rs=null;break}e:{var r=e,a=n.return,s=n,l=t;if(t=As,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Fr.current),h=a;do{var f;if(f=13===h.tag){var p=h.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var v=h.memoizedProps;f=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!d)}}if(f){var m=h.updateQueue;if(null===m){var y=new Set;y.add(c),h.updateQueue=y}else m.add(c);if(0==(2&h.mode)){if(h.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var g=ur(-1,1);g.tag=2,dr(s,g)}s.lanes|=1;break e}l=void 0,s=t;var b=r.pingCache;if(null===b?(b=r.pingCache=new ls,l=new Set,b.set(c,l)):void 0===(l=b.get(c))&&(l=new Set,b.set(c,l)),!l.has(s)){l.add(s);var w=Nl.bind(null,r,c,s);c.then(w,w)}h.flags|=4096,h.lanes=t;break e}h=h.return}while(null!==h);l=Error((G(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ls&&(Ls=2),l=as(l,s),h=a;do{switch(h.tag){case 3:r=l,h.flags|=4096,t&=-t,h.lanes|=t,hr(h,cs(0,r,t));break e;case 1:r=l;var k=h.type,x=h.stateNode;if(0==(64&h.flags)&&("function"==typeof k.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Ys||!Ys.has(x)))){h.flags|=4096,t&=-t,h.lanes|=t,hr(h,us(h,r,t));break e}}h=h.return}while(null!==h)}zl(n)}catch(e){t=e,Rs===n&&null!==n&&(Rs=n=n.return);continue}break}}function El(){var e=Ms.current;return Ms.current=Ra,null===e?Ra:e}function Sl(e,t){var n=Ts;Ts|=16;var i=El();for(Os===e&&As===t||kl(e,t);;)try{Cl();break}catch(t){xl(e,t)}if(nr(),Ts=n,Ms.current=i,null!==Rs)throw Error(a(261));return Os=null,As=0,Ls}function Cl(){for(;null!==Rs;)Ml(Rs)}function Pl(){for(;null!==Rs&&!zo();)Ml(Rs)}function Ml(e){var t=Ws(e.alternate,e,_s);e.memoizedProps=e.pendingProps,null===t?zl(e):Rs=t,zs.current=null}function zl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=os(n,t,_s)))return void(Rs=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&_s)||0==(4&n.mode)){for(var i=0,o=n.child;null!==o;)i|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=i}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=rs(t)))return n.flags&=2047,void(Rs=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Rs=t);Rs=t=e}while(null!==t);0===Ls&&(Ls=5)}function Tl(e){var t=qo();return $o(99,Ol.bind(null,e,t)),null}function Ol(e,t){do{Al()}while(null!==Xs);if(0!=(48&Ts))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var i=n.lanes|n.childLanes,o=i,r=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<r;){var c=31-Ut(r),u=1<<c;o[c]=0,s[c]=-1,l[c]=-1,r&=~u}if(null!==tl&&0==(24&i)&&tl.has(e)&&tl.delete(e),e===Os&&(Rs=Os=null,As=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){if(o=Ts,Ts|=32,zs.current=null,Hi=Qt,mi(s=vi())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,r=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var d=0,h=-1,f=-1,p=0,v=0,m=s,y=null;t:for(;;){for(var g;m!==l||0!==r&&3!==m.nodeType||(h=d+r),m!==c||0!==u&&3!==m.nodeType||(f=d+u),3===m.nodeType&&(d+=m.nodeValue.length),null!==(g=m.firstChild);)y=m,m=g;for(;;){if(m===s)break t;if(y===l&&++p===r&&(h=d),y===c&&++v===u&&(f=d),null!==(g=m.nextSibling))break;y=(m=y).parentNode}m=g}l=-1===h||-1===f?null:{start:h,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Vi={focusedElem:s,selectionRange:l},Qt=!1,sl=null,ll=!1,$s=i;do{try{Rl()}catch(e){if(null===$s)throw Error(a(330));Fl($s,e),$s=$s.nextEffect}}while(null!==$s);sl=null,$s=i;do{try{for(s=e;null!==$s;){var b=$s.flags;if(16&b&&ye($s.stateNode,""),128&b){var w=$s.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bs($s),$s.flags&=-3;break;case 6:bs($s),$s.flags&=-3,Es($s.alternate,$s);break;case 1024:$s.flags&=-1025;break;case 1028:$s.flags&=-1025,Es($s.alternate,$s);break;case 4:Es($s.alternate,$s);break;case 8:xs(s,l=$s);var x=l.alternate;ys(l),null!==x&&ys(x)}$s=$s.nextEffect}}catch(e){if(null===$s)throw Error(a(330));Fl($s,e),$s=$s.nextEffect}}while(null!==$s);if(k=Vi,w=vi(),b=k.focusedElem,s=k.selectionRange,w!==b&&b&&b.ownerDocument&&pi(b.ownerDocument.documentElement,b)){null!==s&&mi(b)&&(w=s.start,void 0===(k=s.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),l=b.textContent.length,x=Math.min(s.start,l),s=void 0===s.end?x:Math.min(s.end,l),!k.extend&&x>s&&(l=s,s=x,x=l),l=fi(b,x),r=fi(b,s),l&&r&&(1!==k.rangeCount||k.anchorNode!==l.node||k.anchorOffset!==l.offset||k.focusNode!==r.node||k.focusOffset!==r.offset)&&((w=w.createRange()).setStart(l.node,l.offset),k.removeAllRanges(),x>s?(k.addRange(w),k.extend(r.node,r.offset)):(w.setEnd(r.node,r.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Qt=!!Hi,Vi=Hi=null,e.current=n,$s=i;do{try{for(b=e;null!==$s;){var E=$s.flags;if(36&E&&ps(b,$s.alternate,$s),128&E){w=void 0;var S=$s.ref;if(null!==S){var C=$s.stateNode;$s.tag,w=C,"function"==typeof S?S(w):S.current=w}}$s=$s.nextEffect}}catch(e){if(null===$s)throw Error(a(330));Fl($s,e),$s=$s.nextEffect}}while(null!==$s);$s=null,No(),Ts=o}else e.current=n;if(Zs)Zs=!1,Xs=e,Ks=t;else for($s=i;null!==$s;)t=$s.nextEffect,$s.nextEffect=null,8&$s.flags&&((E=$s).sibling=null,E.stateNode=null),$s=t;if(0===(i=e.pendingLanes)&&(Ys=null),1===i?e===il?nl++:(nl=0,il=e):nl=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(Eo,n,void 0,64==(64&n.current.flags))}catch(e){}if(fl(e,Uo()),Gs)throw Gs=!1,e=Qs,Qs=null,e;return 0!=(8&Ts)||Qo(),null}function Rl(){for(;null!==$s;){var e=$s.alternate;ll||null===sl||(0!=(8&$s.flags)?Je($s,sl)&&(ll=!0):13===$s.tag&&Cs(e,$s)&&Je($s,sl)&&(ll=!0));var t=$s.flags;0!=(256&t)&&fs(e,$s),0==(512&t)||Zs||(Zs=!0,Go(97,(function(){return Al(),null}))),$s=$s.nextEffect}}function Al(){if(90!==Ks){var e=97<Ks?97:Ks;return Ks=90,$o(e,Ll)}return!1}function _l(e,t){Js.push(t,e),Zs||(Zs=!0,Go(97,(function(){return Al(),null})))}function Il(e,t){el.push(t,e),Zs||(Zs=!0,Go(97,(function(){return Al(),null})))}function Ll(){if(null===Xs)return!1;var e=Xs;if(Xs=null,0!=(48&Ts))throw Error(a(331));var t=Ts;Ts|=32;var n=el;el=[];for(var i=0;i<n.length;i+=2){var o=n[i],r=n[i+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===r)throw Error(a(330));Fl(r,e)}}for(n=Js,Js=[],i=0;i<n.length;i+=2){o=n[i],r=n[i+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===r)throw Error(a(330));Fl(r,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ts=t,Qo(),!0}function Dl(e,t,n){dr(e,t=cs(0,t=as(n,t),1)),t=cl(),null!==(e=hl(e,1))&&(Bt(e,1,t),fl(e,t))}function Fl(e,t){if(3===e.tag)Dl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Dl(n,e,t);break}if(1===n.tag){var i=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===Ys||!Ys.has(i))){var o=us(n,e=as(t,e),1);if(dr(n,o),o=cl(),null!==(n=hl(n,1)))Bt(n,1,o),fl(n,o);else if("function"==typeof i.componentDidCatch&&(null===Ys||!Ys.has(i)))try{i.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Nl(e,t,n){var i=e.pingCache;null!==i&&i.delete(t),t=cl(),e.pingedLanes|=e.suspendedLanes&n,Os===e&&(As&n)===n&&(4===Ls||3===Ls&&(62914560&As)===As&&500>Uo()-Bs?kl(e,0):Hs|=n),fl(e,t)}function jl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===qo()?1:2:(0===rl&&(rl=Fs),0===(t=Ht(62914560&~rl))&&(t=4194304))),n=cl(),null!==(e=hl(e,t))&&(Bt(e,t,n),fl(e,n))}function Hl(e,t,n,i){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Vl(e,t,n,i){return new Hl(e,t,n,i)}function Bl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ul(e,t){var n=e.alternate;return null===n?((n=Vl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ql(e,t,n,i,o,r){var s=2;if(i=e,"function"==typeof e)Bl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Wl(n.children,o,r,t);case D:s=8,o|=16;break;case C:s=8,o|=1;break;case P:return(e=Vl(12,n,t,8|o)).elementType=P,e.type=P,e.lanes=r,e;case O:return(e=Vl(13,n,t,o)).type=O,e.elementType=O,e.lanes=r,e;case R:return(e=Vl(19,n,t,o)).elementType=R,e.lanes=r,e;case F:return $l(n,o,r,t);case N:return(e=Vl(24,n,t,o)).elementType=N,e.lanes=r,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case M:s=10;break e;case z:s=9;break e;case T:s=11;break e;case A:s=14;break e;case _:s=16,i=null;break e;case I:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Vl(s,n,t,o)).elementType=e,t.type=i,t.lanes=r,t}function Wl(e,t,n,i){return(e=Vl(7,e,i,t)).lanes=n,e}function $l(e,t,n,i){return(e=Vl(23,e,i,t)).elementType=F,e.lanes=n,e}function Gl(e,t,n){return(e=Vl(6,e,null,t)).lanes=n,e}function Ql(e,t,n){return(t=Vl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vt(0),this.expirationTimes=Vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vt(0),this.mutableSourceEagerHydrationData=null}function Zl(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==i?null:""+i,children:e,containerInfo:t,implementation:n}}function Xl(e,t,n,i){var o=t.current,r=cl(),s=ul(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(yo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(yo(c)){n=wo(n,c,l);break e}}n=l}else n=ho;return null===t.context?t.context=n:t.pendingContext=n,(t=ur(r,s)).payload={element:e},null!==(i=void 0===i?null:i)&&(t.callback=i),dr(o,t),dl(o,s,r),s}function Kl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Jl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ec(e,t){Jl(e,t),(e=e.alternate)&&Jl(e,t)}function tc(e,t,n){var i=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Yl(e,t,null!=n&&!0===n.hydrate),t=Vl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,lr(t),e[Ji]=n.current,Ri(8===e.nodeType?e.parentNode:e),i)for(e=0;e<i.length;e++){var o=(t=i[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ic(e,t,n,i,o){var r=n._reactRootContainer;if(r){var a=r._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Kl(a);s.call(e)}}Xl(t,a,e,o)}else{if(r=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tc(e,0,t?{hydrate:!0}:void 0)}(n,i),a=r._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Kl(a);l.call(e)}}gl((function(){Xl(t,a,e,o)}))}return Kl(a)}function oc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(t))throw Error(a(200));return Zl(e,t,null,n)}Ws=function(e,t,n){var i=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||po.current)Da=!0;else{if(0==(n&i)){switch(Da=!1,t.tag){case 3:$a(t),Gr();break;case 5:Lr(t);break;case 1:yo(t.type)&&ko(t);break;case 4:_r(t,t.stateNode.containerInfo);break;case 10:i=t.memoizedProps.value;var o=t.type._context;uo(Ko,o._currentValue),o._currentValue=i;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Xa(e,t,n):(uo(Fr,1&Fr.current),null!==(t=ns(e,t,n))?t.sibling:null);uo(Fr,1&Fr.current);break;case 19:if(i=0!=(n&t.childLanes),0!=(64&e.flags)){if(i)return ts(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(Fr,Fr.current),i)break;return null;case 23:case 24:return t.lanes=0,Va(e,t,n)}return ns(e,t,n)}Da=0!=(16384&e.flags)}else Da=!1;switch(t.lanes=0,t.tag){case 2:if(i=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=mo(t,fo.current),rr(t,n),o=aa(null,t,i,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,yo(i)){var r=!0;ko(t)}else r=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,lr(t);var s=i.getDerivedStateFromProps;"function"==typeof s&&mr(t,i,s,e),o.updater=yr,t.stateNode=o,o._reactInternals=t,kr(t,i,e,n),t=Wa(null,t,i,!0,r,n)}else t.tag=0,Fa(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(r=o._init)(o._payload),t.type=o,r=t.tag=function(e){if("function"==typeof e)return Bl(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===A)return 14}return 2}(o),e=Xo(o,e),r){case 0:t=Ua(null,t,o,e,n);break e;case 1:t=qa(null,t,o,e,n);break e;case 11:t=Na(null,t,o,e,n);break e;case 14:t=ja(null,t,o,Xo(o.type,e),i,n);break e}throw Error(a(306,o,""))}return t;case 0:return i=t.type,o=t.pendingProps,Ua(e,t,i,o=t.elementType===i?o:Xo(i,o),n);case 1:return i=t.type,o=t.pendingProps,qa(e,t,i,o=t.elementType===i?o:Xo(i,o),n);case 3:if($a(t),i=t.updateQueue,null===e||null===i)throw Error(a(282));if(i=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,cr(e,t),fr(t,i,null,n),(i=t.memoizedState.element)===o)Gr(),t=ns(e,t,n);else{if((r=(o=t.stateNode).hydrate)&&(Hr=Gi(t.stateNode.containerInfo.firstChild),jr=t,r=Vr=!0),r){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(r=e[o])._workInProgressVersionPrimary=e[o+1],Qr.push(r);for(n=Mr(t,null,i,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Fa(e,t,i,n),Gr();t=t.child}return t;case 5:return Lr(t),null===e&&qr(t),i=t.type,o=t.pendingProps,r=null!==e?e.memoizedProps:null,s=o.children,Ui(i,o)?s=null:null!==r&&Ui(i,r)&&(t.flags|=16),Ba(e,t),Fa(e,t,s,n),t.child;case 6:return null===e&&qr(t),null;case 13:return Xa(e,t,n);case 4:return _r(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=Pr(t,null,i,n):Fa(e,t,i,n),t.child;case 11:return i=t.type,o=t.pendingProps,Na(e,t,i,o=t.elementType===i?o:Xo(i,o),n);case 7:return Fa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fa(e,t,t.pendingProps.children,n),t.child;case 10:e:{i=t.type._context,o=t.pendingProps,s=t.memoizedProps,r=o.value;var l=t.type._context;if(uo(Ko,l._currentValue),l._currentValue=r,null!==s)if(l=s.value,0==(r=ci(l,r)?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(l,r):1073741823))){if(s.children===o.children&&!po.current){t=ns(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===i&&0!=(u.observedBits&r)){1===l.tag&&((u=ur(-1,n&-n)).tag=2,dr(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),or(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Fa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,i=(r=t.pendingProps).children,rr(t,n),i=i(o=ar(o,r.unstable_observedBits)),t.flags|=1,Fa(e,t,i,n),t.child;case 14:return r=Xo(o=t.type,t.pendingProps),ja(e,t,o,r=Xo(o.type,r),i,n);case 15:return Ha(e,t,t.type,t.pendingProps,i,n);case 17:return i=t.type,o=t.pendingProps,o=t.elementType===i?o:Xo(i,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,yo(i)?(e=!0,ko(t)):e=!1,rr(t,n),br(t,i,o),kr(t,i,o,n),Wa(null,t,i,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return Va(e,t,n)}throw Error(a(156,t.tag))},tc.prototype.render=function(e){Xl(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xl(null,e,null,(function(){t[Ji]=null}))},et=function(e){13===e.tag&&(dl(e,4,cl()),ec(e,4))},tt=function(e){13===e.tag&&(dl(e,67108864,cl()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cl(),n=ul(e);dl(e,n,t),ec(e,n)}},it=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var i=n[t];if(i!==e&&i.form===e.form){var o=oo(i);if(!o)throw Error(a(90));X(i),ne(i,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Ae=yl,_e=function(e,t,n,i,o){var r=Ts;Ts|=4;try{return $o(98,e.bind(null,t,n,i,o))}finally{0===(Ts=r)&&(qs(),Qo())}},Ie=function(){0==(49&Ts)&&(function(){if(null!==tl){var e=tl;tl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fl(e,Uo())}))}Qo()}(),Al())},Le=function(e,t){var n=Ts;Ts|=2;try{return e(t)}finally{0===(Ts=n)&&(qs(),Qo())}};var rc={Events:[no,io,oo,Oe,Re,Al,{current:!1}]},ac={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},sc={bundleType:ac.bundleType,version:ac.version,rendererPackageName:ac.rendererPackageName,rendererConfig:ac.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ke(e))?null:e.stateNode},findFiberByHostInstance:ac.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lc.isDisabled&&lc.supportsFiber)try{Eo=lc.inject(sc),So=lc}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=rc,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ke(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ts;if(0!=(48&n))return e(t);Ts|=1;try{if(e)return $o(99,e.bind(null,t))}finally{Ts=n,Qo()}},t.hydrate=function(e,t,n){if(!nc(t))throw Error(a(200));return ic(null,e,t,!0,n)},t.render=function(e,t,n){if(!nc(t))throw Error(a(200));return ic(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nc(e))throw Error(a(40));return!!e._reactRootContainer&&(gl((function(){ic(null,null,e,!1,(function(){e._reactRootContainer=null,e[Ji]=null}))})),!0)},t.unstable_batchedUpdates=yl,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,i){if(!nc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ic(e,t,n,!1,i)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,i=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,h=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case u:case d:case r:case s:case a:case f:return e;default:switch(e=e&&e.$$typeof){case c:case h:case m:case v:case l:return e;default:return t}}case o:return t}}}function x(e){return k(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=l,t.Element=i,t.ForwardRef=h,t.Fragment=r,t.Lazy=m,t.Memo=v,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=f,t.isAsyncMode=function(e){return x(e)||k(e)===u},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===c},t.isContextProvider=function(e){return k(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return k(e)===h},t.isFragment=function(e){return k(e)===r},t.isLazy=function(e){return k(e)===m},t.isMemo=function(e){return k(e)===v},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===s},t.isStrictMode=function(e){return k(e)===a},t.isSuspense=function(e){return k(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===r||e===d||e===s||e===a||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===v||e.$$typeof===l||e.$$typeof===c||e.$$typeof===h||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=k},864:(e,t,n)=>{"use strict";e.exports=n(921)},438:(e,t,n)=>{(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,i=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},r=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function c(e,t,n,i){var o=t&&t.prototype instanceof m?t:m,r=Object.create(o.prototype),a=new z(i||[]);return r._invoke=function(e,t,n){var i=d;return function(o,r){if(i===f)throw new Error("Generator is already running");if(i===p){if("throw"===o)throw r;return O()}for(n.method=o,n.arg=r;;){var a=n.delegate;if(a){var s=C(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(i===d)throw i=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);i=f;var l=u(e,t,n);if("normal"===l.type){if(i=n.done?p:h,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(i=p,n.method="throw",n.arg=l.arg)}}}(e,n,a),r}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var d="suspendedStart",h="suspendedYield",f="executing",p="completed",v={};function m(){}function y(){}function g(){}var b={};b[r]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(T([])));k&&k!==n&&i.call(k,r)&&(b=k);var x=g.prototype=m.prototype=Object.create(b);function E(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(o,r,a,s){var l=u(e[o],e,r);if("throw"!==l.type){var c=l.arg,d=c.value;return d&&"object"==typeof d&&i.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(d).then((function(e){c.value=e,a(c)}),(function(e){return n("throw",e,a,s)}))}s(l.arg)}var o;this._invoke=function(e,i){function r(){return new t((function(t,o){n(e,i,t,o)}))}return o=o?o.then(r,r):r()}}function C(e,n){var i=e.iterator[n.method];if(i===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=u(i,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var r=o.arg;return r?r.done?(n[e.resultName]=r.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):r:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function M(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function z(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function T(e){if(e){var n=e[r];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(i.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:O}}function O(){return{value:t,done:!0}}return y.prototype=x.constructor=g,g.constructor=y,y.displayName=l(g,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,l(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},E(S.prototype),S.prototype[a]=function(){return this},e.AsyncIterator=S,e.async=function(t,n,i,o,r){void 0===r&&(r=Promise);var a=new S(c(t,n,i,o),r);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},E(x),l(x,s,"Generator"),x[r]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var i=t.pop();if(i in e)return n.value=i,n.done=!1,n}return n.done=!0,n}},e.values=T,z.prototype={constructor:z,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(M),!e)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(i,o){return s.type="throw",s.arg=e,n.next=i,o&&(n.method="next",n.arg=t),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var l=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&i.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var a=r?r.completion:{};return a.type=e,a.arg=t,r?(this.method="next",this.next=r.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),M(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var i=n.completion;if("throw"===i.type){var o=i.arg;M(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,i){return this.delegate={iterator:T(e),resultName:n,nextLoc:i},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}}},i={};function o(t){var n=i[t];if(void 0!==n)return n.exports;var r=i[t]={exports:{}};return e[t](r,r.exports,o),r.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";function e(t){return(e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(t)}function t(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=e(t)););return t}function i(){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,n,i){var o=t(e,n);if(o){var r=Object.getOwnPropertyDescriptor(o,n);return r.get?r.get.call(arguments.length<3?e:i):r.value}}).apply(this,arguments)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}o.r(r),o.d(r,{Particles:()=>y,default:()=>g});var c=o(757),u=o.n(c);const d=n(294);var h=o.n(d);const f=n(269),p=n(252);var v=o.n(p),m=function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((i=i.apply(e,t||[])).next())}))},y=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");Object.defineProperty(e,"prototype",{value:Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),writable:!1}),t&&a(e,t)}(d,t);var n,o,r,s,c=(r=d,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var t,n=e(r);if(s){var i=e(this).constructor;t=Reflect.construct(n,arguments,i)}else t=n.apply(this,arguments);return l(this,t)});function d(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),(t=c.call(this,e)).state={init:!1,library:void 0},t}return n=d,(o=[{key:"destroy",value:function(){this.state.library&&(this.state.library.destroy(),this.setState({library:void 0}))}},{key:"shouldComponentUpdate",value:function(e){return!v()(e,this.props)}},{key:"componentDidUpdate",value:function(){this.refresh()}},{key:"forceUpdate",value:function(){var t=this;this.refresh().then((function(){i(e(d.prototype),"forceUpdate",t).call(t)}))}},{key:"componentDidMount",value:function(){m(this,void 0,void 0,u().mark((function e(){var t=this;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.props.init){e.next=3;break}return e.next=3,this.props.init(f.tsParticles);case 3:this.setState({init:!0},(function(){return m(t,void 0,void 0,u().mark((function e(){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.loadParticles();case 2:case"end":return e.stop()}}),e,this)})))}));case 4:case"end":return e.stop()}}),e,this)})))}},{key:"componentWillUnmount",value:function(){this.destroy()}},{key:"render",value:function(){var e=this.props,t=e.width,n=e.height,i=e.className,o=e.canvasClassName,r=e.id;return h().createElement("div",{className:i,id:r},h().createElement("canvas",{className:o,style:Object.assign(Object.assign({},this.props.style),{width:t,height:n})}))}},{key:"refresh",value:function(){return m(this,void 0,void 0,u().mark((function e(){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.destroy(),e.next=3,this.loadParticles();case 3:case"end":return e.stop()}}),e,this)})))}},{key:"loadParticles",value:function(){var e;return m(this,void 0,void 0,u().mark((function t(){var n,i,o=this;return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.state.init){t.next=2;break}return t.abrupt("return");case 2:if(n=function(e){return m(o,void 0,void 0,u().mark((function t(){return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.props.container&&(this.props.container.current=e),this.setState({library:e}),!this.props.loaded){t.next=5;break}return t.next=5,this.props.loaded(e);case 5:case"end":return t.stop()}}),t,this)})))},!this.props.url){t.next=9;break}return t.next=6,f.tsParticles.loadJSON(this.props.id,this.props.url);case 6:t.t0=t.sent,t.next=12;break;case 9:return t.next=11,f.tsParticles.load(this.props.id,null!==(e=this.props.params)&&void 0!==e?e:this.props.options);case 11:t.t0=t.sent;case 12:return i=t.t0,t.next=15,n(i);case 15:case"end":return t.stop()}}),t,this)})))}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),d}(d.Component);y.defaultProps={width:"100%",height:"100%",options:{},style:{},url:void 0,id:"tsparticles"};const g=y})();var a=t;for(var s in r)a[s]=r[s];r.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})})()},868:(e,t,n)=>{const i=n(438);for(let e in i)i.default[e]=i[e];e.exports=i.default},408:(e,t,n)=>{"use strict";var i=n(418),o=60103,r=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),r=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),c=d("react.memo"),u=d("react.lazy")}var h="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||p}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=m.prototype;var b=g.prototype=new y;b.constructor=g,i(b,m.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var i,r={},a=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,i)&&!x.hasOwnProperty(i)&&(r[i]=t[i]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];r.children=c}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===r[i]&&(r[i]=l[i]);return{$$typeof:o,type:e,key:a,ref:s,props:r,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function M(e,t,n,i,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case r:l=!0}}if(l)return a=a(l=e),e=""===i?"."+P(l,0):i,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),M(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(l=0,i=""===i?".":i+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=i+P(s=e[c],c);l+=M(s,t,n,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=M(s=s.value,t,n,u=i+P(s,c++),a);else if("object"===s)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function z(e,t,n){if(null==e)return e;var i=[],o=0;return M(e,i,"","",(function(e){return t.call(n,e,o++)})),i}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var O={current:null};function R(){var e=O.current;if(null===e)throw Error(f(321));return e}var A={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:i};t.Children={map:z,forEach:function(e,t,n){z(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return z(e,(function(){t++})),t},toArray:function(e){return z(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(f(143));return e}},t.Component=m,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var r=i({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)k.call(t,u)&&!x.hasOwnProperty(u)&&(r[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)r.children=n;else if(1<u){c=Array(u);for(var d=0;d<u;d++)c[d]=arguments[d+2];r.children=c}return{$$typeof:o,type:e.type,key:a,ref:s,props:r,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return R().useCallback(e,t)},t.useContext=function(e,t){return R().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return R().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return R().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return R().useLayoutEffect(e,t)},t.useMemo=function(e,t){return R().useMemo(e,t)},t.useReducer=function(e,t,n){return R().useReducer(e,t,n)},t.useRef=function(e){return R().useRef(e)},t.useState=function(e){return R().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,i,o,r;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(d,0))},i=function(e,t){u=setTimeout(e,t)},o=function(){clearTimeout(u)},t.unstable_shouldYield=function(){return!1},r=t.unstable_forceFrameRate=function(){}}else{var h=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,y=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},r=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+g;try{m(!0,e)?k.postMessage(null):(v=!1,m=null)}catch(e){throw k.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,k.postMessage(null))},i=function(e,n){y=h((function(){e(t.unstable_now())}),n)},o=function(){f(y),y=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var i=n-1>>>1,o=e[i];if(!(void 0!==o&&0<C(o,t)))break e;e[i]=t,e[n]=o,n=i}}function E(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var i=0,o=e.length;i<o;){var r=2*(i+1)-1,a=e[r],s=r+1,l=e[s];if(void 0!==a&&0>C(a,n))void 0!==l&&0>C(l,a)?(e[i]=l,e[s]=n,i=s):(e[i]=a,e[r]=n,i=r);else{if(!(void 0!==l&&0>C(l,n)))break e;e[i]=l,e[s]=n,i=s}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],M=[],z=1,T=null,O=3,R=!1,A=!1,_=!1;function I(e){for(var t=E(M);null!==t;){if(null===t.callback)S(M);else{if(!(t.startTime<=e))break;S(M),t.sortIndex=t.expirationTime,x(P,t)}t=E(M)}}function L(e){if(_=!1,I(e),!A)if(null!==E(P))A=!0,n(D);else{var t=E(M);null!==t&&i(L,t.startTime-e)}}function D(e,n){A=!1,_&&(_=!1,o()),R=!0;var r=O;try{for(I(n),T=E(P);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,O=T.priorityLevel;var s=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?T.callback=s:T===E(P)&&S(P),I(n)}else S(P);T=E(P)}if(null!==T)var l=!0;else{var c=E(M);null!==c&&i(L,c.startTime-n),l=!1}return l}finally{T=null,O=r,R=!1}}var F=r;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||R||(A=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return O},t.unstable_getFirstCallbackNode=function(){return E(P)},t.unstable_next=function(e){switch(O){case 1:case 2:case 3:var t=3;break;default:t=O}var n=O;O=t;try{return e()}finally{O=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=O;O=e;try{return t()}finally{O=n}},t.unstable_scheduleCallback=function(e,r,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:z++,callback:r,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,x(M,e),null===E(P)&&e===E(M)&&(_?o():_=!0,i(L,a-s))):(e.sortIndex=l,x(P,e),A||R||(A=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=O;return function(){var n=O;O=t;try{return e.apply(this,arguments)}finally{O=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,i){var o=n?n.call(i,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var r=Object.keys(e),a=Object.keys(t);if(r.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),l=0;l<r.length;l++){var c=r[l];if(!s(c))return!1;var u=e[c],d=t[c];if(!1===(o=n?n.call(i,u,d,c):void 0)||void 0===o&&u!==d)return!1}return!0}},269:(e,t,n)=>{"use strict";n.r(t),n.d(t,{AnimatableColor:()=>ge,AnimatableGradient:()=>be,AnimatableGradientColor:()=>xe,AnimationOptions:()=>Ze,Attract:()=>F,Background:()=>z,BackgroundMask:()=>O,BackgroundMaskCover:()=>T,Bounce:()=>N,Bubble:()=>V,BubbleBase:()=>j,BubbleDiv:()=>H,Canvas:()=>Gn,Circle:()=>ri,CircleWarp:()=>si,ClickEvent:()=>A,Collisions:()=>Oe,CollisionsOverlap:()=>Ce,ColorAnimation:()=>me,Connect:()=>U,ConnectLinks:()=>B,Container:()=>vi,Destroy:()=>Ie,DivEvent:()=>_,Engine:()=>Ci,EventListeners:()=>Yn,Events:()=>D,ExternalInteractorBase:()=>Pi,FrameManager:()=>Zn,FullScreen:()=>R,Grab:()=>W,GrabLinks:()=>q,GradientAngle:()=>we,GradientAngleAnimation:()=>Ee,GradientColorOpacity:()=>ke,GradientColorOpacityAnimation:()=>Se,HoverEvent:()=>L,HslAnimation:()=>ye,InteractionManager:()=>Kn,Interactivity:()=>oe,Life:()=>Fe,LifeDelay:()=>Le,LifeDuration:()=>De,Light:()=>Y,LightArea:()=>G,LightGradient:()=>$,LightShadow:()=>Q,Links:()=>He,LinksShadow:()=>Ne,LinksTriangle:()=>je,Loader:()=>gi,Main:()=>Ci,ManualParticle:()=>re,Modes:()=>ie,Motion:()=>se,MotionReduce:()=>ae,Move:()=>Ye,MoveAngle:()=>Ve,MoveAttract:()=>Be,MoveGravity:()=>Ue,MovePath:()=>We,MovePathDelay:()=>qe,MoveTrail:()=>$e,Opacity:()=>Ke,OpacityAnimation:()=>Xe,Options:()=>ve,OptionsColor:()=>M,Orbit:()=>et,OrbitRotation:()=>Je,OutModes:()=>Ge,Parallax:()=>I,Particle:()=>ni,Particles:()=>di,ParticlesBounce:()=>Te,ParticlesBounceFactor:()=>ze,ParticlesDensity:()=>tt,ParticlesInteractorBase:()=>Mi,ParticlesNumber:()=>nt,ParticlesOptions:()=>bt,ParticlesRepulse:()=>it,Plugins:()=>wi,Point:()=>ii,Push:()=>Z,QuadTree:()=>li,Range:()=>oi,Rectangle:()=>ai,Remove:()=>X,Repulse:()=>ee,RepulseBase:()=>K,RepulseDiv:()=>J,Responsive:()=>le,Retina:()=>hi,Roll:()=>rt,RollLight:()=>ot,Rotate:()=>st,RotateAnimation:()=>at,Shadow:()=>lt,Shape:()=>ct,Size:()=>dt,SizeAnimation:()=>ut,Slow:()=>te,Spin:()=>Qe,Split:()=>_e,SplitFactor:()=>Re,SplitRate:()=>Ae,Stroke:()=>ht,Theme:()=>ue,ThemeDefault:()=>ce,Tilt:()=>pt,TiltAnimation:()=>ft,Trail:()=>ne,Twinkle:()=>mt,TwinkleValues:()=>vt,ValueWithRandom:()=>Me,Vector:()=>s,Vector3d:()=>Jn,Wobble:()=>yt,ZIndex:()=>gt,alterHsl:()=>$n,animate:()=>Et,areBoundsInside:()=>Ot,arrayRandomIndex:()=>Mt,calcEasing:()=>k,calcExactPositionOrRandomFromSize:()=>C,calcExactPositionOrRandomFromSizeRanged:()=>P,calcPositionFromSize:()=>x,calcPositionOrRandomFromSize:()=>E,calcPositionOrRandomFromSizeRanged:()=>S,calculateBounds:()=>Rt,cancelAnimation:()=>St,circleBounce:()=>Nt,circleBounceDataFromParticle:()=>Ft,clamp:()=>l,clear:()=>Dn,collisionVelocity:()=>w,colorMix:()=>Mn,colorToHsl:()=>cn,colorToRgb:()=>ln,deepExtend:()=>At,divMode:()=>Dt,divModeExecute:()=>It,drawConnectLine:()=>Fn,drawEllipse:()=>Wn,drawGrabLine:()=>jn,drawLine:()=>_n,drawParticle:()=>Hn,drawParticlePlugin:()=>qn,drawPlugin:()=>Un,drawShape:()=>Vn,drawShapeAfterEffect:()=>Bn,drawTriangle:()=>In,generatedAttribute:()=>Ut,getDistance:()=>y,getDistances:()=>m,getHslAnimationFromHsl:()=>Rn,getHslFromAnimation:()=>On,getLinkColor:()=>zn,getLinkRandomColor:()=>Tn,getParticleBaseVelocity:()=>b,getParticleDirectionAngle:()=>g,getRandomRgbColor:()=>En,getRangeMax:()=>f,getRangeMin:()=>h,getRangeValue:()=>d,getStyleFromHsl:()=>Cn,getStyleFromHsv:()=>Pn,getStyleFromRgb:()=>Sn,getValue:()=>v,gradient:()=>Nn,hslToHsv:()=>vn,hslToRgb:()=>fn,hslaToHsva:()=>mn,hslaToRgba:()=>pn,hsvToHsl:()=>yn,hsvToRgb:()=>bn,hsvaToHsla:()=>gn,hsvaToRgba:()=>wn,isDivModeEnabled:()=>_t,isInArray:()=>Ct,isPointInside:()=>Tt,isSsr:()=>xt,itemFromArray:()=>zt,loadContainerOptions:()=>Vt,loadFont:()=>Pt,loadParticlesOptions:()=>Bt,midColorValue:()=>Wt,mix:()=>c,mouseDownEvent:()=>Gt,mouseLeaveEvent:()=>Kt,mouseMoveEvent:()=>Yt,mouseOutEvent:()=>Jt,mouseUpEvent:()=>Qt,noPolygonDataLoaded:()=>on,noPolygonFound:()=>rn,paintBase:()=>Ln,randomColorValue:()=>qt,randomInRange:()=>u,rectBounce:()=>jt,resizeEvent:()=>tn,rgbToHsl:()=>un,rgbToHsv:()=>kn,rgbaToHsva:()=>xn,setRangeValue:()=>p,singleDivModeExecute:()=>Lt,stringToAlpha:()=>dn,stringToRgb:()=>hn,touchCancelEvent:()=>en,touchEndEvent:()=>$t,touchMoveEvent:()=>Xt,touchStartEvent:()=>Zt,tsParticles:()=>zi,visibilityChangeEvent:()=>nn});var i,o=function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},r=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class a{constructor(){i.set(this,void 0),o(this,i,new Map,"f")}addEventListener(e,t){var n;this.removeEventListener(e,t),r(this,i,"f").get(e)||r(this,i,"f").set(e,[]),null===(n=r(this,i,"f").get(e))||void 0===n||n.push(t)}removeEventListener(e,t){const n=r(this,i,"f").get(e);if(!n)return;const o=n.length,a=n.indexOf(t);a<0||(1===o?r(this,i,"f").delete(e):n.splice(a,1))}removeAllEventListeners(e){e?r(this,i,"f").delete(e):o(this,i,new Map,"f")}dispatchEvent(e,t){var n;null===(n=r(this,i,"f").get(e))||void 0===n||n.forEach((e=>e(t)))}hasEventListener(e){return!!r(this,i,"f").get(e)}}i=new WeakMap;class s{constructor(e,t){if("number"!=typeof e&&e)this.x=e.x,this.y=e.y;else{if(void 0===e||void 0===t)throw new Error("tsParticles - Vector not initialized correctly");this.x=e,this.y=t}}static clone(e){return s.create(e.x,e.y)}static create(e,t){return new s(e,t)}static get origin(){return s.create(0,0)}get angle(){return Math.atan2(this.y,this.x)}set angle(e){this.updateFromAngle(e,this.length)}get length(){return Math.sqrt(this.getLengthSq())}set length(e){this.updateFromAngle(this.angle,e)}add(e){return s.create(this.x+e.x,this.y+e.y)}addTo(e){this.x+=e.x,this.y+=e.y}sub(e){return s.create(this.x-e.x,this.y-e.y)}subFrom(e){this.x-=e.x,this.y-=e.y}mult(e){return s.create(this.x*e,this.y*e)}multTo(e){this.x*=e,this.y*=e}div(e){return s.create(this.x/e,this.y/e)}divTo(e){this.x/=e,this.y/=e}distanceTo(e){return this.sub(e).length}getLengthSq(){return this.x**2+this.y**2}distanceToSq(e){return this.sub(e).getLengthSq()}manhattanDistanceTo(e){return Math.abs(e.x-this.x)+Math.abs(e.y-this.y)}copy(){return s.clone(this)}setTo(e){this.x=e.x,this.y=e.y}rotate(e){return s.create(this.x*Math.cos(e)-this.y*Math.sin(e),this.x*Math.sin(e)+this.y*Math.cos(e))}updateFromAngle(e,t){this.x=Math.cos(e)*t,this.y=Math.sin(e)*t}}function l(e,t,n){return Math.min(Math.max(e,t),n)}function c(e,t,n,i){return Math.floor((e*n+t*i)/(n+i))}function u(e){const t=f(e);let n=h(e);return t===n&&(n=0),Math.random()*(t-n)+n}function d(e){return"number"==typeof e?e:u(e)}function h(e){return"number"==typeof e?e:e.min}function f(e){return"number"==typeof e?e:e.max}function p(e,t){if(e===t||void 0===t&&"number"==typeof e)return e;const n=h(e),i=f(e);return void 0!==t?{min:Math.min(n,t),max:Math.max(i,t)}:p(n,i)}function v(e){const t=e.random,{enable:n,minimumValue:i}="boolean"==typeof t?{enable:t,minimumValue:0}:t;return d(n?p(e.value,i):e.value)}function m(e,t){const n=e.x-t.x,i=e.y-t.y;return{dx:n,dy:i,distance:Math.sqrt(n*n+i*i)}}function y(e,t){return m(e,t).distance}function g(e,t,n){if("number"==typeof e)return e*Math.PI/180;switch(e){case"top":return-Math.PI/2;case"top-right":return-Math.PI/4;case"right":return 0;case"bottom-right":return Math.PI/4;case"bottom":return Math.PI/2;case"bottom-left":return 3*Math.PI/4;case"left":return Math.PI;case"top-left":return-3*Math.PI/4;case"inside":return Math.atan2(n.y-t.y,n.x-t.x);case"outside":return Math.atan2(t.y-n.y,t.x-n.x);default:return Math.random()*Math.PI*2}}function b(e){const t=s.origin;return t.length=1,t.angle=e,t}function w(e,t,n,i){return s.create(e.x*(n-i)/(n+i)+2*t.x*i/(n+i),e.y)}function k(e,t){switch(t){case"ease-out-quad":return 1-(1-e)**2;case"ease-out-cubic":return 1-(1-e)**3;case"ease-out-quart":return 1-(1-e)**4;case"ease-out-quint":return 1-(1-e)**5;case"ease-out-expo":return 1===e?1:1-Math.pow(2,-10*e);case"ease-out-sine":return Math.sin(e*Math.PI/2);case"ease-out-back":{const t=1.70158;return 1+(t+1)*Math.pow(e-1,3)+t*Math.pow(e-1,2)}case"ease-out-circ":return Math.sqrt(1-Math.pow(e-1,2));default:return e}}function x(e){var t,n;return void 0!==(null===(t=e.position)||void 0===t?void 0:t.x)&&void 0!==(null===(n=e.position)||void 0===n?void 0:n.y)?{x:e.position.x*e.size.width/100,y:e.position.y*e.size.height/100}:void 0}function E(e){var t,n,i,o;return{x:(null!==(n=null===(t=e.position)||void 0===t?void 0:t.x)&&void 0!==n?n:100*Math.random())*e.size.width/100,y:(null!==(o=null===(i=e.position)||void 0===i?void 0:i.y)&&void 0!==o?o:100*Math.random())*e.size.height/100}}function S(e){var t,n;const i={x:void 0!==(null===(t=e.position)||void 0===t?void 0:t.x)?d(e.position.x):void 0,y:void 0!==(null===(n=e.position)||void 0===n?void 0:n.y)?d(e.position.y):void 0};return E({size:e.size,position:i})}function C(e){var t,n,i,o;return{x:null!==(n=null===(t=e.position)||void 0===t?void 0:t.x)&&void 0!==n?n:Math.random()*e.size.width,y:null!==(o=null===(i=e.position)||void 0===i?void 0:i.y)&&void 0!==o?o:Math.random()*e.size.height}}function P(e){var t,n;const i={x:void 0!==(null===(t=e.position)||void 0===t?void 0:t.x)?d(e.position.x):void 0,y:void 0!==(null===(n=e.position)||void 0===n?void 0:n.y)?d(e.position.y):void 0};return C({size:e.size,position:i})}class M{constructor(){this.value=""}static create(e,t){const n=new M;return n.load(e),void 0!==t&&("string"==typeof t||t instanceof Array?n.load({value:t}):n.load(t)),n}load(e){void 0!==(null==e?void 0:e.value)&&(this.value=e.value)}}class z{constructor(){this.color=new M,this.color.value="",this.image="",this.position="",this.repeat="",this.size="",this.opacity=1}load(e){e&&(void 0!==e.color&&(this.color=M.create(this.color,e.color)),void 0!==e.image&&(this.image=e.image),void 0!==e.position&&(this.position=e.position),void 0!==e.repeat&&(this.repeat=e.repeat),void 0!==e.size&&(this.size=e.size),void 0!==e.opacity&&(this.opacity=e.opacity))}}class T{constructor(){this.color=new M,this.color.value="#fff",this.opacity=1}load(e){e&&(void 0!==e.color&&(this.color=M.create(this.color,e.color)),void 0!==e.opacity&&(this.opacity=e.opacity))}}class O{constructor(){this.composite="destination-out",this.cover=new T,this.enable=!1}load(e){if(e){if(void 0!==e.composite&&(this.composite=e.composite),void 0!==e.cover){const t=e.cover,n="string"==typeof e.cover?{color:e.cover}:e.cover;this.cover.load(void 0!==t.color?t:{color:n})}void 0!==e.enable&&(this.enable=e.enable)}}}class R{constructor(){this.enable=!0,this.zIndex=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.zIndex&&(this.zIndex=e.zIndex))}}class A{constructor(){this.enable=!1,this.mode=[]}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode))}}class _{constructor(){this.selectors=[],this.enable=!1,this.mode=[],this.type="circle"}get elementId(){return this.ids}set elementId(e){this.ids=e}get el(){return this.elementId}set el(e){this.elementId=e}get ids(){return this.selectors instanceof Array?this.selectors.map((e=>e.replace("#",""))):this.selectors.replace("#","")}set ids(e){this.selectors=e instanceof Array?e.map((e=>`#${e}`)):`#${e}`}load(e){var t,n;if(!e)return;const i=null!==(n=null!==(t=e.ids)&&void 0!==t?t:e.elementId)&&void 0!==n?n:e.el;void 0!==i&&(this.ids=i),void 0!==e.selectors&&(this.selectors=e.selectors),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.type&&(this.type=e.type)}}class I{constructor(){this.enable=!1,this.force=2,this.smooth=10}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.force&&(this.force=e.force),void 0!==e.smooth&&(this.smooth=e.smooth))}}class L{constructor(){this.enable=!1,this.mode=[],this.parallax=new I}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),this.parallax.load(e.parallax))}}class D{constructor(){this.onClick=new A,this.onDiv=new _,this.onHover=new L,this.resize=!0}get onclick(){return this.onClick}set onclick(e){this.onClick=e}get ondiv(){return this.onDiv}set ondiv(e){this.onDiv=e}get onhover(){return this.onHover}set onhover(e){this.onHover=e}load(e){var t,n,i;if(!e)return;this.onClick.load(null!==(t=e.onClick)&&void 0!==t?t:e.onclick);const o=null!==(n=e.onDiv)&&void 0!==n?n:e.ondiv;void 0!==o&&(o instanceof Array?this.onDiv=o.map((e=>{const t=new _;return t.load(e),t})):(this.onDiv=new _,this.onDiv.load(o))),this.onHover.load(null!==(i=e.onHover)&&void 0!==i?i:e.onhover),void 0!==e.resize&&(this.resize=e.resize)}}class F{constructor(){this.distance=200,this.duration=.4,this.easing="ease-out-quad",this.factor=1,this.maxSpeed=50,this.speed=1}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.easing&&(this.easing=e.easing),void 0!==e.factor&&(this.factor=e.factor),void 0!==e.maxSpeed&&(this.maxSpeed=e.maxSpeed),void 0!==e.speed&&(this.speed=e.speed))}}class N{constructor(){this.distance=200}load(e){e&&void 0!==e.distance&&(this.distance=e.distance)}}class j{constructor(){this.distance=200,this.duration=.4,this.mix=!1}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.mix&&(this.mix=e.mix),void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.color&&(e.color instanceof Array?this.color=e.color.map((e=>M.create(void 0,e))):(this.color instanceof Array&&(this.color=new M),this.color=M.create(this.color,e.color))),void 0!==e.size&&(this.size=e.size))}}class H extends j{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((e=>e.replace("#",""))):this.selectors.replace("#","")}set ids(e){this.selectors=e instanceof Array?e.map((e=>`#${e}`)):`#${e}`}load(e){super.load(e),e&&(void 0!==e.ids&&(this.ids=e.ids),void 0!==e.selectors&&(this.selectors=e.selectors))}}class V extends j{load(e){super.load(e),e&&(e.divs instanceof Array?this.divs=e.divs.map((e=>{const t=new H;return t.load(e),t})):((this.divs instanceof Array||!this.divs)&&(this.divs=new H),this.divs.load(e.divs)))}}class B{constructor(){this.opacity=.5}load(e){void 0!==e&&void 0!==e.opacity&&void 0!==e.opacity&&(this.opacity=e.opacity)}}class U{constructor(){this.distance=80,this.links=new B,this.radius=60}get line_linked(){return this.links}set line_linked(e){this.links=e}get lineLinked(){return this.links}set lineLinked(e){this.links=e}load(e){var t,n;e&&(void 0!==e.distance&&(this.distance=e.distance),this.links.load(null!==(n=null!==(t=e.links)&&void 0!==t?t:e.lineLinked)&&void 0!==n?n:e.line_linked),void 0!==e.radius&&(this.radius=e.radius))}}class q{constructor(){this.blink=!1,this.consent=!1,this.opacity=1}load(e){e&&(void 0!==e.blink&&(this.blink=e.blink),void 0!==e.color&&(this.color=M.create(this.color,e.color)),void 0!==e.consent&&(this.consent=e.consent),void 0!==e.opacity&&(this.opacity=e.opacity))}}class W{constructor(){this.distance=100,this.links=new q}get line_linked(){return this.links}set line_linked(e){this.links=e}get lineLinked(){return this.links}set lineLinked(e){this.links=e}load(e){var t,n;e&&(void 0!==e.distance&&(this.distance=e.distance),this.links.load(null!==(n=null!==(t=e.links)&&void 0!==t?t:e.lineLinked)&&void 0!==n?n:e.line_linked))}}class ${constructor(){this.start=new M,this.stop=new M,this.start.value="#ffffff",this.stop.value="#000000"}load(e){e&&(this.start=M.create(this.start,e.start),this.stop=M.create(this.stop,e.stop))}}class G{constructor(){this.gradient=new $,this.radius=1e3}load(e){e&&(this.gradient.load(e.gradient),void 0!==e.radius&&(this.radius=e.radius))}}class Q{constructor(){this.color=new M,this.color.value="#000000",this.length=2e3}load(e){e&&(this.color=M.create(this.color,e.color),void 0!==e.length&&(this.length=e.length))}}class Y{constructor(){this.area=new G,this.shadow=new Q}load(e){e&&(this.area.load(e.area),this.shadow.load(e.shadow))}}class Z{constructor(){this.default=!0,this.groups=[],this.quantity=4}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=e}load(e){var t;if(!e)return;void 0!==e.default&&(this.default=e.default),void 0!==e.groups&&(this.groups=e.groups.map((e=>e))),this.groups.length||(this.default=!0);const n=null!==(t=e.quantity)&&void 0!==t?t:e.particles_nb;void 0!==n&&(this.quantity=n)}}class X{constructor(){this.quantity=2}get particles_nb(){return this.quantity}set particles_nb(e){this.quantity=e}load(e){var t;if(!e)return;const n=null!==(t=e.quantity)&&void 0!==t?t:e.particles_nb;void 0!==n&&(this.quantity=n)}}class K{constructor(){this.distance=200,this.duration=.4,this.factor=100,this.speed=1,this.maxSpeed=50,this.easing="ease-out-quad"}load(e){e&&(void 0!==e.distance&&(this.distance=e.distance),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.easing&&(this.easing=e.easing),void 0!==e.factor&&(this.factor=e.factor),void 0!==e.speed&&(this.speed=e.speed),void 0!==e.maxSpeed&&(this.maxSpeed=e.maxSpeed))}}class J extends K{constructor(){super(),this.selectors=[]}get ids(){return this.selectors instanceof Array?this.selectors.map((e=>e.replace("#",""))):this.selectors.replace("#","")}set ids(e){this.selectors=e instanceof Array?e.map((()=>`#${e}`)):`#${e}`}load(e){super.load(e),e&&(void 0!==e.ids&&(this.ids=e.ids),void 0!==e.selectors&&(this.selectors=e.selectors))}}class ee extends K{load(e){super.load(e),e&&(e.divs instanceof Array?this.divs=e.divs.map((e=>{const t=new J;return t.load(e),t})):((this.divs instanceof Array||!this.divs)&&(this.divs=new J),this.divs.load(e.divs)))}}class te{constructor(){this.factor=3,this.radius=200}get active(){return!1}set active(e){}load(e){e&&(void 0!==e.factor&&(this.factor=e.factor),void 0!==e.radius&&(this.radius=e.radius))}}class ne{constructor(){this.delay=1,this.pauseOnStop=!1,this.quantity=1}load(e){e&&(void 0!==e.delay&&(this.delay=e.delay),void 0!==e.quantity&&(this.quantity=e.quantity),void 0!==e.particles&&(this.particles=At({},e.particles)),void 0!==e.pauseOnStop&&(this.pauseOnStop=e.pauseOnStop))}}class ie{constructor(){this.attract=new F,this.bounce=new N,this.bubble=new V,this.connect=new U,this.grab=new W,this.light=new Y,this.push=new Z,this.remove=new X,this.repulse=new ee,this.slow=new te,this.trail=new ne}load(e){e&&(this.attract.load(e.attract),this.bubble.load(e.bubble),this.connect.load(e.connect),this.grab.load(e.grab),this.light.load(e.light),this.push.load(e.push),this.remove.load(e.remove),this.repulse.load(e.repulse),this.slow.load(e.slow),this.trail.load(e.trail))}}class oe{constructor(){this.detectsOn="window",this.events=new D,this.modes=new ie}get detect_on(){return this.detectsOn}set detect_on(e){this.detectsOn=e}load(e){var t,n,i;if(!e)return;const o=null!==(t=e.detectsOn)&&void 0!==t?t:e.detect_on;void 0!==o&&(this.detectsOn=o),this.events.load(e.events),this.modes.load(e.modes),!0===(null===(i=null===(n=e.modes)||void 0===n?void 0:n.slow)||void 0===i?void 0:i.active)&&(this.events.onHover.mode instanceof Array?this.events.onHover.mode.indexOf("slow")<0&&this.events.onHover.mode.push("slow"):"slow"!==this.events.onHover.mode&&(this.events.onHover.mode=[this.events.onHover.mode,"slow"]))}}class re{load(e){var t,n;e&&(void 0!==e.position&&(this.position={x:null!==(t=e.position.x)&&void 0!==t?t:50,y:null!==(n=e.position.y)&&void 0!==n?n:50}),void 0!==e.options&&(this.options=At({},e.options)))}}class ae{constructor(){this.factor=4,this.value=!0}load(e){e&&(void 0!==e.factor&&(this.factor=e.factor),void 0!==e.value&&(this.value=e.value))}}class se{constructor(){this.disable=!1,this.reduce=new ae}load(e){e&&(void 0!==e.disable&&(this.disable=e.disable),this.reduce.load(e.reduce))}}class le{constructor(){this.maxWidth=1/0,this.options={},this.mode="canvas"}load(e){e&&(void 0!==e.maxWidth&&(this.maxWidth=e.maxWidth),void 0!==e.mode&&("screen"===e.mode?this.mode="screen":this.mode="canvas"),void 0!==e.options&&(this.options=At({},e.options)))}}class ce{constructor(){this.auto=!1,this.mode="any",this.value=!1}load(e){e&&(void 0!==e.auto&&(this.auto=e.auto),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.value&&(this.value=e.value))}}class ue{constructor(){this.name="",this.default=new ce}load(e){e&&(void 0!==e.name&&(this.name=e.name),this.default.load(e.default),void 0!==e.options&&(this.options=At({},e.options)))}}var de,he,fe,pe=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class ve{constructor(e){de.add(this),he.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,he,e,"f"),this.autoPlay=!0,this.background=new z,this.backgroundMask=new O,this.fullScreen=new R,this.detectRetina=!0,this.duration=0,this.fpsLimit=120,this.interactivity=new oe,this.manualParticles=[],this.motion=new se,this.particles=Bt(),this.pauseOnBlur=!0,this.pauseOnOutsideViewport=!0,this.responsive=[],this.style={},this.themes=[],this.zLayers=100}get fps_limit(){return this.fpsLimit}set fps_limit(e){this.fpsLimit=e}get retina_detect(){return this.detectRetina}set retina_detect(e){this.detectRetina=e}get backgroundMode(){return this.fullScreen}set backgroundMode(e){this.fullScreen.load(e)}load(e){var t,n,i,o,r;if(!e)return;if(void 0!==e.preset)if(e.preset instanceof Array)for(const t of e.preset)this.importPreset(t);else this.importPreset(e.preset);void 0!==e.autoPlay&&(this.autoPlay=e.autoPlay);const a=null!==(t=e.detectRetina)&&void 0!==t?t:e.retina_detect;void 0!==a&&(this.detectRetina=a),void 0!==e.duration&&(this.duration=e.duration);const s=null!==(n=e.fpsLimit)&&void 0!==n?n:e.fps_limit;void 0!==s&&(this.fpsLimit=s),void 0!==e.pauseOnBlur&&(this.pauseOnBlur=e.pauseOnBlur),void 0!==e.pauseOnOutsideViewport&&(this.pauseOnOutsideViewport=e.pauseOnOutsideViewport),void 0!==e.zLayers&&(this.zLayers=e.zLayers),this.background.load(e.background);const l=null!==(i=e.fullScreen)&&void 0!==i?i:e.backgroundMode;if("boolean"==typeof l?this.fullScreen.enable=l:this.fullScreen.load(l),this.backgroundMask.load(e.backgroundMask),this.interactivity.load(e.interactivity),void 0!==e.manualParticles&&(this.manualParticles=e.manualParticles.map((e=>{const t=new re;return t.load(e),t}))),this.motion.load(e.motion),this.particles.load(e.particles),this.style=At(this.style,e.style),pe(this,he,"f").plugins.loadOptions(this,e),void 0!==e.responsive)for(const t of e.responsive){const e=new le;e.load(t),this.responsive.push(e)}if(this.responsive.sort(((e,t)=>e.maxWidth-t.maxWidth)),void 0!==e.themes)for(const t of e.themes){const e=new ue;e.load(t),this.themes.push(e)}this.defaultDarkTheme=null===(o=pe(this,de,"m",fe).call(this,"dark"))||void 0===o?void 0:o.name,this.defaultLightTheme=null===(r=pe(this,de,"m",fe).call(this,"light"))||void 0===r?void 0:r.name}setTheme(e){if(e){const t=this.themes.find((t=>t.name===e));t&&this.load(t.options)}else{const e="undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)"),t=e&&e.matches,n=pe(this,de,"m",fe).call(this,t?"dark":"light");n&&this.load(n.options)}}setResponsive(e,t,n){this.load(n);const i=this.responsive.find((n=>"screen"===n.mode&&screen?n.maxWidth*t>screen.availWidth:n.maxWidth*t>e));return this.load(null==i?void 0:i.options),null==i?void 0:i.maxWidth}importPreset(e){this.load(pe(this,he,"f").plugins.getPreset(e))}}he=new WeakMap,de=new WeakSet,fe=function(e){var t;return null!==(t=this.themes.find((t=>t.default.value&&t.default.mode===e)))&&void 0!==t?t:this.themes.find((e=>e.default.value&&"any"===e.default.mode))};class me{constructor(){this.count=0,this.enable=!1,this.offset=0,this.speed=1,this.sync=!0}load(e){e&&(void 0!==e.count&&(this.count=p(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.offset&&(this.offset=p(e.offset)),void 0!==e.speed&&(this.speed=p(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}class ye{constructor(){this.h=new me,this.s=new me,this.l=new me}load(e){e&&(this.h.load(e.h),this.s.load(e.s),this.l.load(e.l))}}class ge extends M{constructor(){super(),this.animation=new ye}static create(e,t){const n=new ge;return n.load(e),void 0!==t&&("string"==typeof t||t instanceof Array?n.load({value:t}):n.load(t)),n}load(e){if(super.load(e),!e)return;const t=e.animation;void 0!==t&&(void 0!==t.enable?this.animation.h.load(t):this.animation.load(e.animation))}}class be{constructor(){this.angle=new we,this.colors=[],this.type="random"}load(e){e&&(this.angle.load(e.angle),void 0!==e.colors&&(this.colors=e.colors.map((e=>{const t=new xe;return t.load(e),t}))),void 0!==e.type&&(this.type=e.type))}}class we{constructor(){this.value=0,this.animation=new Ee,this.direction="clockwise"}load(e){e&&(this.animation.load(e.animation),void 0!==e.value&&(this.value=e.value),void 0!==e.direction&&(this.direction=e.direction))}}class ke{constructor(){this.value=0,this.animation=new Se}load(e){e&&(this.animation.load(e.animation),void 0!==e.value&&(this.value=p(e.value)))}}class xe{constructor(){this.stop=0,this.value=new ge}load(e){e&&(void 0!==e.stop&&(this.stop=e.stop),this.value=ge.create(this.value,e.value),void 0!==e.opacity&&(this.opacity=new ke,"number"==typeof e.opacity?this.opacity.value=e.opacity:this.opacity.load(e.opacity)))}}class Ee{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1}load(e){e&&(void 0!==e.count&&(this.count=p(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=p(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}class Se{constructor(){this.count=0,this.enable=!1,this.speed=0,this.sync=!1,this.startValue="random"}load(e){e&&(void 0!==e.count&&(this.count=p(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=p(e.speed)),void 0!==e.sync&&(this.sync=e.sync),void 0!==e.startValue&&(this.startValue=e.startValue))}}class Ce{constructor(){this.enable=!0,this.retries=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.retries&&(this.retries=e.retries))}}class Pe{constructor(){this.enable=!1,this.minimumValue=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.minimumValue&&(this.minimumValue=e.minimumValue))}}class Me{constructor(){this.random=new Pe,this.value=0}load(e){e&&("boolean"==typeof e.random?this.random.enable=e.random:this.random.load(e.random),void 0!==e.value&&(this.value=p(e.value,this.random.enable?this.random.minimumValue:void 0)))}}class ze extends Me{constructor(){super(),this.random.minimumValue=.1,this.value=1}}class Te{constructor(){this.horizontal=new ze,this.vertical=new ze}load(e){e&&(this.horizontal.load(e.horizontal),this.vertical.load(e.vertical))}}class Oe{constructor(){this.bounce=new Te,this.enable=!1,this.mode="bounce",this.overlap=new Ce}load(e){e&&(this.bounce.load(e.bounce),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.mode&&(this.mode=e.mode),this.overlap.load(e.overlap))}}class Re extends Me{constructor(){super(),this.value=3}}class Ae extends Me{constructor(){super(),this.value={min:4,max:9}}}class _e{constructor(){this.count=1,this.factor=new Re,this.rate=new Ae,this.sizeOffset=!0}load(e){e&&(void 0!==e.count&&(this.count=e.count),this.factor.load(e.factor),this.rate.load(e.rate),void 0!==e.particles&&(this.particles=At({},e.particles)),void 0!==e.sizeOffset&&(this.sizeOffset=e.sizeOffset))}}class Ie{constructor(){this.mode="none",this.split=new _e}load(e){e&&(void 0!==e.mode&&(this.mode=e.mode),this.split.load(e.split))}}class Le extends Me{constructor(){super(),this.sync=!1}load(e){e&&(super.load(e),void 0!==e.sync&&(this.sync=e.sync))}}class De extends Me{constructor(){super(),this.random.minimumValue=1e-4,this.sync=!1}load(e){e&&(super.load(e),void 0!==e.sync&&(this.sync=e.sync))}}class Fe{constructor(){this.count=0,this.delay=new Le,this.duration=new De}load(e){e&&(void 0!==e.count&&(this.count=e.count),this.delay.load(e.delay),this.duration.load(e.duration))}}class Ne{constructor(){this.blur=5,this.color=new M,this.color.value="#000",this.enable=!1}load(e){e&&(void 0!==e.blur&&(this.blur=e.blur),this.color=M.create(this.color,e.color),void 0!==e.enable&&(this.enable=e.enable))}}class je{constructor(){this.enable=!1,this.frequency=1}load(e){e&&(void 0!==e.color&&(this.color=M.create(this.color,e.color)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=e.opacity))}}class He{constructor(){this.blink=!1,this.color=new M,this.color.value="#fff",this.consent=!1,this.distance=100,this.enable=!1,this.frequency=1,this.opacity=1,this.shadow=new Ne,this.triangles=new je,this.width=1,this.warp=!1}load(e){e&&(void 0!==e.id&&(this.id=e.id),void 0!==e.blink&&(this.blink=e.blink),this.color=M.create(this.color,e.color),void 0!==e.consent&&(this.consent=e.consent),void 0!==e.distance&&(this.distance=e.distance),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=e.opacity),this.shadow.load(e.shadow),this.triangles.load(e.triangles),void 0!==e.width&&(this.width=e.width),void 0!==e.warp&&(this.warp=e.warp))}}class Ve{constructor(){this.offset=0,this.value=90}load(e){e&&(void 0!==e.offset&&(this.offset=p(e.offset)),void 0!==e.value&&(this.value=p(e.value)))}}class Be{constructor(){this.distance=200,this.enable=!1,this.rotate={x:3e3,y:3e3}}get rotateX(){return this.rotate.x}set rotateX(e){this.rotate.x=e}get rotateY(){return this.rotate.y}set rotateY(e){this.rotate.y=e}load(e){var t,n,i,o;if(!e)return;void 0!==e.distance&&(this.distance=p(e.distance)),void 0!==e.enable&&(this.enable=e.enable);const r=null!==(n=null===(t=e.rotate)||void 0===t?void 0:t.x)&&void 0!==n?n:e.rotateX;void 0!==r&&(this.rotate.x=r);const a=null!==(o=null===(i=e.rotate)||void 0===i?void 0:i.y)&&void 0!==o?o:e.rotateY;void 0!==a&&(this.rotate.y=a)}}class Ue{constructor(){this.acceleration=9.81,this.enable=!1,this.inverse=!1,this.maxSpeed=50}load(e){e&&(void 0!==e.acceleration&&(this.acceleration=p(e.acceleration)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.inverse&&(this.inverse=e.inverse),void 0!==e.maxSpeed&&(this.maxSpeed=p(e.maxSpeed)))}}class qe extends Me{constructor(){super()}}class We{constructor(){this.clamp=!0,this.delay=new qe,this.enable=!1,this.options={}}load(e){e&&(void 0!==e.clamp&&(this.clamp=e.clamp),this.delay.load(e.delay),void 0!==e.enable&&(this.enable=e.enable),this.generator=e.generator,e.options&&(this.options=At(this.options,e.options)))}}class $e{constructor(){this.enable=!1,this.length=10,this.fillColor=new M,this.fillColor.value="#000000"}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),this.fillColor=M.create(this.fillColor,e.fillColor),void 0!==e.length&&(this.length=e.length))}}class Ge{constructor(){this.default="out"}load(e){var t,n,i,o;e&&(void 0!==e.default&&(this.default=e.default),this.bottom=null!==(t=e.bottom)&&void 0!==t?t:e.default,this.left=null!==(n=e.left)&&void 0!==n?n:e.default,this.right=null!==(i=e.right)&&void 0!==i?i:e.default,this.top=null!==(o=e.top)&&void 0!==o?o:e.default)}}class Qe{constructor(){this.acceleration=0,this.enable=!1}load(e){e&&(void 0!==e.acceleration&&(this.acceleration=p(e.acceleration)),void 0!==e.enable&&(this.enable=e.enable),this.position=e.position?At({},e.position):void 0)}}class Ye{constructor(){this.angle=new Ve,this.attract=new Be,this.center={x:50,y:50,radius:0},this.decay=0,this.distance={},this.direction="none",this.drift=0,this.enable=!1,this.gravity=new Ue,this.path=new We,this.outModes=new Ge,this.random=!1,this.size=!1,this.speed=2,this.spin=new Qe,this.straight=!1,this.trail=new $e,this.vibrate=!1,this.warp=!1}get collisions(){return!1}set collisions(e){}get bounce(){return this.collisions}set bounce(e){this.collisions=e}get out_mode(){return this.outMode}set out_mode(e){this.outMode=e}get outMode(){return this.outModes.default}set outMode(e){this.outModes.default=e}get noise(){return this.path}set noise(e){this.path=e}load(e){var t,n,i;if(!e)return;void 0!==e.angle&&("number"==typeof e.angle?this.angle.value=e.angle:this.angle.load(e.angle)),this.attract.load(e.attract),this.center=At(this.center,e.center),void 0!==e.decay&&(this.decay=e.decay),void 0!==e.direction&&(this.direction=e.direction),void 0!==e.distance&&(this.distance="number"==typeof e.distance?{horizontal:e.distance,vertical:e.distance}:At({},e.distance)),void 0!==e.drift&&(this.drift=p(e.drift)),void 0!==e.enable&&(this.enable=e.enable),this.gravity.load(e.gravity);const o=null!==(t=e.outMode)&&void 0!==t?t:e.out_mode;void 0===e.outModes&&void 0===o||("string"==typeof e.outModes||void 0===e.outModes&&void 0!==o?this.outModes.load({default:null!==(n=e.outModes)&&void 0!==n?n:o}):this.outModes.load(e.outModes)),this.path.load(null!==(i=e.path)&&void 0!==i?i:e.noise),void 0!==e.random&&(this.random=e.random),void 0!==e.size&&(this.size=e.size),void 0!==e.speed&&(this.speed=p(e.speed)),this.spin.load(e.spin),void 0!==e.straight&&(this.straight=e.straight),this.trail.load(e.trail),void 0!==e.vibrate&&(this.vibrate=e.vibrate),void 0!==e.warp&&(this.warp=e.warp)}}class Ze{constructor(){this.count=0,this.enable=!1,this.speed=1,this.sync=!1}load(e){e&&(void 0!==e.count&&(this.count=p(e.count)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=p(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}class Xe extends Ze{constructor(){super(),this.destroy="none",this.enable=!1,this.speed=2,this.startValue="random",this.sync=!1}get opacity_min(){return this.minimumValue}set opacity_min(e){this.minimumValue=e}load(e){var t;e&&(super.load(e),void 0!==e.destroy&&(this.destroy=e.destroy),void 0!==e.enable&&(this.enable=e.enable),this.minimumValue=null!==(t=e.minimumValue)&&void 0!==t?t:e.opacity_min,void 0!==e.speed&&(this.speed=e.speed),void 0!==e.startValue&&(this.startValue=e.startValue),void 0!==e.sync&&(this.sync=e.sync))}}class Ke extends Me{constructor(){super(),this.animation=new Xe,this.random.minimumValue=.1,this.value=1}get anim(){return this.animation}set anim(e){this.animation=e}load(e){var t;if(!e)return;super.load(e);const n=null!==(t=e.animation)&&void 0!==t?t:e.anim;void 0!==n&&(this.animation.load(n),this.value=p(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}class Je extends Me{constructor(){super(),this.value=45,this.random.enable=!1,this.random.minimumValue=0}load(e){void 0!==e&&super.load(e)}}class et{constructor(){this.animation=new Ze,this.enable=!1,this.opacity=1,this.rotation=new Je,this.width=1}load(e){e&&(this.animation.load(e.animation),this.rotation.load(e.rotation),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.opacity&&(this.opacity=p(e.opacity)),void 0!==e.width&&(this.width=p(e.width)),void 0!==e.radius&&(this.radius=p(e.radius)),void 0!==e.color&&(this.color=M.create(this.color,e.color)))}}class tt{constructor(){this.enable=!1,this.area=800,this.factor=1e3}get value_area(){return this.area}set value_area(e){this.area=e}load(e){var t;if(!e)return;void 0!==e.enable&&(this.enable=e.enable);const n=null!==(t=e.area)&&void 0!==t?t:e.value_area;void 0!==n&&(this.area=n),void 0!==e.factor&&(this.factor=e.factor)}}class nt{constructor(){this.density=new tt,this.limit=0,this.value=100}get max(){return this.limit}set max(e){this.limit=e}load(e){var t;if(!e)return;this.density.load(e.density);const n=null!==(t=e.limit)&&void 0!==t?t:e.max;void 0!==n&&(this.limit=n),void 0!==e.value&&(this.value=e.value)}}class it extends Me{constructor(){super(),this.enabled=!1,this.distance=1,this.duration=1,this.factor=1,this.speed=1}load(e){super.load(e),e&&(void 0!==e.enabled&&(this.enabled=e.enabled),void 0!==e.distance&&(this.distance=p(e.distance)),void 0!==e.duration&&(this.duration=p(e.duration)),void 0!==e.factor&&(this.factor=p(e.factor)),void 0!==e.speed&&(this.speed=p(e.speed)))}}class ot{constructor(){this.enable=!1,this.value=0}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.value&&(this.value=p(e.value)))}}class rt{constructor(){this.darken=new ot,this.enable=!1,this.enlighten=new ot,this.mode="vertical",this.speed=25}load(e){e&&(void 0!==e.backColor&&(this.backColor=M.create(this.backColor,e.backColor)),this.darken.load(e.darken),void 0!==e.enable&&(this.enable=e.enable),this.enlighten.load(e.enlighten),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.speed&&(this.speed=p(e.speed)))}}class at{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=p(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}class st extends Me{constructor(){super(),this.animation=new at,this.direction="clockwise",this.path=!1,this.value=0}load(e){e&&(super.load(e),void 0!==e.direction&&(this.direction=e.direction),this.animation.load(e.animation),void 0!==e.path&&(this.path=e.path))}}class lt{constructor(){this.blur=0,this.color=new M,this.enable=!1,this.offset={x:0,y:0},this.color.value="#000"}load(e){e&&(void 0!==e.blur&&(this.blur=e.blur),this.color=M.create(this.color,e.color),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.offset&&(void 0!==e.offset.x&&(this.offset.x=e.offset.x),void 0!==e.offset.y&&(this.offset.y=e.offset.y)))}}class ct{constructor(){this.options={},this.type="circle"}get image(){var e;return null!==(e=this.options.image)&&void 0!==e?e:this.options.images}set image(e){this.options.image=e,this.options.images=e}get custom(){return this.options}set custom(e){this.options=e}get images(){return this.image}set images(e){this.image=e}get stroke(){return[]}set stroke(e){}get character(){var e;return null!==(e=this.options.character)&&void 0!==e?e:this.options.char}set character(e){this.options.character=e,this.options.char=e}get polygon(){var e;return null!==(e=this.options.polygon)&&void 0!==e?e:this.options.star}set polygon(e){this.options.polygon=e,this.options.star=e}load(e){var t,n,i;if(!e)return;const o=null!==(t=e.options)&&void 0!==t?t:e.custom;if(void 0!==o)for(const e in o){const t=o[e];t&&(this.options[e]=At(null!==(n=this.options[e])&&void 0!==n?n:{},t))}this.loadShape(e.character,"character","char",!0),this.loadShape(e.polygon,"polygon","star",!1),this.loadShape(null!==(i=e.image)&&void 0!==i?i:e.images,"image","images",!0),void 0!==e.type&&(this.type=e.type)}loadShape(e,t,n,i){var o,r,a,s;void 0!==e&&(e instanceof Array?(this.options[t]instanceof Array||(this.options[t]=[],this.options[n]&&!i||(this.options[n]=[])),this.options[t]=At(null!==(o=this.options[t])&&void 0!==o?o:[],e),this.options[n]&&!i||(this.options[n]=At(null!==(r=this.options[n])&&void 0!==r?r:[],e))):(this.options[t]instanceof Array&&(this.options[t]={},this.options[n]&&!i||(this.options[n]={})),this.options[t]=At(null!==(a=this.options[t])&&void 0!==a?a:{},e),this.options[n]&&!i||(this.options[n]=At(null!==(s=this.options[n])&&void 0!==s?s:{},e))))}}class ut extends Ze{constructor(){super(),this.destroy="none",this.enable=!1,this.speed=5,this.startValue="random",this.sync=!1}get size_min(){return this.minimumValue}set size_min(e){this.minimumValue=e}load(e){var t;super.load(e),e&&(void 0!==e.destroy&&(this.destroy=e.destroy),void 0!==e.enable&&(this.enable=e.enable),this.minimumValue=null!==(t=e.minimumValue)&&void 0!==t?t:e.size_min,void 0!==e.speed&&(this.speed=e.speed),void 0!==e.startValue&&(this.startValue=e.startValue),void 0!==e.sync&&(this.sync=e.sync))}}class dt extends Me{constructor(){super(),this.animation=new ut,this.random.minimumValue=1,this.value=3}get anim(){return this.animation}set anim(e){this.animation=e}load(e){var t;if(super.load(e),!e)return;const n=null!==(t=e.animation)&&void 0!==t?t:e.anim;void 0!==n&&(this.animation.load(n),this.value=p(this.value,this.animation.enable?this.animation.minimumValue:void 0))}}class ht{constructor(){this.width=0}load(e){e&&(void 0!==e.color&&(this.color=ge.create(this.color,e.color)),void 0!==e.width&&(this.width=e.width),void 0!==e.opacity&&(this.opacity=e.opacity))}}class ft{constructor(){this.enable=!1,this.speed=0,this.sync=!1}load(e){e&&(void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=p(e.speed)),void 0!==e.sync&&(this.sync=e.sync))}}class pt extends Me{constructor(){super(),this.animation=new ft,this.direction="clockwise",this.enable=!1,this.value=0}load(e){super.load(e),e&&(this.animation.load(e.animation),void 0!==e.direction&&(this.direction=e.direction),void 0!==e.enable&&(this.enable=e.enable))}}class vt{constructor(){this.enable=!1,this.frequency=.05,this.opacity=1}load(e){e&&(void 0!==e.color&&(this.color=M.create(this.color,e.color)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.frequency&&(this.frequency=e.frequency),void 0!==e.opacity&&(this.opacity=p(e.opacity)))}}class mt{constructor(){this.lines=new vt,this.particles=new vt}load(e){e&&(this.lines.load(e.lines),this.particles.load(e.particles))}}class yt{constructor(){this.distance=5,this.enable=!1,this.speed=50}load(e){e&&(void 0!==e.distance&&(this.distance=p(e.distance)),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.speed&&(this.speed=p(e.speed)))}}class gt extends Me{constructor(){super(),this.opacityRate=1,this.sizeRate=1,this.velocityRate=1}load(e){super.load(e),e&&(void 0!==e.opacityRate&&(this.opacityRate=e.opacityRate),void 0!==e.sizeRate&&(this.sizeRate=e.sizeRate),void 0!==e.velocityRate&&(this.velocityRate=e.velocityRate))}}class bt{constructor(){this.bounce=new Te,this.collisions=new Oe,this.color=new ge,this.color.value="#fff",this.destroy=new Ie,this.gradient=[],this.groups={},this.life=new Fe,this.links=new He,this.move=new Ye,this.number=new nt,this.opacity=new Ke,this.orbit=new et,this.reduceDuplicates=!1,this.repulse=new it,this.roll=new rt,this.rotate=new st,this.shadow=new lt,this.shape=new ct,this.size=new dt,this.stroke=new ht,this.tilt=new pt,this.twinkle=new mt,this.wobble=new yt,this.zIndex=new gt}get line_linked(){return this.links}set line_linked(e){this.links=e}get lineLinked(){return this.links}set lineLinked(e){this.links=e}load(e){var t,n,i,o,r,a,s,l;if(!e)return;this.bounce.load(e.bounce),this.color.load(ge.create(this.color,e.color)),this.destroy.load(e.destroy),this.life.load(e.life);const c=null!==(n=null!==(t=e.links)&&void 0!==t?t:e.lineLinked)&&void 0!==n?n:e.line_linked;if(void 0!==c&&this.links.load(c),void 0!==e.groups)for(const t in e.groups){const n=e.groups[t];void 0!==n&&(this.groups[t]=At(null!==(i=this.groups[t])&&void 0!==i?i:{},n))}this.move.load(e.move),this.number.load(e.number),this.opacity.load(e.opacity),this.orbit.load(e.orbit),void 0!==e.reduceDuplicates&&(this.reduceDuplicates=e.reduceDuplicates),this.repulse.load(e.repulse),this.roll.load(e.roll),this.rotate.load(e.rotate),this.shape.load(e.shape),this.size.load(e.size),this.shadow.load(e.shadow),this.tilt.load(e.tilt),this.twinkle.load(e.twinkle),this.wobble.load(e.wobble),this.zIndex.load(e.zIndex);const u=null!==(r=null===(o=e.move)||void 0===o?void 0:o.collisions)&&void 0!==r?r:null===(a=e.move)||void 0===a?void 0:a.bounce;void 0!==u&&(this.collisions.enable=u),this.collisions.load(e.collisions);const d=null!==(s=e.stroke)&&void 0!==s?s:null===(l=e.shape)||void 0===l?void 0:l.stroke;d&&(d instanceof Array?this.stroke=d.map((e=>{const t=new ht;return t.load(e),t})):(this.stroke instanceof Array&&(this.stroke=new ht),this.stroke.load(d)));const h=e.gradient;h&&(h instanceof Array?this.gradient=h.map((e=>{const t=new be;return t.load(e),t})):(this.gradient instanceof Array&&(this.gradient=new be),this.gradient.load(h)))}}function wt(e,t,n,i,o,r){const a={bounced:!1};return t.min<i.min||t.min>i.max||t.max<i.min||t.max>i.max||(e.max>=n.min&&e.max<=(n.max+n.min)/2&&o>0||e.min<=n.max&&e.min>(n.max+n.min)/2&&o<0)&&(a.velocity=o*-r,a.bounced=!0),a}function kt(e,t){if(!(t instanceof Array))return e.matches(t);for(const n of t)if(e.matches(n))return!0;return!1}function xt(){return"undefined"==typeof window||!window||void 0===window.document||!window.document}function Et(){return xt()?e=>setTimeout(e):e=>(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.setTimeout)(e)}function St(){return xt()?e=>clearTimeout(e):e=>(window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.clearTimeout)(e)}function Ct(e,t){return e===t||t instanceof Array&&t.indexOf(e)>-1}async function Pt(e,t){try{await document.fonts.load(`${null!=t?t:"400"} 36px '${null!=e?e:"Verdana"}'`)}catch(e){}}function Mt(e){return Math.floor(Math.random()*e.length)}function zt(e,t,n=!0){return e[void 0!==t&&n?t%e.length:Mt(e)]}function Tt(e,t,n,i,o){return Ot(Rt(e,null!=i?i:0),t,n,o)}function Ot(e,t,n,i){let o=!0;return i&&"bottom"!==i||(o=e.top<t.height+n.x),!o||i&&"left"!==i||(o=e.right>n.x),!o||i&&"right"!==i||(o=e.left<t.width+n.y),!o||i&&"top"!==i||(o=e.bottom>n.y),o}function Rt(e,t){return{bottom:e.y+t,left:e.x-t,right:e.x+t,top:e.y-t}}function At(e,...t){for(const n of t){if(null==n)continue;if("object"!=typeof n){e=n;continue}const t=Array.isArray(n);!t||"object"==typeof e&&e&&Array.isArray(e)?t||"object"==typeof e&&e&&!Array.isArray(e)||(e={}):e=[];for(const t in n){if("__proto__"===t)continue;const i=n[t],o="object"==typeof i,r=e;r[t]=o&&Array.isArray(i)?i.map((e=>At(r[t],e))):At(r[t],i)}}return e}function _t(e,t){return t instanceof Array?!!t.find((t=>t.enable&&Ct(e,t.mode))):Ct(e,t.mode)}function It(e,t,n){if(t instanceof Array)for(const i of t){const t=i.mode;i.enable&&Ct(e,t)&&Lt(i,n)}else{const i=t.mode;t.enable&&Ct(e,i)&&Lt(t,n)}}function Lt(e,t){const n=e.selectors;if(n instanceof Array)for(const i of n)t(i,e);else t(n,e)}function Dt(e,t){if(t&&e)return e instanceof Array?e.find((e=>kt(t,e.selectors))):kt(t,e.selectors)?e:void 0}function Ft(e){return{position:e.getPosition(),radius:e.getRadius(),mass:e.getMass(),velocity:e.velocity,factor:s.create(v(e.options.bounce.horizontal),v(e.options.bounce.vertical))}}function Nt(e,t){const{x:n,y:i}=e.velocity.sub(t.velocity),[o,r]=[e.position,t.position],{dx:a,dy:s}=m(r,o);if(n*a+i*s<0)return;const l=-Math.atan2(s,a),c=e.mass,u=t.mass,d=e.velocity.rotate(l),h=t.velocity.rotate(l),f=w(d,h,c,u),p=w(h,d,c,u),v=f.rotate(-l),y=p.rotate(-l);e.velocity.x=v.x*e.factor.x,e.velocity.y=v.y*e.factor.y,t.velocity.x=y.x*t.factor.x,t.velocity.y=y.y*t.factor.y}function jt(e,t){const n=Rt(e.getPosition(),e.getRadius()),i=wt({min:n.left,max:n.right},{min:n.top,max:n.bottom},{min:t.left,max:t.right},{min:t.top,max:t.bottom},e.velocity.x,v(e.options.bounce.horizontal));i.bounced&&(void 0!==i.velocity&&(e.velocity.x=i.velocity),void 0!==i.position&&(e.position.x=i.position));const o=wt({min:n.top,max:n.bottom},{min:n.left,max:n.right},{min:t.top,max:t.bottom},{min:t.left,max:t.right},e.velocity.y,v(e.options.bounce.vertical));o.bounced&&(void 0!==o.velocity&&(e.velocity.y=o.velocity),void 0!==o.position&&(e.position.y=o.position))}function Ht(e,...t){for(const n of t)e.load(n)}function Vt(e,...t){const n=new ve(e);return Ht(n,...t),n}function Bt(...e){const t=new bt;return Ht(t,...e),t}const Ut="generated",qt="random",Wt="mid",$t="touchend",Gt="mousedown",Qt="mouseup",Yt="mousemove",Zt="touchstart",Xt="touchmove",Kt="mouseleave",Jt="mouseout",en="touchcancel",tn="resize",nn="visibilitychange",on="No polygon data loaded.",rn="No polygon found, you need to specify SVG url in config.";function an(e,t,n){let i=n;return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}function sn(e){if(e.startsWith("rgb")){const t=/rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([\d.]+)\s*)?\)/i.exec(e);return t?{a:t.length>4?parseFloat(t[5]):1,b:parseInt(t[3],10),g:parseInt(t[2],10),r:parseInt(t[1],10)}:void 0}if(e.startsWith("hsl")){const t=/hsla?\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(e);return t?pn({a:t.length>4?parseFloat(t[5]):1,h:parseInt(t[1],10),l:parseInt(t[3],10),s:parseInt(t[2],10)}):void 0}if(e.startsWith("hsv")){const t=/hsva?\(\s*(\d+)°\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(,\s*([\d.]+)\s*)?\)/i.exec(e);return t?wn({a:t.length>4?parseFloat(t[5]):1,h:parseInt(t[1],10),s:parseInt(t[2],10),v:parseInt(t[3],10)}):void 0}{const t=/^#?([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i,n=e.replace(t,((e,t,n,i,o)=>t+t+n+n+i+i+(void 0!==o?o+o:""))),i=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(n);return i?{a:void 0!==i[4]?parseInt(i[4],16)/255:1,b:parseInt(i[3],16),g:parseInt(i[2],16),r:parseInt(i[1],16)}:void 0}}function ln(e,t,n=!0){var i,o,r;if(void 0===e)return;const a="string"==typeof e?{value:e}:e;let s;if("string"==typeof a.value)s=a.value===qt?En():hn(a.value);else if(a.value instanceof Array)s=ln({value:zt(a.value,t,n)});else{const e=a.value,t=null!==(i=e.rgb)&&void 0!==i?i:a.value;if(void 0!==t.r)s=t;else{const t=null!==(o=e.hsl)&&void 0!==o?o:a.value;if(void 0!==t.h&&void 0!==t.l)s=fn(t);else{const t=null!==(r=e.hsv)&&void 0!==r?r:a.value;void 0!==t.h&&void 0!==t.v&&(s=bn(t))}}}return s}function cn(e,t,n=!0){const i=ln(e,t,n);return void 0!==i?un(i):void 0}function un(e){const t=e.r/255,n=e.g/255,i=e.b/255,o=Math.max(t,n,i),r=Math.min(t,n,i),a={h:0,l:(o+r)/2,s:0};return o!==r&&(a.s=a.l<.5?(o-r)/(o+r):(o-r)/(2-o-r),a.h=t===o?(n-i)/(o-r):a.h=n===o?2+(i-t)/(o-r):4+(t-n)/(o-r)),a.l*=100,a.s*=100,a.h*=60,a.h<0&&(a.h+=360),a}function dn(e){var t;return null===(t=sn(e))||void 0===t?void 0:t.a}function hn(e){return sn(e)}function fn(e){const t={b:0,g:0,r:0},n={h:e.h/360,l:e.l/100,s:e.s/100};if(0===n.s)t.b=n.l,t.g=n.l,t.r=n.l;else{const e=n.l<.5?n.l*(1+n.s):n.l+n.s-n.l*n.s,i=2*n.l-e;t.r=an(i,e,n.h+1/3),t.g=an(i,e,n.h),t.b=an(i,e,n.h-1/3)}return t.r=Math.floor(255*t.r),t.g=Math.floor(255*t.g),t.b=Math.floor(255*t.b),t}function pn(e){const t=fn(e);return{a:e.a,b:t.b,g:t.g,r:t.r}}function vn(e){const t=e.l/100,n=t+e.s/100*Math.min(t,1-t),i=n?2*(1-t/n):0;return{h:e.h,s:100*i,v:100*n}}function mn(e){const t=vn(e);return{a:e.a,h:t.h,s:t.s,v:t.v}}function yn(e){const t=e.v/100,n=t*(1-e.s/100/2),i=0===n||1===n?0:(t-n)/Math.min(n,1-n);return{h:e.h,l:100*n,s:100*i}}function gn(e){const t=yn(e);return{a:e.a,h:t.h,l:t.l,s:t.s}}function bn(e){const t={b:0,g:0,r:0},n=e.h/60,i=e.s/100,o=e.v/100,r=o*i,a=r*(1-Math.abs(n%2-1));let s;if(n>=0&&n<=1?s={r,g:a,b:0}:n>1&&n<=2?s={r:a,g:r,b:0}:n>2&&n<=3?s={r:0,g:r,b:a}:n>3&&n<=4?s={r:0,g:a,b:r}:n>4&&n<=5?s={r:a,g:0,b:r}:n>5&&n<=6&&(s={r,g:0,b:a}),s){const e=o-r;t.r=Math.floor(255*(s.r+e)),t.g=Math.floor(255*(s.g+e)),t.b=Math.floor(255*(s.b+e))}return t}function wn(e){const t=bn(e);return{a:e.a,b:t.b,g:t.g,r:t.r}}function kn(e){const t={r:e.r/255,g:e.g/255,b:e.b/255},n=Math.max(t.r,t.g,t.b),i=n-Math.min(t.r,t.g,t.b);let o=0;return n===t.r?o=(t.g-t.b)/i*60:n===t.g?o=60*(2+(t.b-t.r)/i):n===t.b&&(o=60*(4+(t.r-t.g)/i)),{h:o,s:100*(n?i/n:0),v:100*n}}function xn(e){const t=kn(e);return{a:e.a,h:t.h,s:t.s,v:t.v}}function En(e){const t=null!=e?e:0;return{b:Math.floor(u(p(t,256))),g:Math.floor(u(p(t,256))),r:Math.floor(u(p(t,256)))}}function Sn(e,t){return`rgba(${e.r}, ${e.g}, ${e.b}, ${null!=t?t:1})`}function Cn(e,t){return`hsla(${e.h}, ${e.s}%, ${e.l}%, ${null!=t?t:1})`}function Pn(e,t){return Cn(yn(e),t)}function Mn(e,t,n,i){let o=e,r=t;return void 0===o.r&&(o=fn(e)),void 0===r.r&&(r=fn(t)),{b:c(o.b,r.b,n,i),g:c(o.g,r.g,n,i),r:c(o.r,r.r,n,i)}}function zn(e,t,n){var i,o;if(n===qt)return En();if("mid"!==n)return n;{const n=null!==(i=e.getFillColor())&&void 0!==i?i:e.getStrokeColor(),r=null!==(o=null==t?void 0:t.getFillColor())&&void 0!==o?o:null==t?void 0:t.getStrokeColor();if(n&&r&&t)return Mn(n,r,e.getRadius(),t.getRadius());{const e=null!=n?n:r;if(e)return fn(e)}}}function Tn(e,t,n){const i="string"==typeof e?e:e.value;return i===qt?n?ln({value:i}):t?qt:Wt:ln({value:i})}function On(e){return void 0!==e?{h:e.h.value,s:e.s.value,l:e.l.value}:void 0}function Rn(e,t,n){const i={h:{enable:!1,value:e.h},s:{enable:!1,value:e.s},l:{enable:!1,value:e.l}};return t&&(An(i.h,t.h,n),An(i.s,t.s,n),An(i.l,t.l,n)),i}function An(e,t,n){if(e.enable=t.enable,e.enable){if(e.velocity=d(t.speed)/100*n,t.sync)return;e.status=0,e.velocity*=Math.random(),e.value&&(e.value*=Math.random())}else e.velocity=0}function _n(e,t,n){e.beginPath(),e.moveTo(t.x,t.y),e.lineTo(n.x,n.y),e.closePath()}function In(e,t,n,i){e.beginPath(),e.moveTo(t.x,t.y),e.lineTo(n.x,n.y),e.lineTo(i.x,i.y),e.closePath()}function Ln(e,t,n){e.save(),e.fillStyle=null!=n?n:"rgba(0,0,0,0)",e.fillRect(0,0,t.width,t.height),e.restore()}function Dn(e,t){e.clearRect(0,0,t.width,t.height)}function Fn(e,t,n,i,o){e.save(),_n(e,i,o),e.lineWidth=t,e.strokeStyle=n,e.stroke(),e.restore()}function Nn(e,t,n,i){const o=Math.floor(n.getRadius()/t.getRadius()),r=t.getFillColor(),a=n.getFillColor();if(!r||!a)return;const s=t.getPosition(),l=n.getPosition(),c=Mn(r,a,t.getRadius(),n.getRadius()),u=e.createLinearGradient(s.x,s.y,l.x,l.y);return u.addColorStop(0,Cn(r,i)),u.addColorStop(o>1?1:o,Sn(c,i)),u.addColorStop(1,Cn(a,i)),u}function jn(e,t,n,i,o,r){e.save(),_n(e,n,i),e.strokeStyle=Sn(o,r),e.lineWidth=t,e.stroke(),e.restore()}function Hn(e,t,n,i,o,r,a,s,l,c){var u,d,h,f;const p=n.getPosition(),v=n.options.tilt,m=n.options.roll;if(t.save(),v.enable||m.enable){const e=m.enable&&n.roll,i=v.enable&&n.tilt,o=e&&("horizontal"===m.mode||"both"===m.mode),r=e&&("vertical"===m.mode||"both"===m.mode);t.setTransform(o?Math.cos(n.roll.angle):1,i?Math.cos(n.tilt.value)*n.tilt.cosDirection:0,i?Math.sin(n.tilt.value)*n.tilt.sinDirection:0,r?Math.sin(n.roll.angle):1,p.x,p.y)}else t.translate(p.x,p.y);t.beginPath();const y=(null!==(d=null===(u=n.rotate)||void 0===u?void 0:u.value)&&void 0!==d?d:0)+(n.options.rotate.path?n.velocity.angle:0);0!==y&&t.rotate(y),r&&(t.globalCompositeOperation=a);const g=n.shadowColor;c.enable&&g&&(t.shadowBlur=c.blur,t.shadowColor=Sn(g),t.shadowOffsetX=c.offset.x,t.shadowOffsetY=c.offset.y),o.fill&&(t.fillStyle=o.fill);const b=n.stroke;t.lineWidth=null!==(h=n.strokeWidth)&&void 0!==h?h:0,o.stroke&&(t.strokeStyle=o.stroke),Vn(e,t,n,s,l,i),(null!==(f=null==b?void 0:b.width)&&void 0!==f?f:0)>0&&t.stroke(),n.close&&t.closePath(),n.fill&&t.fill(),t.restore(),t.save(),v.enable&&n.tilt?t.setTransform(1,Math.cos(n.tilt.value)*n.tilt.cosDirection,Math.sin(n.tilt.value)*n.tilt.sinDirection,1,p.x,p.y):t.translate(p.x,p.y),0!==y&&t.rotate(y),r&&(t.globalCompositeOperation=a),Bn(e,t,n,s,l,i),t.restore()}function Vn(e,t,n,i,o,r){if(!n.shape)return;const a=e.drawers.get(n.shape);a&&a.draw(t,n,i,o,r,e.retina.pixelRatio)}function Bn(e,t,n,i,o,r){if(!n.shape)return;const a=e.drawers.get(n.shape);(null==a?void 0:a.afterEffect)&&a.afterEffect(t,n,i,o,r,e.retina.pixelRatio)}function Un(e,t,n){t.draw&&(e.save(),t.draw(e,n),e.restore())}function qn(e,t,n,i){t.drawParticle&&(e.save(),t.drawParticle(e,n,i),e.restore())}function Wn(e,t,n,i,o,r,a,s,l){if(r<=0)return;const c=t.getPosition();n&&(e.strokeStyle=Cn(n,o)),e.lineWidth=r;const u=a*Math.PI/180;e.beginPath(),e.ellipse(c.x,c.y,i/2,2*i,u,s,l),e.stroke()}function $n(e,t,n){return{h:e.h,s:e.s,l:e.l+("darken"===t?-1:1)*n}}class Gn{constructor(e){this.container=e,this.size={height:0,width:0},this.context=null,this.generatedCanvas=!1}init(){this.resize(),this.initStyle(),this.initCover(),this.initTrail(),this.initBackground(),this.paint()}loadCanvas(e){var t;this.generatedCanvas&&(null===(t=this.element)||void 0===t||t.remove()),this.generatedCanvas=e.dataset&&Ut in e.dataset?"true"===e.dataset[Ut]:this.generatedCanvas,this.element=e,this.originalStyle=At({},this.element.style),this.size.height=e.offsetHeight,this.size.width=e.offsetWidth,this.context=this.element.getContext("2d"),this.container.retina.init(),this.initBackground()}destroy(){var e;this.generatedCanvas&&(null===(e=this.element)||void 0===e||e.remove()),this.draw((e=>{Dn(e,this.size)}))}paint(){const e=this.container.actualOptions;this.draw((t=>{e.backgroundMask.enable&&e.backgroundMask.cover?(Dn(t,this.size),this.paintBase(this.coverColorStyle)):this.paintBase()}))}clear(){const e=this.container.actualOptions,t=e.particles.move.trail;e.backgroundMask.enable?this.paint():t.enable&&t.length>0&&this.trailFillColor?this.paintBase(Sn(this.trailFillColor,1/t.length)):this.draw((e=>{Dn(e,this.size)}))}async windowResize(){if(!this.element)return;this.resize();const e=this.container,t=e.updateActualOptions();e.particles.setDensity();for(const[,t]of e.plugins)void 0!==t.resize&&t.resize();t&&await e.refresh()}resize(){if(!this.element)return;const e=this.container,t=e.retina.pixelRatio,n=e.canvas.size,i=this.element.offsetWidth*t,o=this.element.offsetHeight*t;if(o===n.height&&i===n.width&&o===this.element.height&&i===this.element.width)return;const r=Object.assign({},n);this.element.width=n.width=this.element.offsetWidth*t,this.element.height=n.height=this.element.offsetHeight*t,this.container.started&&(this.resizeFactor={width:n.width/r.width,height:n.height/r.height})}drawConnectLine(e,t){this.draw((n=>{var i;const o=this.lineStyle(e,t);if(!o)return;const r=e.getPosition(),a=t.getPosition();Fn(n,null!==(i=e.retina.linksWidth)&&void 0!==i?i:this.container.retina.linksWidth,o,r,a)}))}drawGrabLine(e,t,n,i){const o=this.container;this.draw((r=>{var a;const s=e.getPosition();jn(r,null!==(a=e.retina.linksWidth)&&void 0!==a?a:o.retina.linksWidth,s,i,t,n)}))}drawParticle(e,t){var n,i,o,r,a,s;if(e.spawning||e.destroyed)return;const l=e.getRadius();if(l<=0)return;const c=e.getFillColor(),u=null!==(n=e.getStrokeColor())&&void 0!==n?n:c;if(!c&&!u)return;let[d,h]=this.getPluginParticleColors(e);d&&h||(d||(d=c||void 0),h||(h=u||void 0));const f=this.container.actualOptions,p=e.options.zIndex,v=(1-e.zIndexFactor)**p.opacityRate,m=null!==(r=null!==(i=e.bubble.opacity)&&void 0!==i?i:null===(o=e.opacity)||void 0===o?void 0:o.value)&&void 0!==r?r:1,y=null!==(s=null===(a=e.stroke)||void 0===a?void 0:a.opacity)&&void 0!==s?s:m,g=m*v,b=y*v,w={fill:d?Cn(d,g):void 0};w.stroke=h?Cn(h,b):w.fill,this.draw((n=>{const i=(1-e.zIndexFactor)**p.sizeRate,o=this.container;for(const t of o.particles.updaters)if(t.beforeDraw&&t.beforeDraw(e),t.getColorStyles){const{fill:i,stroke:o}=t.getColorStyles(e,n,l,g);i&&(w.fill=i),o&&(w.stroke=o)}Hn(o,n,e,t,w,f.backgroundMask.enable,f.backgroundMask.composite,l*i,g,e.options.shadow);for(const t of o.particles.updaters)t.afterDraw&&t.afterDraw(e)}))}drawPlugin(e,t){this.draw((n=>{Un(n,e,t)}))}drawParticlePlugin(e,t,n){this.draw((i=>{qn(i,e,t,n)}))}initBackground(){const e=this.container.actualOptions.background,t=this.element,n=null==t?void 0:t.style;if(n){if(e.color){const t=ln(e.color);n.backgroundColor=t?Sn(t,e.opacity):""}else n.backgroundColor="";n.backgroundImage=e.image||"",n.backgroundPosition=e.position||"",n.backgroundRepeat=e.repeat||"",n.backgroundSize=e.size||""}}draw(e){if(this.context)return e(this.context)}initCover(){const e=this.container.actualOptions.backgroundMask.cover,t=ln(e.color);if(t){const n={r:t.r,g:t.g,b:t.b,a:e.opacity};this.coverColorStyle=Sn(n,n.a)}}initTrail(){const e=this.container.actualOptions,t=ln(e.particles.move.trail.fillColor);if(t){const n=e.particles.move.trail;this.trailFillColor={r:t.r,g:t.g,b:t.b,a:1/n.length}}}getPluginParticleColors(e){let t,n;for(const[,i]of this.container.plugins)if(!t&&i.particleFillColor&&(t=cn(i.particleFillColor(e))),!n&&i.particleStrokeColor&&(n=cn(i.particleStrokeColor(e))),t&&n)break;return[t,n]}initStyle(){const e=this.element,t=this.container.actualOptions;if(!e)return;const n=this.originalStyle;t.fullScreen.enable?(this.originalStyle=At({},e.style),e.style.setProperty("position","fixed","important"),e.style.setProperty("z-index",t.fullScreen.zIndex.toString(10),"important"),e.style.setProperty("top","0","important"),e.style.setProperty("left","0","important"),e.style.setProperty("width","100%","important"),e.style.setProperty("height","100%","important")):n&&(e.style.position=n.position,e.style.zIndex=n.zIndex,e.style.top=n.top,e.style.left=n.left,e.style.width=n.width,e.style.height=n.height);for(const n in t.style){if(!n||!t.style)continue;const i=t.style[n];i&&e.style.setProperty(n,i,"important")}}paintBase(e){this.draw((t=>{Ln(t,this.size,e)}))}lineStyle(e,t){return this.draw((n=>{const i=this.container.actualOptions.interactivity.modes.connect;return Nn(n,e,t,i.links.opacity)}))}}function Qn(e,t,n,i,o){if(i){let i={passive:!0};"boolean"==typeof o?i.capture=o:void 0!==o&&(i=o),e.addEventListener(t,n,i)}else{const i=o;e.removeEventListener(t,n,i)}}class Yn{constructor(e){this.container=e,this.canPush=!0,this.mouseMoveHandler=e=>this.mouseTouchMove(e),this.touchStartHandler=e=>this.mouseTouchMove(e),this.touchMoveHandler=e=>this.mouseTouchMove(e),this.touchEndHandler=()=>this.mouseTouchFinish(),this.mouseLeaveHandler=()=>this.mouseTouchFinish(),this.touchCancelHandler=()=>this.mouseTouchFinish(),this.touchEndClickHandler=e=>this.mouseTouchClick(e),this.mouseUpHandler=e=>this.mouseTouchClick(e),this.mouseDownHandler=()=>this.mouseDown(),this.visibilityChangeHandler=()=>this.handleVisibilityChange(),this.themeChangeHandler=e=>this.handleThemeChange(e),this.oldThemeChangeHandler=e=>this.handleThemeChange(e),this.resizeHandler=()=>this.handleWindowResize()}addListeners(){this.manageListeners(!0)}removeListeners(){this.manageListeners(!1)}manageListeners(e){var t;const n=this.container,i=n.actualOptions,o=i.interactivity.detectsOn;let r=Kt;if("window"===o)n.interactivity.element=window,r=Jt;else if("parent"===o&&n.canvas.element){const e=n.canvas.element;n.interactivity.element=null!==(t=e.parentElement)&&void 0!==t?t:e.parentNode}else n.interactivity.element=n.canvas.element;const a=!xt()&&"undefined"!=typeof matchMedia&&matchMedia("(prefers-color-scheme: dark)");a&&(void 0!==a.addEventListener?Qn(a,"change",this.themeChangeHandler,e):void 0!==a.addListener&&(e?a.addListener(this.oldThemeChangeHandler):a.removeListener(this.oldThemeChangeHandler)));const s=n.interactivity.element;if(!s)return;const l=s;(i.interactivity.events.onHover.enable||i.interactivity.events.onClick.enable)&&(Qn(s,Yt,this.mouseMoveHandler,e),Qn(s,Zt,this.touchStartHandler,e),Qn(s,Xt,this.touchMoveHandler,e),i.interactivity.events.onClick.enable?(Qn(s,$t,this.touchEndClickHandler,e),Qn(s,Qt,this.mouseUpHandler,e),Qn(s,Gt,this.mouseDownHandler,e)):Qn(s,$t,this.touchEndHandler,e),Qn(s,r,this.mouseLeaveHandler,e),Qn(s,en,this.touchCancelHandler,e)),n.canvas.element&&(n.canvas.element.style.pointerEvents=l===n.canvas.element?"initial":"none"),i.interactivity.events.resize&&("undefined"!=typeof ResizeObserver?this.resizeObserver&&!e?(n.canvas.element&&this.resizeObserver.unobserve(n.canvas.element),this.resizeObserver.disconnect(),delete this.resizeObserver):!this.resizeObserver&&e&&n.canvas.element&&(this.resizeObserver=new ResizeObserver((e=>{e.find((e=>e.target===n.canvas.element))&&this.handleWindowResize()})),this.resizeObserver.observe(n.canvas.element)):Qn(window,tn,this.resizeHandler,e)),document&&Qn(document,nn,this.visibilityChangeHandler,e,!1)}handleWindowResize(){this.resizeTimeout&&(clearTimeout(this.resizeTimeout),delete this.resizeTimeout),this.resizeTimeout=setTimeout((async()=>{var e;return null===(e=this.container.canvas)||void 0===e?void 0:e.windowResize()}),500)}handleVisibilityChange(){const e=this.container,t=e.actualOptions;this.mouseTouchFinish(),t.pauseOnBlur&&((null===document||void 0===document?void 0:document.hidden)?(e.pageHidden=!0,e.pause()):(e.pageHidden=!1,e.getAnimationStatus()?e.play(!0):e.draw(!0)))}mouseDown(){const e=this.container.interactivity;if(e){const t=e.mouse;t.clicking=!0,t.downPosition=t.position}}mouseTouchMove(e){var t,n,i,o,r,a,s;const l=this.container,c=l.actualOptions;if(!(null===(t=l.interactivity)||void 0===t?void 0:t.element))return;let u;l.interactivity.mouse.inside=!0;const d=l.canvas.element;if(e.type.startsWith("mouse")){this.canPush=!0;const t=e;if(l.interactivity.element===window){if(d){const e=d.getBoundingClientRect();u={x:t.clientX-e.left,y:t.clientY-e.top}}}else if("parent"===c.interactivity.detectsOn){const e=t.target,o=t.currentTarget,r=l.canvas.element;if(e&&o&&r){const n=e.getBoundingClientRect(),i=o.getBoundingClientRect(),a=r.getBoundingClientRect();u={x:t.offsetX+2*n.left-(i.left+a.left),y:t.offsetY+2*n.top-(i.top+a.top)}}else u={x:null!==(n=t.offsetX)&&void 0!==n?n:t.clientX,y:null!==(i=t.offsetY)&&void 0!==i?i:t.clientY}}else t.target===l.canvas.element&&(u={x:null!==(o=t.offsetX)&&void 0!==o?o:t.clientX,y:null!==(r=t.offsetY)&&void 0!==r?r:t.clientY})}else{this.canPush="touchmove"!==e.type;const t=e,n=t.touches[t.touches.length-1],i=null==d?void 0:d.getBoundingClientRect();u={x:n.clientX-(null!==(a=null==i?void 0:i.left)&&void 0!==a?a:0),y:n.clientY-(null!==(s=null==i?void 0:i.top)&&void 0!==s?s:0)}}const h=l.retina.pixelRatio;u&&(u.x*=h,u.y*=h),l.interactivity.mouse.position=u,l.interactivity.status=Yt}mouseTouchFinish(){const e=this.container.interactivity;if(!e)return;const t=e.mouse;delete t.position,delete t.clickPosition,delete t.downPosition,e.status=Kt,t.inside=!1,t.clicking=!1}mouseTouchClick(e){const t=this.container,n=t.actualOptions,i=t.interactivity.mouse;i.inside=!0;let o=!1;const r=i.position;if(r&&n.interactivity.events.onClick.enable){for(const[,e]of t.plugins)if(e.clickPositionValid&&(o=e.clickPositionValid(r),o))break;o||this.doMouseTouchClick(e),i.clicking=!1}}doMouseTouchClick(e){const t=this.container,n=t.actualOptions;if(this.canPush){const e=t.interactivity.mouse.position;if(!e)return;t.interactivity.mouse.clickPosition={x:e.x,y:e.y},t.interactivity.mouse.clickTime=(new Date).getTime();const i=n.interactivity.events.onClick;if(i.mode instanceof Array)for(const e of i.mode)this.handleClickMode(e);else this.handleClickMode(i.mode)}"touchend"===e.type&&setTimeout((()=>this.mouseTouchFinish()),500)}handleThemeChange(e){const t=e.matches?this.container.options.defaultDarkTheme:this.container.options.defaultLightTheme,n=this.container.options.themes.find((e=>e.name===t));n&&n.default.auto&&this.container.loadTheme(t)}handleClickMode(e){this.container.handleClickMode(e)}}class Zn{constructor(e){this.container=e}async nextFrame(e){var t;try{const n=this.container;if(void 0!==n.lastFrameTime&&e<n.lastFrameTime+1e3/n.fpsLimit)return void n.draw(!1);null!==(t=n.lastFrameTime)&&void 0!==t||(n.lastFrameTime=e);const i=e-n.lastFrameTime,o={value:i,factor:60*i/1e3};if(n.lifeTime+=o.value,n.lastFrameTime=e,i>1e3)return void n.draw(!1);if(await n.particles.draw(o),n.duration>0&&n.lifeTime>n.duration)return void n.destroy();n.getAnimationStatus()&&n.draw(!1)}catch(e){console.error("tsParticles error in animation loop",e)}}}var Xn;class Kn{constructor(e,t){this.container=t,Xn.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,Xn,e,"f"),this.externalInteractors=[],this.particleInteractors=[],this.init()}init(){const e=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)}(this,Xn,"f").plugins.getInteractors(this.container,!0);this.externalInteractors=[],this.particleInteractors=[];for(const t of e)switch(t.type){case 0:this.externalInteractors.push(t);break;case 1:this.particleInteractors.push(t)}}async externalInteract(e){for(const t of this.externalInteractors)t.isEnabled()&&await t.interact(e)}async particlesInteract(e,t){for(const t of this.externalInteractors)t.reset(e);for(const n of this.particleInteractors)n.isEnabled(e)&&await n.interact(e,t)}handleClickMode(e){for(const t of this.externalInteractors)t.handleClickMode&&t.handleClickMode(e)}}Xn=new WeakMap;class Jn extends s{constructor(e,t,n){if(super(e,t),"number"!=typeof e&&e)this.z=e.z;else{if(void 0===n)throw new Error("tsParticles - Vector not initialized correctly");this.z=n}}static clone(e){return Jn.create(e.x,e.y,e.z)}static create(e,t,n){return new Jn(e,t,n)}static get origin(){return Jn.create(0,0,0)}add(e){return e instanceof Jn?Jn.create(this.x+e.x,this.y+e.y,this.z+e.z):super.add(e)}addTo(e){super.addTo(e),e instanceof Jn&&(this.z+=e.z)}sub(e){return e instanceof Jn?Jn.create(this.x-e.x,this.y-e.y,this.z-e.z):super.sub(e)}subFrom(e){super.subFrom(e),e instanceof Jn&&(this.z-=e.z)}mult(e){return Jn.create(this.x*e,this.y*e,this.z*e)}multTo(e){super.multTo(e),this.z*=e}div(e){return Jn.create(this.x/e,this.y/e,this.z/e)}divTo(e){super.divTo(e),this.z/=e}copy(){return Jn.clone(this)}setTo(e){super.setTo(e);const t=e;void 0!==t.z&&(this.z=t.z)}}var ei;const ti=e=>{(Ct(e.outMode,e.checkModes)||Ct(e.outMode,e.checkModes))&&(e.coord>e.maxCoord-2*e.radius?e.setCb(-e.radius):e.coord<2*e.radius&&e.setCb(e.radius))};class ni{constructor(e,t,n,i,o,r){var a,c,p,m,y,b,w;this.id=t,this.container=n,this.group=r,ei.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,ei,e,"f"),this.fill=!0,this.close=!0,this.lastPathTime=0,this.destroyed=!1,this.unbreakable=!1,this.splitCount=0,this.misplaced=!1,this.retina={maxDistance:{}},this.outType="normal",this.ignoresResizeRatio=!0;const k=n.retina.pixelRatio,x=Bt(n.actualOptions.particles),E=x.shape.type,S=x.reduceDuplicates;if(this.shape=E instanceof Array?zt(E,this.id,S):E,null==o?void 0:o.shape){if(o.shape.type){const e=o.shape.type;this.shape=e instanceof Array?zt(e,this.id,S):e}const e=new ct;e.load(o.shape),this.shape&&(this.shapeData=this.loadShapeData(e,S))}else this.shapeData=this.loadShapeData(x.shape,S);void 0!==o&&x.load(o),void 0!==(null===(a=this.shapeData)||void 0===a?void 0:a.particles)&&x.load(null===(c=this.shapeData)||void 0===c?void 0:c.particles),this.fill=null!==(m=null===(p=this.shapeData)||void 0===p?void 0:p.fill)&&void 0!==m?m:this.fill,this.close=null!==(b=null===(y=this.shapeData)||void 0===y?void 0:y.close)&&void 0!==b?b:this.close,this.options=x,this.pathDelay=1e3*v(this.options.move.path.delay);const C=d(this.options.zIndex.value);n.retina.initParticle(this);const P=this.options.size,M=P.value;this.size={enable:P.animation.enable,value:d(P.value)*n.retina.pixelRatio,max:f(M)*k,min:h(M)*k,loops:0,maxLoops:d(P.animation.count)};const z=P.animation;if(z.enable){switch(this.size.status=0,z.startValue){case"min":this.size.value=this.size.min,this.size.status=0;break;case"random":this.size.value=u(this.size)*k,this.size.status=Math.random()>=.5?0:1;break;default:this.size.value=this.size.max,this.size.status=1}this.size.velocity=(null!==(w=this.retina.sizeAnimationSpeed)&&void 0!==w?w:n.retina.sizeAnimationSpeed)/100*n.retina.reduceFactor,z.sync||(this.size.velocity*=Math.random())}this.bubble={inRange:!1},this.position=this.calcPosition(n,i,l(C,0,n.zLayers)),this.initialPosition=this.position.copy();const T=n.canvas.size,O=this.options.move.center;switch(this.moveCenter={x:T.width*O.x/100,y:T.height*O.y/100,radius:this.options.move.center.radius},this.direction=g(this.options.move.direction,this.position,this.moveCenter),this.options.move.direction){case"inside":this.outType="inside";break;case"outside":this.outType="outside"}this.initialVelocity=this.calculateVelocity(),this.velocity=this.initialVelocity.copy(),this.moveDecay=1-d(this.options.move.decay);const R=this.options.move.gravity;this.gravity={enable:R.enable,acceleration:d(R.acceleration),inverse:R.inverse},this.offset=s.origin;const A=n.particles;A.needsSort=A.needsSort||A.lastZIndex<this.position.z,A.lastZIndex=this.position.z,this.zIndexFactor=this.position.z/n.zLayers,this.sides=24;let _=n.drawers.get(this.shape);_||(_=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)}(this,ei,"f").plugins.getShapeDrawer(this.shape),_&&n.drawers.set(this.shape,_)),(null==_?void 0:_.loadShape)&&(null==_||_.loadShape(this));const I=null==_?void 0:_.getSidesCount;I&&(this.sides=I(this)),this.life=this.loadLife(),this.spawning=this.life.delay>0,this.shadowColor=ln(this.options.shadow.color);for(const e of n.particles.updaters)e.init&&e.init(this);for(const e of n.particles.movers)e.init&&e.init(this);_&&_.particleInit&&_.particleInit(n,this);for(const[,e]of n.plugins)e.particleCreated&&e.particleCreated(this)}isVisible(){return!this.destroyed&&!this.spawning&&this.isInsideCanvas()}isInsideCanvas(){const e=this.getRadius(),t=this.container.canvas.size;return this.position.x>=-e&&this.position.y>=-e&&this.position.y<=t.height+e&&this.position.x<=t.width+e}draw(e){const t=this.container;for(const[,n]of t.plugins)t.canvas.drawParticlePlugin(n,this,e);t.canvas.drawParticle(this,e)}getPosition(){return{x:this.position.x+this.offset.x,y:this.position.y+this.offset.y,z:this.position.z}}getRadius(){var e;return null!==(e=this.bubble.radius)&&void 0!==e?e:this.size.value}getMass(){return this.getRadius()**2*Math.PI/2}getFillColor(){var e,t;const n=null!==(e=this.bubble.color)&&void 0!==e?e:On(this.color);if(n&&this.roll&&(this.backColor||this.roll.alter)){const e="both"===this.options.roll.mode?2:1,i="horizontal"===this.options.roll.mode?Math.PI/2:0;if(Math.floor(((null!==(t=this.roll.angle)&&void 0!==t?t:0)+i)/(Math.PI/e))%2){if(this.backColor)return this.backColor;if(this.roll.alter)return $n(n,this.roll.alter.type,this.roll.alter.value)}}return n}getStrokeColor(){var e,t;return null!==(t=null!==(e=this.bubble.color)&&void 0!==e?e:On(this.strokeColor))&&void 0!==t?t:this.getFillColor()}destroy(e){if(this.destroyed=!0,this.bubble.inRange=!1,!this.unbreakable){this.destroyed=!0,this.bubble.inRange=!1;for(const[,t]of this.container.plugins)t.particleDestroyed&&t.particleDestroyed(this,e);e||"split"===this.options.destroy.mode&&this.split()}}reset(){this.opacity&&(this.opacity.loops=0),this.size.loops=0}split(){const e=this.options.destroy.split;if(e.count>=0&&this.splitCount++>e.count)return;const t=v(e.rate);for(let e=0;e<t;e++)this.container.particles.addSplitParticle(this)}calcPosition(e,t,n,i=0){var o,r,a,s;for(const[,i]of e.plugins){const e=void 0!==i.particlePosition?i.particlePosition(t,this):void 0;if(void 0!==e)return Jn.create(e.x,e.y,n)}const l=C({size:e.canvas.size,position:t}),c=Jn.create(l.x,l.y,n),u=this.getRadius(),d=this.options.move.outModes,h=t=>{ti({outMode:t,checkModes:["bounce","bounce-horizontal"],coord:c.x,maxCoord:e.canvas.size.width,setCb:e=>c.x+=e,radius:u})},f=t=>{ti({outMode:t,checkModes:["bounce","bounce-vertical"],coord:c.y,maxCoord:e.canvas.size.height,setCb:e=>c.y+=e,radius:u})};return h(null!==(o=d.left)&&void 0!==o?o:d.default),h(null!==(r=d.right)&&void 0!==r?r:d.default),f(null!==(a=d.top)&&void 0!==a?a:d.default),f(null!==(s=d.bottom)&&void 0!==s?s:d.default),this.checkOverlap(c,i)?this.calcPosition(e,void 0,n,i+1):c}checkOverlap(e,t=0){const n=this.options.collisions,i=this.getRadius();if(!n.enable)return!1;const o=n.overlap;if(o.enable)return!1;const r=o.retries;if(r>=0&&t>r)throw new Error("Particle is overlapping and can't be placed");let a=!1;for(const t of this.container.particles.array)if(y(e,t.position)<i+t.getRadius()){a=!0;break}return a}calculateVelocity(){const e=b(this.direction).copy(),t=this.options.move;if("inside"===t.direction||"outside"===t.direction)return e;const n=Math.PI/180*d(t.angle.value),i=Math.PI/180*d(t.angle.offset),o={left:i-n/2,right:i+n/2};return t.straight||(e.angle+=u(p(o.left,o.right))),t.random&&"number"==typeof t.speed&&(e.length*=Math.random()),e}loadShapeData(e,t){const n=e.options[this.shape];if(n)return At({},n instanceof Array?zt(n,this.id,t):n)}loadLife(){const e=this.container,t=this.options,n=t.life,i={delay:e.retina.reduceFactor?d(n.delay.value)*(n.delay.sync?1:Math.random())/e.retina.reduceFactor*1e3:0,delayTime:0,duration:e.retina.reduceFactor?d(n.duration.value)*(n.duration.sync?1:Math.random())/e.retina.reduceFactor*1e3:0,time:0,count:t.life.count};return i.duration<=0&&(i.duration=-1),i.count<=0&&(i.count=-1),i}}ei=new WeakMap;class ii{constructor(e,t){this.position=e,this.particle=t}}class oi{constructor(e,t){this.position={x:e,y:t}}}class ri extends oi{constructor(e,t,n){super(e,t),this.radius=n}contains(e){return y(e,this.position)<=this.radius}intersects(e){const t=e,n=e,i=this.position,o=e.position,r=Math.abs(o.x-i.x),a=Math.abs(o.y-i.y),s=this.radius;if(void 0!==n.radius)return s+n.radius>Math.sqrt(r*r+a+a);if(void 0!==t.size){const e=t.size.width,n=t.size.height,i=Math.pow(r-e,2)+Math.pow(a-n,2);return!(r>s+e||a>s+n)&&(r<=e||a<=n||i<=s*s)}return!1}}class ai extends oi{constructor(e,t,n,i){super(e,t),this.size={height:i,width:n}}contains(e){const t=this.size.width,n=this.size.height,i=this.position;return e.x>=i.x&&e.x<=i.x+t&&e.y>=i.y&&e.y<=i.y+n}intersects(e){const t=e,n=e,i=this.size.width,o=this.size.height,r=this.position,a=e.position;if(void 0!==n.radius)return n.intersects(this);if(!t.size)return!1;const s=t.size,l=s.width,c=s.height;return a.x<r.x+i&&a.x+l>r.x&&a.y<r.y+o&&a.y+c>r.y}}class si extends ri{constructor(e,t,n,i){super(e,t,n),this.canvasSize=i,this.canvasSize=Object.assign({},i)}contains(e){if(super.contains(e))return!0;const t={x:e.x-this.canvasSize.width,y:e.y};if(super.contains(t))return!0;const n={x:e.x-this.canvasSize.width,y:e.y-this.canvasSize.height};if(super.contains(n))return!0;const i={x:e.x,y:e.y-this.canvasSize.height};return super.contains(i)}intersects(e){if(super.intersects(e))return!0;const t=e,n=e,i={x:e.position.x-this.canvasSize.width,y:e.position.y-this.canvasSize.height};if(void 0!==n.radius){const e=new ri(i.x,i.y,2*n.radius);return super.intersects(e)}if(void 0!==t.size){const e=new ai(i.x,i.y,2*t.size.width,2*t.size.height);return super.intersects(e)}return!1}}class li{constructor(e,t){this.rectangle=e,this.capacity=t,this.points=[],this.divided=!1}insert(e){var t,n,i,o,r;return!!this.rectangle.contains(e.position)&&(this.points.length<this.capacity?(this.points.push(e),!0):(this.divided||this.subdivide(),null!==(r=(null===(t=this.northEast)||void 0===t?void 0:t.insert(e))||(null===(n=this.northWest)||void 0===n?void 0:n.insert(e))||(null===(i=this.southEast)||void 0===i?void 0:i.insert(e))||(null===(o=this.southWest)||void 0===o?void 0:o.insert(e)))&&void 0!==r&&r))}queryCircle(e,t){return this.query(new ri(e.x,e.y,t))}queryCircleWarp(e,t,n){const i=n,o=n;return this.query(new si(e.x,e.y,t,void 0!==i.canvas?i.canvas.size:o))}queryRectangle(e,t){return this.query(new ai(e.x,e.y,t.width,t.height))}query(e,t){var n,i,o,r;const a=null!=t?t:[];if(!e.intersects(this.rectangle))return[];for(const t of this.points)!e.contains(t.position)&&y(e.position,t.position)>t.particle.getRadius()||a.push(t.particle);return this.divided&&(null===(n=this.northEast)||void 0===n||n.query(e,a),null===(i=this.northWest)||void 0===i||i.query(e,a),null===(o=this.southEast)||void 0===o||o.query(e,a),null===(r=this.southWest)||void 0===r||r.query(e,a)),a}subdivide(){const e=this.rectangle.position.x,t=this.rectangle.position.y,n=this.rectangle.size.width,i=this.rectangle.size.height,o=this.capacity;this.northEast=new li(new ai(e,t,n/2,i/2),o),this.northWest=new li(new ai(e+n/2,t,n/2,i/2),o),this.southEast=new li(new ai(e,t+i/2,n/2,i/2),o),this.southWest=new li(new ai(e+n/2,t+i/2,n/2,i/2),o),this.divided=!0}}var ci,ui=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class di{constructor(e,t){this.container=t,ci.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,ci,e,"f"),this.nextId=0,this.array=[],this.zArray=[],this.limit=0,this.needsSort=!1,this.lastZIndex=0,this.freqs={links:new Map,triangles:new Map},this.interactionManager=new Kn(ui(this,ci,"f"),t);const n=this.container.canvas.size;this.linksColors=new Map,this.quadTree=new li(new ai(-n.width/4,-n.height/4,3*n.width/2,3*n.height/2),4),this.movers=ui(this,ci,"f").plugins.getMovers(t,!0),this.updaters=ui(this,ci,"f").plugins.getUpdaters(t,!0)}get count(){return this.array.length}init(){var e;const t=this.container,n=t.actualOptions;this.lastZIndex=0,this.needsSort=!1,this.freqs.links=new Map,this.freqs.triangles=new Map;let i=!1;this.updaters=ui(this,ci,"f").plugins.getUpdaters(t,!0),this.interactionManager.init();for(const[,e]of t.plugins)if(void 0!==e.particlesInitialization&&(i=e.particlesInitialization()),i)break;if(this.addManualParticles(),!i){for(const t in n.particles.groups){const i=n.particles.groups[t];for(let o=this.count,r=0;r<(null===(e=i.number)||void 0===e?void 0:e.value)&&o<n.particles.number.value;o++,r++)this.addParticle(void 0,i,t)}for(let e=this.count;e<n.particles.number.value;e++)this.addParticle()}t.pathGenerator.init(t)}async redraw(){this.clear(),this.init(),await this.draw({value:0,factor:0})}removeAt(e,t=1,n,i){if(!(e>=0&&e<=this.count))return;let o=0;for(let r=e;o<t&&r<this.count;r++){const e=this.array[r];if(!e||e.group!==n)continue;e.destroy(i),this.array.splice(r--,1);const t=this.zArray.indexOf(e);this.zArray.splice(t,1),o++,ui(this,ci,"f").dispatchEvent("particleRemoved",{container:this.container,data:{particle:e}})}}remove(e,t,n){this.removeAt(this.array.indexOf(e),void 0,t,n)}async update(e){const t=this.container,n=[];t.pathGenerator.update();for(const[,n]of t.plugins)void 0!==n.update&&n.update(e);for(const i of this.array){const o=t.canvas.resizeFactor;o&&!i.ignoresResizeRatio&&(i.position.x*=o.width,i.position.y*=o.height),i.ignoresResizeRatio=!1,i.bubble.inRange=!1;for(const[,t]of this.container.plugins){if(i.destroyed)break;t.particleUpdate&&t.particleUpdate(i,e)}for(const t of this.movers)t.isEnabled(i)&&t.move(i,e);i.destroyed?n.push(i):this.quadTree.insert(new ii(i.getPosition(),i))}for(const e of n)this.remove(e);await this.interactionManager.externalInteract(e);for(const n of t.particles.array){for(const t of this.updaters)t.update(n,e);n.destroyed||n.spawning||await this.interactionManager.particlesInteract(n,e)}delete t.canvas.resizeFactor}async draw(e){const t=this.container,n=this.container.canvas.size;this.quadTree=new li(new ai(-n.width/4,-n.height/4,3*n.width/2,3*n.height/2),4),t.canvas.clear(),await this.update(e),this.needsSort&&(this.zArray.sort(((e,t)=>t.position.z-e.position.z||e.id-t.id)),this.lastZIndex=this.zArray[this.zArray.length-1].position.z,this.needsSort=!1);for(const[,n]of t.plugins)t.canvas.drawPlugin(n,e);for(const t of this.zArray)t.draw(e)}clear(){this.array=[],this.zArray=[]}push(e,t,n,i){this.pushing=!0;for(let o=0;o<e;o++)this.addParticle(null==t?void 0:t.position,n,i);this.pushing=!1}addParticle(e,t,n){const i=this.container,o=i.actualOptions.particles.number.limit*i.density;if(o>0){const e=this.count+1-o;e>0&&this.removeQuantity(e)}return this.pushParticle(e,t,n)}addSplitParticle(e){const t=e.options.destroy.split,n=Bt(e.options),i=v(t.factor);n.color.load({value:{hsl:e.getFillColor()}}),"number"==typeof n.size.value?n.size.value/=i:(n.size.value.min/=i,n.size.value.max/=i),n.load(t.particles);const o=t.sizeOffset?p(-e.size.value,e.size.value):0,r={x:e.position.x+u(o),y:e.position.y+u(o)};return this.pushParticle(r,n,e.group,(t=>!(t.size.value<.5||(t.velocity.length=u(p(e.velocity.length,t.velocity.length)),t.splitCount=e.splitCount+1,t.unbreakable=!0,setTimeout((()=>{t.unbreakable=!1}),500),0))))}removeQuantity(e,t){this.removeAt(0,e,t)}getLinkFrequency(e,t){const n=p(e.id,t.id),i=`${h(n)}_${f(n)}`;let o=this.freqs.links.get(i);return void 0===o&&(o=Math.random(),this.freqs.links.set(i,o)),o}getTriangleFrequency(e,t,n){let[i,o,r]=[e.id,t.id,n.id];i>o&&([o,i]=[i,o]),o>r&&([r,o]=[o,r]),i>r&&([r,i]=[i,r]);const a=`${i}_${o}_${r}`;let s=this.freqs.triangles.get(a);return void 0===s&&(s=Math.random(),this.freqs.triangles.set(a,s)),s}addManualParticles(){const e=this.container,t=e.actualOptions;for(const n of t.manualParticles)this.addParticle(x({size:e.canvas.size,position:n.position}),n.options)}setDensity(){const e=this.container.actualOptions;for(const t in e.particles.groups)this.applyDensity(e.particles.groups[t],0,t);this.applyDensity(e.particles,e.manualParticles.length)}handleClickMode(e){this.interactionManager.handleClickMode(e)}applyDensity(e,t,n){var i;if(!(null===(i=e.number.density)||void 0===i?void 0:i.enable))return;const o=e.number,r=this.initDensityFactor(o.density),a=o.value,s=o.limit>0?o.limit:a,l=Math.min(a,s)*r+t,c=Math.min(this.count,this.array.filter((e=>e.group===n)).length);this.limit=o.limit*r,c<l?this.push(Math.abs(l-c),void 0,e,n):c>l&&this.removeQuantity(c-l,n)}initDensityFactor(e){const t=this.container;if(!t.canvas.element||!e.enable)return 1;const n=t.canvas.element,i=t.retina.pixelRatio;return n.width*n.height/(e.factor*i**2*e.area)}pushParticle(e,t,n,i){try{const o=new ni(ui(this,ci,"f"),this.nextId,this.container,e,t,n);let r=!0;if(i&&(r=i(o)),!r)return;return this.array.push(o),this.zArray.push(o),this.nextId++,ui(this,ci,"f").dispatchEvent("particleAdded",{container:this.container,data:{particle:o}}),o}catch(e){return void console.warn(`error adding particle: ${e}`)}}}ci=new WeakMap;class hi{constructor(e){this.container=e}init(){const e=this.container,t=e.actualOptions;this.pixelRatio=!t.detectRetina||xt()?1:window.devicePixelRatio;const n=this.container.actualOptions.motion;if(n&&(n.disable||n.reduce.value))if(xt()||"undefined"==typeof matchMedia||!matchMedia)this.reduceFactor=1;else{const t=matchMedia("(prefers-reduced-motion: reduce)");if(t){this.handleMotionChange(t);const n=()=>{this.handleMotionChange(t),e.refresh().catch((()=>{}))};void 0!==t.addEventListener?t.addEventListener("change",n):void 0!==t.addListener&&t.addListener(n)}}else this.reduceFactor=1;const i=this.pixelRatio;if(e.canvas.element){const t=e.canvas.element;e.canvas.size.width=t.offsetWidth*i,e.canvas.size.height=t.offsetHeight*i}const o=t.particles;this.attractDistance=d(o.move.attract.distance)*i,this.linksDistance=o.links.distance*i,this.linksWidth=o.links.width*i,this.sizeAnimationSpeed=d(o.size.animation.speed)*i,this.maxSpeed=d(o.move.gravity.maxSpeed)*i;const r=t.interactivity.modes;this.connectModeDistance=r.connect.distance*i,this.connectModeRadius=r.connect.radius*i,this.grabModeDistance=r.grab.distance*i,this.repulseModeDistance=r.repulse.distance*i,this.bounceModeDistance=r.bounce.distance*i,this.attractModeDistance=r.attract.distance*i,this.slowModeRadius=r.slow.radius*i,this.bubbleModeDistance=r.bubble.distance*i,r.bubble.size&&(this.bubbleModeSize=r.bubble.size*i)}initParticle(e){const t=e.options,n=this.pixelRatio,i=t.move.distance,o=e.retina;o.attractDistance=d(t.move.attract.distance)*n,o.linksDistance=t.links.distance*n,o.linksWidth=t.links.width*n,o.moveDrift=d(t.move.drift)*n,o.moveSpeed=d(t.move.speed)*n,o.sizeAnimationSpeed=d(t.size.animation.speed)*n;const r=o.maxDistance;r.horizontal=void 0!==i.horizontal?i.horizontal*n:void 0,r.vertical=void 0!==i.vertical?i.vertical*n:void 0,o.maxSpeed=d(t.move.gravity.maxSpeed)*n}handleMotionChange(e){const t=this.container.actualOptions;if(e.matches){const e=t.motion;this.reduceFactor=e.disable?0:e.reduce.value?1/e.reduce.factor:1}else this.reduceFactor=1}}var fi,pi=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class vi{constructor(e,t,n){this.id=t,fi.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,fi,e,"f"),this.fpsLimit=120,this.duration=0,this.lifeTime=0,this.firstStart=!0,this.started=!1,this.destroyed=!1,this.paused=!0,this.lastFrameTime=0,this.zLayers=100,this.pageHidden=!1,this._sourceOptions=n,this._initialSourceOptions=n,this.retina=new hi(this),this.canvas=new Gn(this),this.particles=new di(pi(this,fi,"f"),this),this.drawer=new Zn(this),this.pathGenerator={generate:e=>{const t=e.velocity.copy();return t.angle+=t.length*Math.PI/180,t},init:()=>{},update:()=>{}},this.interactivity={mouse:{clicking:!1,inside:!1}},this.plugins=new Map,this.drawers=new Map,this.density=1,this._options=Vt(pi(this,fi,"f")),this.actualOptions=Vt(pi(this,fi,"f")),this.eventListeners=new Yn(this),"undefined"!=typeof IntersectionObserver&&IntersectionObserver&&(this.intersectionObserver=new IntersectionObserver((e=>this.intersectionManager(e)))),pi(this,fi,"f").dispatchEvent("containerBuilt",{container:this})}get options(){return this._options}get sourceOptions(){return this._sourceOptions}play(e){const t=this.paused||e;if(!this.firstStart||this.actualOptions.autoPlay){if(this.paused&&(this.paused=!1),t)for(const[,e]of this.plugins)e.play&&e.play();pi(this,fi,"f").dispatchEvent("containerPlay",{container:this}),this.draw(t||!1)}else this.firstStart=!1}pause(){if(void 0!==this.drawAnimationFrame&&(St()(this.drawAnimationFrame),delete this.drawAnimationFrame),!this.paused){for(const[,e]of this.plugins)e.pause&&e.pause();this.pageHidden||(this.paused=!0),pi(this,fi,"f").dispatchEvent("containerPaused",{container:this})}}draw(e){let t=e;this.drawAnimationFrame=Et()((async e=>{t&&(this.lastFrameTime=void 0,t=!1),await this.drawer.nextFrame(e)}))}getAnimationStatus(){return!this.paused&&!this.pageHidden}setNoise(e,t,n){this.setPath(e,t,n)}setPath(e,t,n){var i,o,r;if(e)if("function"==typeof e)this.pathGenerator.generate=e,t&&(this.pathGenerator.init=t),n&&(this.pathGenerator.update=n);else{const t=this.pathGenerator;this.pathGenerator=e,(i=this.pathGenerator).generate||(i.generate=t.generate),(o=this.pathGenerator).init||(o.init=t.init),(r=this.pathGenerator).update||(r.update=t.update)}}destroy(){this.stop(),this.canvas.destroy();for(const[,e]of this.drawers)e.destroy&&e.destroy(this);for(const e of this.drawers.keys())this.drawers.delete(e);this.destroyed=!0,pi(this,fi,"f").dispatchEvent("containerDestroyed",{container:this})}exportImg(e){this.exportImage(e)}exportImage(e,t,n){var i;return null===(i=this.canvas.element)||void 0===i?void 0:i.toBlob(e,null!=t?t:"image/png",n)}exportConfiguration(){return JSON.stringify(this.actualOptions,void 0,2)}refresh(){return this.stop(),this.start()}reset(){return this._options=Vt(pi(this,fi,"f")),this.refresh()}stop(){if(this.started){this.firstStart=!0,this.started=!1,this.eventListeners.removeListeners(),this.pause(),this.particles.clear(),this.canvas.clear(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.unobserve(this.interactivity.element);for(const[,e]of this.plugins)e.stop&&e.stop();for(const e of this.plugins.keys())this.plugins.delete(e);this.particles.linksColors=new Map,delete this.particles.grabLineColor,delete this.particles.linksColor,this._sourceOptions=this._options,pi(this,fi,"f").dispatchEvent("containerStopped",{container:this})}}async loadTheme(e){this.currentTheme=e,await this.refresh()}async start(){if(!this.started){await this.init(),this.started=!0,this.eventListeners.addListeners(),this.interactivity.element instanceof HTMLElement&&this.intersectionObserver&&this.intersectionObserver.observe(this.interactivity.element);for(const[,e]of this.plugins)void 0!==e.startAsync?await e.startAsync():void 0!==e.start&&e.start();pi(this,fi,"f").dispatchEvent("containerStarted",{container:this}),this.play()}}addClickHandler(e){const t=this.interactivity.element;if(!t)return;const n=(t,n,i)=>{if(this.destroyed)return;const o=this.retina.pixelRatio,r={x:n.x*o,y:n.y*o},a=this.particles.quadTree.queryCircle(r,i*o);e(t,a)};let i=!1,o=!1;t.addEventListener("click",(e=>{if(this.destroyed)return;const t=e,i={x:t.offsetX||t.clientX,y:t.offsetY||t.clientY};n(e,i,1)})),t.addEventListener("touchstart",(()=>{this.destroyed||(i=!0,o=!1)})),t.addEventListener("touchmove",(()=>{this.destroyed||(o=!0)})),t.addEventListener("touchend",(e=>{var t,r,a;if(!this.destroyed){if(i&&!o){const i=e;let o=i.touches[i.touches.length-1];if(!o&&(o=i.changedTouches[i.changedTouches.length-1],!o))return;const s=null===(t=this.canvas.element)||void 0===t?void 0:t.getBoundingClientRect(),l={x:o.clientX-(null!==(r=null==s?void 0:s.left)&&void 0!==r?r:0),y:o.clientY-(null!==(a=null==s?void 0:s.top)&&void 0!==a?a:0)};n(e,l,Math.max(o.radiusX,o.radiusY))}i=!1,o=!1}})),t.addEventListener("touchcancel",(()=>{this.destroyed||(i=!1,o=!1)}))}handleClickMode(e){this.particles.handleClickMode(e);for(const[,t]of this.plugins)t.handleClickMode&&t.handleClickMode(e)}updateActualOptions(){this.actualOptions.responsive=[];const e=this.actualOptions.setResponsive(this.canvas.size.width,this.retina.pixelRatio,this._options);return this.actualOptions.setTheme(this.currentTheme),this.responsiveMaxWidth!=e&&(this.responsiveMaxWidth=e,!0)}async init(){const e=pi(this,fi,"f").plugins.getSupportedShapes();for(const t of e){const e=pi(this,fi,"f").plugins.getShapeDrawer(t);e&&this.drawers.set(t,e)}this._options=Vt(pi(this,fi,"f"),this._initialSourceOptions,this.sourceOptions),this.actualOptions=Vt(pi(this,fi,"f"),this._options),this.retina.init(),this.canvas.init(),this.updateActualOptions(),this.canvas.initBackground(),this.canvas.resize(),this.zLayers=this.actualOptions.zLayers,this.duration=d(this.actualOptions.duration),this.lifeTime=0,this.fpsLimit=this.actualOptions.fpsLimit>0?this.actualOptions.fpsLimit:120;const t=pi(this,fi,"f").plugins.getAvailablePlugins(this);for(const[e,n]of t)this.plugins.set(e,n);for(const[,e]of this.drawers)e.init&&await e.init(this);for(const[,e]of this.plugins)e.init?e.init(this.actualOptions):void 0!==e.initAsync&&await e.initAsync(this.actualOptions);const n=this.actualOptions.particles.move.path;n.generator&&this.setPath(pi(this,fi,"f").plugins.getPathGenerator(n.generator)),pi(this,fi,"f").dispatchEvent("containerInit",{container:this}),this.particles.init(),this.particles.setDensity();for(const[,e]of this.plugins)void 0!==e.particlesSetup&&e.particlesSetup();pi(this,fi,"f").dispatchEvent("particlesSetup",{container:this})}intersectionManager(e){if(this.actualOptions.pauseOnOutsideViewport)for(const t of e)t.target===this.interactivity.element&&(t.isIntersecting?this.play():this.pause())}}fi=new WeakMap;var mi,yi=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class gi{constructor(e){mi.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,mi,e,"f")}dom(){return yi(this,mi,"f").domArray}domItem(e){const t=this.dom(),n=t[e];if(n&&!n.destroyed)return n;t.splice(e,1)}async loadOptions(e){var t,n,i;const o=null!==(t=e.tagId)&&void 0!==t?t:`tsparticles${Math.floor(1e4*Math.random())}`,{options:r,index:a}=e;let s=null!==(n=e.element)&&void 0!==n?n:document.getElementById(o);s||(s=document.createElement("div"),s.id=o,null===(i=document.querySelector("body"))||void 0===i||i.append(s));const l=r instanceof Array?zt(r,a):r,c=this.dom(),u=c.findIndex((e=>e.id===o));if(u>=0){const e=this.domItem(u);e&&!e.destroyed&&(e.destroy(),c.splice(u,1))}let d;if("canvas"===s.tagName.toLowerCase())d=s,d.dataset[Ut]="false";else{const e=s.getElementsByTagName("canvas");e.length?(d=e[0],d.dataset[Ut]="false"):(d=document.createElement("canvas"),d.dataset[Ut]="true",d.style.width="100%",d.style.height="100%",s.appendChild(d))}const h=new vi(yi(this,mi,"f"),o,l);return u>=0?c.splice(u,0,h):c.push(h),h.canvas.loadCanvas(d),await h.start(),h}async loadRemoteOptions(e){const{url:t,index:n}=e,i=t instanceof Array?zt(t,n):t;if(!i)return;const o=await fetch(i);if(!o.ok)return r=o.status,console.error(`Error tsParticles - fetch status: ${r}`),void console.error("Error tsParticles - File config not found");var r;const a=await o.json();return this.loadOptions({tagId:e.tagId,element:e.element,index:n,options:a})}load(e,t,n){const i={index:n};return"string"==typeof e?i.tagId=e:i.options=e,"number"==typeof t?i.index=null!=t?t:i.index:i.options=null!=t?t:i.options,this.loadOptions(i)}async set(e,t,n,i){const o={index:i};return"string"==typeof e?o.tagId=e:o.element=e,t instanceof HTMLElement?o.element=t:o.options=t,"number"==typeof n?o.index=n:o.options=null!=n?n:o.options,this.loadOptions(o)}async loadJSON(e,t,n){let i,o;return"number"==typeof t||void 0===t?i=e:(o=e,i=t),this.loadRemoteOptions({tagId:o,url:i,index:n})}async setJSON(e,t,n,i){let o,r,a,s;return e instanceof HTMLElement?(s=e,o=t,a=n):(r=e,s=t,o=n,a=i),this.loadRemoteOptions({tagId:r,url:o,index:a,element:s})}setOnClickHandler(e){const t=this.dom();if(!t.length)throw new Error("Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()");for(const n of t)n.addClickHandler(e)}addEventListener(e,t){yi(this,mi,"f").eventDispatcher.addEventListener(e,t)}removeEventListener(e,t){yi(this,mi,"f").eventDispatcher.removeEventListener(e,t)}dispatchEvent(e,t){yi(this,mi,"f").eventDispatcher.dispatchEvent(e,t)}}mi=new WeakMap;var bi;class wi{constructor(e){bi.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,bi,e,"f"),this.plugins=[],this.interactorsInitializers=new Map,this.moversInitializers=new Map,this.updatersInitializers=new Map,this.interactors=new Map,this.movers=new Map,this.updaters=new Map,this.presets=new Map,this.drawers=new Map,this.pathGenerators=new Map}getPlugin(e){return this.plugins.find((t=>t.id===e))}addPlugin(e){this.getPlugin(e.id)||this.plugins.push(e)}getAvailablePlugins(e){const t=new Map;for(const n of this.plugins)n.needsPlugin(e.actualOptions)&&t.set(n.id,n.getPlugin(e));return t}loadOptions(e,t){for(const n of this.plugins)n.loadOptions(e,t)}getPreset(e){return this.presets.get(e)}addPreset(e,t,n=!1){!n&&this.getPreset(e)||this.presets.set(e,t)}getShapeDrawer(e){return this.drawers.get(e)}addShapeDrawer(e,t){this.getShapeDrawer(e)||this.drawers.set(e,t)}getSupportedShapes(){return this.drawers.keys()}getPathGenerator(e){return this.pathGenerators.get(e)}addPathGenerator(e,t){this.getPathGenerator(e)||this.pathGenerators.set(e,t)}getInteractors(e,t=!1){let n=this.interactors.get(e);return n&&!t||(n=[...this.interactorsInitializers.values()].map((t=>t(e))),this.interactors.set(e,n)),n}addInteractor(e,t){this.interactorsInitializers.set(e,t)}getUpdaters(e,t=!1){let n=this.updaters.get(e);return n&&!t||(n=[...this.updatersInitializers.values()].map((t=>t(e))),this.updaters.set(e,n)),n}addParticleUpdater(e,t){this.updatersInitializers.set(e,t)}getMovers(e,t=!1){let n=this.movers.get(e);return n&&!t||(n=[...this.moversInitializers.values()].map((t=>t(e))),this.movers.set(e,n)),n}addParticleMover(e,t){this.moversInitializers.set(e,t)}}bi=new WeakMap;var ki,xi,Ei=function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},Si=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class Ci{constructor(){ki.set(this,void 0),xi.set(this,void 0),this.domArray=[],this.eventDispatcher=new a,Ei(this,ki,!1,"f"),Ei(this,xi,new gi(this),"f"),this.plugins=new wi(this)}init(){Si(this,ki,"f")||Ei(this,ki,!0,"f")}async loadFromArray(e,t,n){return Si(this,xi,"f").load(e,t,n)}async load(e,t){return Si(this,xi,"f").load(e,t)}async set(e,t,n){return Si(this,xi,"f").set(e,t,n)}async loadJSON(e,t,n){return Si(this,xi,"f").loadJSON(e,t,n)}async setJSON(e,t,n,i){return Si(this,xi,"f").setJSON(e,t,n,i)}setOnClickHandler(e){Si(this,xi,"f").setOnClickHandler(e)}dom(){return Si(this,xi,"f").dom()}domItem(e){return Si(this,xi,"f").domItem(e)}async refresh(){for(const e of this.dom())await e.refresh()}async addShape(e,t,n,i,o){let r;r="function"==typeof t?{afterEffect:i,destroy:o,draw:t,init:n}:t,this.plugins.addShapeDrawer(e,r),await this.refresh()}async addPreset(e,t,n=!1){this.plugins.addPreset(e,t,n),await this.refresh()}async addPlugin(e){this.plugins.addPlugin(e),await this.refresh()}async addPathGenerator(e,t){this.plugins.addPathGenerator(e,t),await this.refresh()}async addInteractor(e,t){this.plugins.addInteractor(e,t),await this.refresh()}async addMover(e,t){this.plugins.addParticleMover(e,t),await this.refresh()}async addParticleUpdater(e,t){this.plugins.addParticleUpdater(e,t),await this.refresh()}addEventListener(e,t){Si(this,xi,"f").addEventListener(e,t)}removeEventListener(e,t){Si(this,xi,"f").removeEventListener(e,t)}dispatchEvent(e,t){Si(this,xi,"f").dispatchEvent(e,t)}}ki=new WeakMap,xi=new WeakMap;class Pi{constructor(e){this.container=e,this.type=0}}class Mi{constructor(e){this.container=e,this.type=1}}const zi=new Ci;zi.init()}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var n=r[e]={exports:{}};return o[e](n,n.exports,a),n.exports}a.m=o,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,i){if(1&i&&(n=this(n)),8&i)return n;if("object"==typeof n&&n){if(4&i&&n.__esModule)return n;if(16&i&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var r={};e=e||[null,t({}),t([]),t(t)];for(var s=2&i&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>r[e]=()=>n[e]));return r.default=()=>n,a.d(o,r),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".bundle.js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},i="react_setup_templates:",a.l=(e,t,o,r)=>{if(n[e])n[e].push(t);else{var s,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==i+o){s=d;break}}s||(l=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.setAttribute("data-webpack",i+o),s.src=e),n[e]=[t];var h=(t,i)=>{s.onerror=s.onload=null,clearTimeout(f);var o=n[e];if(delete n[e],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((e=>e(i))),t)return t(i)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=h.bind(null,s.onerror),s.onload=h.bind(null,s.onload),l&&document.head.appendChild(s)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={179:0};a.f.j=(t,n)=>{var i=a.o(e,t)?e[t]:void 0;if(0!==i)if(i)n.push(i[2]);else{var o=new Promise(((n,o)=>i=e[t]=[n,o]));n.push(i[2]=o);var r=a.p+a.u(t),s=new Error;a.l(r,(n=>{if(a.o(e,t)&&(0!==(i=e[t])&&(e[t]=void 0),i)){var o=n&&("load"===n.type?"missing":n.type),r=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+o+": "+r+")",s.name="ChunkLoadError",s.type=o,s.request=r,i[1](s)}}),"chunk-"+t,t)}};var t=(t,n)=>{var i,o,[r,s,l]=n,c=0;if(r.some((t=>0!==e[t]))){for(i in s)a.o(s,i)&&(a.m[i]=s[i]);l&&l(a)}for(t&&t(n);c<r.length;c++)o=r[c],a.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkreact_setup_templates=self.webpackChunkreact_setup_templates||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=a(294),t=a(935),n=a(864),i=a(774),o=a.n(i);const r=function(e){function t(e,i,l,c,h){for(var f,p,v,m,w,x=0,E=0,S=0,C=0,P=0,A=0,I=v=f=0,D=0,F=0,N=0,j=0,H=l.length,V=H-1,B="",U="",q="",W="";D<H;){if(p=l.charCodeAt(D),D===V&&0!==E+C+S+x&&(0!==E&&(p=47===E?10:47),C=S=x=0,H++,V++),0===E+C+S+x){if(D===V&&(0<F&&(B=B.replace(d,"")),0<B.trim().length)){switch(p){case 32:case 9:case 59:case 13:case 10:break;default:B+=l.charAt(D)}p=59}switch(p){case 123:for(f=(B=B.trim()).charCodeAt(0),v=1,j=++D;D<H;){switch(p=l.charCodeAt(D)){case 123:v++;break;case 125:v--;break;case 47:switch(p=l.charCodeAt(D+1)){case 42:case 47:e:{for(I=D+1;I<V;++I)switch(l.charCodeAt(I)){case 47:if(42===p&&42===l.charCodeAt(I-1)&&D+2!==I){D=I+1;break e}break;case 10:if(47===p){D=I+1;break e}}D=I}}break;case 91:p++;case 40:p++;case 34:case 39:for(;D++<V&&l.charCodeAt(D)!==p;);}if(0===v)break;D++}if(v=l.substring(j,D),0===f&&(f=(B=B.replace(u,"").trim()).charCodeAt(0)),64===f){switch(0<F&&(B=B.replace(d,"")),p=B.charCodeAt(1)){case 100:case 109:case 115:case 45:F=i;break;default:F=R}if(j=(v=t(i,F,v,p,h+1)).length,0<_&&(w=s(3,v,F=n(R,B,N),i,z,M,j,p,h,c),B=F.join(""),void 0!==w&&0===(j=(v=w.trim()).length)&&(p=0,v="")),0<j)switch(p){case 115:B=B.replace(k,a);case 100:case 109:case 45:v=B+"{"+v+"}";break;case 107:v=(B=B.replace(y,"$1 $2"))+"{"+v+"}",v=1===O||2===O&&r("@"+v,3)?"@-webkit-"+v+"@"+v:"@"+v;break;default:v=B+v,112===c&&(U+=v,v="")}else v=""}else v=t(i,n(i,B,N),v,c,h+1);q+=v,v=N=F=I=f=0,B="",p=l.charCodeAt(++D);break;case 125:case 59:if(1<(j=(B=(0<F?B.replace(d,""):B).trim()).length))switch(0===I&&(f=B.charCodeAt(0),45===f||96<f&&123>f)&&(j=(B=B.replace(" ",":")).length),0<_&&void 0!==(w=s(1,B,i,e,z,M,U.length,c,h,c))&&0===(j=(B=w.trim()).length)&&(B="\0\0"),f=B.charCodeAt(0),p=B.charCodeAt(1),f){case 0:break;case 64:if(105===p||99===p){W+=B+l.charAt(D);break}default:58!==B.charCodeAt(j-1)&&(U+=o(B,f,p,B.charCodeAt(2)))}N=F=I=f=0,B="",p=l.charCodeAt(++D)}}switch(p){case 13:case 10:47===E?E=0:0===1+f&&107!==c&&0<B.length&&(F=1,B+="\0"),0<_*L&&s(0,B,i,e,z,M,U.length,c,h,c),M=1,z++;break;case 59:case 125:if(0===E+C+S+x){M++;break}default:switch(M++,m=l.charAt(D),p){case 9:case 32:if(0===C+x+E)switch(P){case 44:case 58:case 9:case 32:m="";break;default:32!==p&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===C+E+x&&(F=N=1,m="\f"+m);break;case 108:if(0===C+E+x+T&&0<I)switch(D-I){case 2:112===P&&58===l.charCodeAt(D-3)&&(T=P);case 8:111===A&&(T=A)}break;case 58:0===C+E+x&&(I=D);break;case 44:0===E+S+C+x&&(F=1,m+="\r");break;case 34:case 39:0===E&&(C=C===p?0:0===C?p:C);break;case 91:0===C+E+S&&x++;break;case 93:0===C+E+S&&x--;break;case 41:0===C+E+x&&S--;break;case 40:0===C+E+x&&(0===f&&(2*P+3*A==533||(f=1)),S++);break;case 64:0===E+S+C+x+I+v&&(v=1);break;case 42:case 47:if(!(0<C+x+S))switch(E){case 0:switch(2*p+3*l.charCodeAt(D+1)){case 235:E=47;break;case 220:j=D,E=42}break;case 42:47===p&&42===P&&j+2!==D&&(33===l.charCodeAt(j+2)&&(U+=l.substring(j,D+1)),m="",E=0)}}0===E&&(B+=m)}A=P,P=p,D++}if(0<(j=U.length)){if(F=i,0<_&&void 0!==(w=s(2,U,F,e,z,M,j,c,h,c))&&0===(U=w).length)return W+U+q;if(U=F.join(",")+"{"+U+"}",0!=O*T){switch(2!==O||r(U,2)||(T=0),T){case 111:U=U.replace(b,":-moz-$1")+U;break;case 112:U=U.replace(g,"::-webkit-input-$1")+U.replace(g,"::-moz-$1")+U.replace(g,":-ms-input-$1")+U}T=0}}return W+U+q}function n(e,t,n){var o=t.trim().split(v);t=o;var r=o.length,a=e.length;switch(a){case 0:case 1:var s=0;for(e=0===a?"":e[0]+" ";s<r;++s)t[s]=i(e,t[s],n).trim();break;default:var l=s=0;for(t=[];s<r;++s)for(var c=0;c<a;++c)t[l++]=i(e[c]+" ",o[s],n).trim()}return t}function i(e,t,n){var i=t.charCodeAt(0);switch(33>i&&(i=(t=t.trim()).charCodeAt(0)),i){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,i){var a=e+";",s=2*t+3*n+4*i;if(944===s){e=a.indexOf(":",9)+1;var l=a.substring(e,a.length-1).trim();return l=a.substring(0,e).trim()+l+";",1===O||2===O&&r(l,1)?"-webkit-"+l+l:l}if(0===O||2===O&&!r(a,1))return a;switch(s){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(P,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(l=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+l+a;case 1005:return f.test(a)?a.replace(h,":-webkit-")+a.replace(h,":-moz-")+a:a;case 1e3:switch(t=(l=a.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=a.replace(w,"tb");break;case 232:l=a.replace(w,"tb-rl");break;case 220:l=a.replace(w,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+l+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,s=(l=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:a=a.replace(l,"-webkit-"+l)+";"+a;break;case 207:case 102:a=a.replace(l,"-webkit-"+(102<s?"inline-":"")+"box")+";"+a.replace(l,"-webkit-"+l)+";"+a.replace(l,"-ms-"+l+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return l=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+l+"-ms-flex-"+l+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(E,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(E,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===C.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,i).replace(":fill-available",":stretch"):a.replace(l,"-webkit-"+l)+a.replace(l,"-moz-"+l.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+i&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+a}return a}function r(e,t){var n=e.indexOf(1===t?":":"{"),i=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),I(2!==t?i:i.replace(S,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(x," or ($1)").substring(4):"("+t+")"}function s(e,t,n,i,o,r,a,s,l,u){for(var d,h=0,f=t;h<_;++h)switch(d=A[h].call(c,e,f,n,i,o,r,a,s,l,u)){case void 0:case!1:case!0:case null:break;default:f=d}if(f!==t)return f}function l(e){return void 0!==(e=e.prefix)&&(I=null,e?"function"!=typeof e?O=1:(O=2,I=e):O=0),l}function c(e,n){var i=e;if(33>i.charCodeAt(0)&&(i=i.trim()),i=[i],0<_){var o=s(-1,n,i,i,z,M,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var r=t(R,i,n,0,0);return 0<_&&void 0!==(o=s(-2,r,i,i,z,M,r.length,0,0,0))&&(r=o),T=0,M=z=1,r}var u=/^\0+/g,d=/[\0\r\f]/g,h=/: */g,f=/zoo|gra/,p=/([,: ])(transform)/g,v=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,x=/([\s\S]*?);/g,E=/-self|flex-/g,S=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,P=/([^-])(image-set\()/,M=1,z=1,T=0,O=1,R=[],A=[],_=0,I=null,L=0;return c.use=function e(t){switch(t){case void 0:case null:_=A.length=0;break;default:if("function"==typeof t)A[_++]=t;else if("object"==typeof t)for(var n=0,i=t.length;n<i;++n)e(t[n]);else L=0|!!t}return e},c.set=l,void 0!==e&&l(e),c},s={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var l=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const c=function(e){var t=Object.create(null);return function(e){return void 0===t[e]&&(t[e]=(n=e,l.test(n)||111===n.charCodeAt(0)&&110===n.charCodeAt(1)&&n.charCodeAt(2)<91)),t[e];var n}}();var u=a(679),d=a.n(u);function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}var f=function(e,t){for(var n=[e[0]],i=0,o=t.length;i<o;i+=1)n.push(t[i],e[i+1]);return n},p=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,n.typeOf)(e)},v=Object.freeze([]),m=Object.freeze({});function y(e){return"function"==typeof e}function g(e){return e.displayName||e.name||"Component"}function b(e){return e&&"string"==typeof e.styledComponentId}var w="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",k="undefined"!=typeof window&&"HTMLElement"in window,x=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY);function E(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var S=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,i=n.length,o=i;e>=o;)(o<<=1)<0&&E(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var r=i;r<o;r++)this.groupSizes[r]=0}for(var a=this.indexOfGroup(e+1),s=0,l=t.length;s<l;s++)this.tag.insertRule(a,t[s])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),i=n+t;this.groupSizes[e]=0;for(var o=n;o<i;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],i=this.indexOfGroup(e),o=i+n,r=i;r<o;r++)t+=this.tag.getRule(r)+"/*!sc*/\n";return t},e}(),C=new Map,P=new Map,M=1,z=function(e){if(C.has(e))return C.get(e);for(;P.has(M);)M++;var t=M++;return C.set(e,t),P.set(t,e),t},T=function(e){return P.get(e)},O=function(e,t){t>=M&&(M=t+1),C.set(e,t),P.set(t,e)},R="style["+w+'][data-styled-version="5.3.5"]',A=new RegExp("^"+w+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),_=function(e,t,n){for(var i,o=n.split(","),r=0,a=o.length;r<a;r++)(i=o[r])&&e.registerName(t,i)},I=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),i=[],o=0,r=n.length;o<r;o++){var a=n[o].trim();if(a){var s=a.match(A);if(s){var l=0|parseInt(s[1],10),c=s[2];0!==l&&(O(c,l),_(e,c,s[3]),e.getTag().insertRules(l,i)),i.length=0}else i.push(a)}}},L=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},D=function(e){var t=document.head,n=e||t,i=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var i=t[n];if(i&&1===i.nodeType&&i.hasAttribute(w))return i}}(n),r=void 0!==o?o.nextSibling:null;i.setAttribute(w,"active"),i.setAttribute("data-styled-version","5.3.5");var a=L();return a&&i.setAttribute("nonce",a),n.insertBefore(i,r),i},F=function(){function e(e){var t=this.element=D(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,i=t.length;n<i;n++){var o=t[n];if(o.ownerNode===e)return o}E(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),N=function(){function e(e){var t=this.element=D(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),i=this.nodes[e];return this.element.insertBefore(n,i||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),j=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),H=k,V={isServer:!k,useCSSOMInjection:!x},B=function(){function e(e,t,n){void 0===e&&(e=m),void 0===t&&(t={}),this.options=h({},V,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&k&&H&&(H=!1,function(e){for(var t=document.querySelectorAll(R),n=0,i=t.length;n<i;n++){var o=t[n];o&&"active"!==o.getAttribute(w)&&(I(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return z(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(h({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,i=t.useCSSOMInjection,o=t.target,e=n?new j(o):i?new F(o):new N(o),new S(e)));var e,t,n,i,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(z(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(z(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(z(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,i="",o=0;o<n;o++){var r=T(o);if(void 0!==r){var a=e.names.get(r),s=t.getGroup(o);if(a&&s&&a.size){var l=w+".g"+o+'[id="'+r+'"]',c="";void 0!==a&&a.forEach((function(e){e.length>0&&(c+=e+",")})),i+=""+s+l+'{content:"'+c+'"}/*!sc*/\n'}}}return i}(this)},e}(),U=/(a)(d)/gi,q=function(e){return String.fromCharCode(e+(e>25?39:97))};function W(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=q(t%52)+n;return(q(t%52)+n).replace(U,"$1-$2")}var $=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},G=function(e){return $(5381,e)};function Q(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(y(n)&&!b(n))return!1}return!0}var Y=G("5.3.5"),Z=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&Q(e),this.componentId=t,this.baseHash=$(Y,t),this.baseStyle=n,B.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var i=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(i,this.staticRulesId))o.push(this.staticRulesId);else{var r=fe(this.rules,e,t,n).join(""),a=W($(this.baseHash,r)>>>0);if(!t.hasNameForId(i,a)){var s=n(r,"."+a,void 0,i);t.insertRules(i,a,s)}o.push(a),this.staticRulesId=a}else{for(var l=this.rules.length,c=$(this.baseHash,n.hash),u="",d=0;d<l;d++){var h=this.rules[d];if("string"==typeof h)u+=h;else if(h){var f=fe(h,e,t,n),p=Array.isArray(f)?f.join(""):f;c=$(c,p+d),u+=p}}if(u){var v=W(c>>>0);if(!t.hasNameForId(i,v)){var m=n(u,"."+v,void 0,i);t.insertRules(i,v,m)}o.push(v)}}return o.join(" ")},e}(),X=/^\s*\/\/.*$/gm,K=[":","[",".","#"];function J(e){var t,n,i,o,a=void 0===e?m:e,s=a.options,l=void 0===s?m:s,c=a.plugins,u=void 0===c?v:c,d=new r(l),h=[],f=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,i,o,r,a,s,l,c,u,d){switch(n){case 1:if(0===u&&64===i.charCodeAt(0))return e(i+";"),"";break;case 2:if(0===c)return i+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+i),"";default:return i+(0===d?"/*|*/":"")}case-2:i.split("/*|*/}").forEach(t)}}}((function(e){h.push(e)})),p=function(e,i,r){return 0===i&&-1!==K.indexOf(r[n.length])||r.match(o)?e:"."+t};function y(e,r,a,s){void 0===s&&(s="&");var l=e.replace(X,""),c=r&&a?a+" "+r+" { "+l+" }":l;return t=s,n=r,i=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),d(a||!r?"":r,c)}return d.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(i,p))},f,function(e){if(-2===e){var t=h;return h=[],t}}])),y.hash=u.length?u.reduce((function(e,t){return t.name||E(15),$(e,t.name)}),5381).toString():"",y}var ee=e.createContext(),te=(ee.Consumer,e.createContext()),ne=(te.Consumer,new B),ie=J();function oe(){return(0,e.useContext)(ee)||ne}function re(t){var n=(0,e.useState)(t.stylisPlugins),i=n[0],r=n[1],a=oe(),s=(0,e.useMemo)((function(){var e=a;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target]),l=(0,e.useMemo)((function(){return J({options:{prefix:!t.disableVendorPrefixes},plugins:i})}),[t.disableVendorPrefixes,i]);return(0,e.useEffect)((function(){o()(i,t.stylisPlugins)||r(t.stylisPlugins)}),[t.stylisPlugins]),e.createElement(ee.Provider,{value:s},e.createElement(te.Provider,{value:l},t.children))}var ae=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=ie);var i=n.name+t.hash;e.hasNameForId(n.id,i)||e.insertRules(n.id,i,t(n.rules,i,"@keyframes"))},this.toString=function(){return E(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=ie),this.name+e.hash},e}(),se=/([A-Z])/,le=/([A-Z])/g,ce=/^ms-/,ue=function(e){return"-"+e.toLowerCase()};function de(e){return se.test(e)?e.replace(le,ue).replace(ce,"-ms-"):e}var he=function(e){return null==e||!1===e||""===e};function fe(e,t,n,i){if(Array.isArray(e)){for(var o,r=[],a=0,l=e.length;a<l;a+=1)""!==(o=fe(e[a],t,n,i))&&(Array.isArray(o)?r.push.apply(r,o):r.push(o));return r}return he(e)?"":b(e)?"."+e.styledComponentId:y(e)?"function"!=typeof(c=e)||c.prototype&&c.prototype.isReactComponent||!t?e:fe(e(t),t,n,i):e instanceof ae?n?(e.inject(n,i),e.getName(i)):e:p(e)?function e(t,n){var i,o,r=[];for(var a in t)t.hasOwnProperty(a)&&!he(t[a])&&(Array.isArray(t[a])&&t[a].isCss||y(t[a])?r.push(de(a)+":",t[a],";"):p(t[a])?r.push.apply(r,e(t[a],a)):r.push(de(a)+": "+(i=a,(null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||i in s?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(r,["}"]):r}(e):e.toString();var c}var pe=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function ve(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return y(e)||p(e)?pe(fe(f(v,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:pe(fe(f(e,n)))}new Set;var me=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ye=/(^-|-$)/g;function ge(e){return e.replace(me,"-").replace(ye,"")}function be(e){return"string"==typeof e&&!0}var we=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},ke=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function xe(e,t,n){var i=e[n];we(t)&&we(i)?Ee(i,t):e[n]=t}function Ee(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];for(var o=0,r=n;o<r.length;o++){var a=r[o];if(we(a))for(var s in a)ke(s)&&xe(e,a[s],s)}return e}var Se=e.createContext();Se.Consumer;var Ce={};function Pe(t,n,i){var o=b(t),r=!be(t),a=n.attrs,s=void 0===a?v:a,l=n.componentId,u=void 0===l?function(e,t){var n="string"!=typeof e?"sc":ge(e);Ce[n]=(Ce[n]||0)+1;var i=n+"-"+function(e){return W(G(e)>>>0)}("5.3.5"+n+Ce[n]);return t?t+"-"+i:i}(n.displayName,n.parentComponentId):l,f=n.displayName,p=void 0===f?function(e){return be(e)?"styled."+e:"Styled("+g(e)+")"}(t):f,w=n.displayName&&n.componentId?ge(n.displayName)+"-"+n.componentId:n.componentId||u,k=o&&t.attrs?Array.prototype.concat(t.attrs,s).filter(Boolean):s,x=n.shouldForwardProp;o&&t.shouldForwardProp&&(x=n.shouldForwardProp?function(e,i,o){return t.shouldForwardProp(e,i,o)&&n.shouldForwardProp(e,i,o)}:t.shouldForwardProp);var E,S=new Z(i,w,o?t.componentStyle:void 0),C=S.isStatic&&0===s.length,P=function(t,n){return function(t,n,i,o){var r=t.attrs,a=t.componentStyle,s=t.defaultProps,l=t.foldedComponentIds,u=t.shouldForwardProp,d=t.styledComponentId,f=t.target,p=function(e,t,n){void 0===e&&(e=m);var i=h({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,r,a=e;for(t in y(a)&&(a=a(i)),a)i[t]=o[t]="className"===t?(n=o[t],r=a[t],n&&r?n+" "+r:n||r):a[t]})),[i,o]}(function(e,t,n){return void 0===n&&(n=m),e.theme!==n.theme&&e.theme||t||n.theme}(n,(0,e.useContext)(Se),s)||m,n,r),v=p[0],g=p[1],b=function(t,n,i,o){var r=oe(),a=(0,e.useContext)(te)||ie;return n?t.generateAndInjectStyles(m,r,a):t.generateAndInjectStyles(i,r,a)}(a,o,v),w=i,k=g.$as||n.$as||g.as||n.as||f,x=be(k),E=g!==n?h({},n,{},g):n,S={};for(var C in E)"$"!==C[0]&&"as"!==C&&("forwardedAs"===C?S.as=E[C]:(u?u(C,c,k):!x||c(C))&&(S[C]=E[C]));return n.style&&g.style!==n.style&&(S.style=h({},n.style,{},g.style)),S.className=Array.prototype.concat(l,d,b!==d?b:null,n.className,g.className).filter(Boolean).join(" "),S.ref=w,(0,e.createElement)(k,S)}(E,t,n,C)};return P.displayName=p,(E=e.forwardRef(P)).attrs=k,E.componentStyle=S,E.displayName=p,E.shouldForwardProp=x,E.foldedComponentIds=o?Array.prototype.concat(t.foldedComponentIds,t.styledComponentId):v,E.styledComponentId=w,E.target=o?t.target:t,E.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),r=t&&t+"-"+(be(e)?e:ge(g(e)));return Pe(e,h({},o,{attrs:k,componentId:r}),i)},Object.defineProperty(E,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?Ee({},t.defaultProps,e):e}}),E.toString=function(){return"."+E.styledComponentId},r&&d()(E,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),E}var Me,ze=function(e){return function e(t,i,o){if(void 0===o&&(o=m),!(0,n.isValidElementType)(i))return E(1,String(i));var r=function(){return t(i,o,ve.apply(void 0,arguments))};return r.withConfig=function(n){return e(t,i,h({},o,{},n))},r.attrs=function(n){return e(t,i,h({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},r}(Pe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){ze[e]=ze(e)})),Me=function(e,t){this.rules=e,this.componentId=t,this.isStatic=Q(e),B.registerId(this.componentId+1)}.prototype,Me.createStyles=function(e,t,n,i){var o=i(fe(this.rules,t,n,i).join(""),""),r=this.componentId+e;n.insertRules(r,r,o)},Me.removeStyles=function(e,t){t.clearRules(this.componentId+e)},Me.renderStyles=function(e,t,n,i){e>2&&B.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,i)},function(){var t=function(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString();if(!e)return"";var n=L();return"<style "+[n&&'nonce="'+n+'"',w+'="true"','data-styled-version="5.3.5"'].filter(Boolean).join(" ")+">"+e+"</style>"},this.getStyleTags=function(){return t.sealed?E(2):t._emitSheetCSS()},this.getStyleElement=function(){var n;if(t.sealed)return E(2);var i=((n={})[w]="",n["data-styled-version"]="5.3.5",n.dangerouslySetInnerHTML={__html:t.instance.toString()},n),o=L();return o&&(i.nonce=o),[e.createElement("style",h({},i,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new B({isServer:!0}),this.sealed=!1}.prototype;t.collectStyles=function(t){return this.sealed?E(2):e.createElement(re,{sheet:this.instance},t)},t.interleaveWithNodeStream=function(e){return E(3)}}();const Te=ze;var Oe=a(868),Re=a.n(Oe),Ae=a(269);class _e{constructor(){this.radius=0,this.mass=0}load(e){e&&(void 0!==e.mass&&(this.mass=e.mass),void 0!==e.radius&&(this.radius=e.radius))}}class Ie extends Ae.ValueWithRandom{constructor(){super(),this.density=5,this.value=50,this.limit=new _e}load(e){e&&(super.load(e),void 0!==e.density&&(this.density=e.density),"number"==typeof e.limit?this.limit.radius=e.limit:this.limit.load(e.limit))}}class Le{constructor(){this.color=new Ae.OptionsColor,this.color.value="#000000",this.draggable=!1,this.opacity=1,this.destroy=!0,this.orbits=!1,this.size=new Ie}load(e){void 0!==e&&(void 0!==e.color&&(this.color=Ae.OptionsColor.create(this.color,e.color)),void 0!==e.draggable&&(this.draggable=e.draggable),this.name=e.name,void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.position&&(this.position={},void 0!==e.position.x&&(this.position.x=(0,Ae.setRangeValue)(e.position.x)),void 0!==e.position.y&&(this.position.y=(0,Ae.setRangeValue)(e.position.y))),void 0!==e.size&&this.size.load(e.size),void 0!==e.destroy&&(this.destroy=e.destroy),void 0!==e.orbits&&(this.orbits=e.orbits))}}class De{constructor(e,t,n,i){var o,r,a;this.absorbers=e,this.container=t,this.initialPosition=i?Ae.Vector.create(i.x,i.y):void 0,n instanceof Le?this.options=n:(this.options=new Le,this.options.load(n)),this.dragging=!1,this.name=this.options.name,this.opacity=this.options.opacity,this.size=(0,Ae.getRangeValue)(this.options.size.value)*t.retina.pixelRatio,this.mass=this.size*this.options.size.density*t.retina.reduceFactor;const s=this.options.size.limit;this.limit={radius:s.radius*t.retina.pixelRatio*t.retina.reduceFactor,mass:s.mass},this.color=null!==(o=(0,Ae.colorToRgb)(this.options.color))&&void 0!==o?o:{b:0,g:0,r:0},this.position=null!==(a=null===(r=this.initialPosition)||void 0===r?void 0:r.copy())&&void 0!==a?a:this.calcPosition()}attract(e){const t=this.container,n=this.options;if(n.draggable){const e=t.interactivity.mouse;e.clicking&&e.downPosition?(0,Ae.getDistance)(this.position,e.downPosition)<=this.size&&(this.dragging=!0):this.dragging=!1,this.dragging&&e.position&&(this.position.x=e.position.x,this.position.y=e.position.y)}const i=e.getPosition(),{dx:o,dy:r,distance:a}=(0,Ae.getDistances)(this.position,i),s=Ae.Vector.create(o,r);if(s.length=this.mass/Math.pow(a,2)*t.retina.reduceFactor,a<this.size+e.getRadius()){const i=.033*e.getRadius()*t.retina.pixelRatio;this.size>e.getRadius()&&a<this.size-e.getRadius()||void 0!==e.absorberOrbit&&e.absorberOrbit.length<0?n.destroy?e.destroy():(e.needsNewPosition=!0,this.updateParticlePosition(e,s)):(n.destroy&&(e.size.value-=i),this.updateParticlePosition(e,s)),(this.limit.radius<=0||this.size<this.limit.radius)&&(this.size+=i),(this.limit.mass<=0||this.mass<this.limit.mass)&&(this.mass+=i*this.options.size.density*t.retina.reduceFactor)}else this.updateParticlePosition(e,s)}resize(){const e=this.initialPosition;this.position=e&&(0,Ae.isPointInside)(e,this.container.canvas.size,Ae.Vector.origin)?e:this.calcPosition()}draw(e){e.translate(this.position.x,this.position.y),e.beginPath(),e.arc(0,0,this.size,0,2*Math.PI,!1),e.closePath(),e.fillStyle=(0,Ae.getStyleFromRgb)(this.color,this.opacity),e.fill()}calcPosition(){const e=(0,Ae.calcPositionOrRandomFromSizeRanged)({size:this.container.canvas.size,position:this.options.position});return Ae.Vector.create(e.x,e.y)}updateParticlePosition(e,t){var n;if(e.destroyed)return;const i=this.container,o=i.canvas.size;if(e.needsNewPosition){const t=(0,Ae.calcPositionOrRandomFromSize)({size:o});e.position.setTo(t),e.velocity.setTo(e.initialVelocity),e.absorberOrbit=void 0,e.needsNewPosition=!1}if(this.options.orbits){if(void 0===e.absorberOrbit&&(e.absorberOrbit=Ae.Vector.create(0,0),e.absorberOrbit.length=(0,Ae.getDistance)(e.getPosition(),this.position),e.absorberOrbit.angle=Math.random()*Math.PI*2),e.absorberOrbit.length<=this.size&&!this.options.destroy){const t=Math.min(o.width,o.height);e.absorberOrbit.length=t*(.2*Math.random()-.1+1)}void 0===e.absorberOrbitDirection&&(e.absorberOrbitDirection=e.velocity.x>=0?"clockwise":"counter-clockwise");const r=e.absorberOrbit.length,a=e.absorberOrbit.angle,s=e.absorberOrbitDirection;e.velocity.setTo(Ae.Vector.origin);const l={x:"clockwise"===s?Math.cos:Math.sin,y:"clockwise"===s?Math.sin:Math.cos};e.position.x=this.position.x+r*l.x(a),e.position.y=this.position.y+r*l.y(a),e.absorberOrbit.length-=t.length,e.absorberOrbit.angle+=(null!==(n=e.retina.moveSpeed)&&void 0!==n?n:0)*i.retina.pixelRatio/100*i.retina.reduceFactor}else{const n=Ae.Vector.origin;n.length=t.length,n.angle=t.angle,e.velocity.addTo(n)}}}class Fe{constructor(e){this.container=e,this.array=[],this.absorbers=[],this.interactivityAbsorbers=[],e.getAbsorber=e=>void 0===e||"number"==typeof e?this.array[e||0]:this.array.find((t=>t.name===e)),e.addAbsorber=(e,t)=>this.addAbsorber(e,t)}init(e){var t,n;if(!e)return;e.absorbers&&(e.absorbers instanceof Array?this.absorbers=e.absorbers.map((e=>{const t=new Le;return t.load(e),t})):(this.absorbers instanceof Array&&(this.absorbers=new Le),this.absorbers.load(e.absorbers)));const i=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.modes)||void 0===n?void 0:n.absorbers;if(i&&(i instanceof Array?this.interactivityAbsorbers=i.map((e=>{const t=new Le;return t.load(e),t})):(this.interactivityAbsorbers instanceof Array&&(this.interactivityAbsorbers=new Le),this.interactivityAbsorbers.load(i))),this.absorbers instanceof Array)for(const e of this.absorbers)this.addAbsorber(e);else this.addAbsorber(this.absorbers)}particleUpdate(e){for(const t of this.array)if(t.attract(e),e.destroyed)break}draw(e){for(const t of this.array)e.save(),t.draw(e),e.restore()}stop(){this.array=[]}resize(){for(const e of this.array)e.resize()}handleClickMode(e){const t=this.absorbers,n=this.interactivityAbsorbers;if("absorber"===e){let e;n instanceof Array?n.length>0&&(e=(0,Ae.itemFromArray)(n)):e=n;const i=null!=e?e:t instanceof Array?(0,Ae.itemFromArray)(t):t,o=this.container.interactivity.mouse.clickPosition;this.addAbsorber(i,o)}}addAbsorber(e,t){const n=new De(this,this.container,e,t);return this.array.push(n),n}removeAbsorber(e){const t=this.array.indexOf(e);t>=0&&this.array.splice(t,1)}}class Ne{constructor(){this.id="absorbers"}getPlugin(e){return new Fe(e)}needsPlugin(e){var t,n,i;if(!e)return!1;const o=e.absorbers;return o instanceof Array?!!o.length:!!o||!(!(null===(i=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.events)||void 0===n?void 0:n.onClick)||void 0===i?void 0:i.mode)||!(0,Ae.isInArray)("absorber",e.interactivity.events.onClick.mode))}loadOptions(e,t){var n,i;if(!this.needsPlugin(e)&&!this.needsPlugin(t))return;const o=e;if(null==t?void 0:t.absorbers)if((null==t?void 0:t.absorbers)instanceof Array)o.absorbers=null==t?void 0:t.absorbers.map((e=>{const t=new Le;return t.load(e),t}));else{let e=o.absorbers;void 0===(null==e?void 0:e.load)&&(o.absorbers=e=new Le),e.load(null==t?void 0:t.absorbers)}const r=null===(i=null===(n=null==t?void 0:t.interactivity)||void 0===n?void 0:n.modes)||void 0===i?void 0:i.absorbers;if(r)if(r instanceof Array)o.interactivity.modes.absorbers=r.map((e=>{const t=new Le;return t.load(e),t}));else{let e=o.interactivity.modes.absorbers;void 0===(null==e?void 0:e.load)&&(o.interactivity.modes.absorbers=e=new Le),e.load(r)}}}class je{randomPosition(e,t,n){const[i,o]=[t.width/2,t.height/2],r=((e,t)=>{const n=Math.random()/4,i=Math.atan(t/e*Math.tan(2*Math.PI*n)),o=Math.random();return o<.25?i:o<.5?Math.PI-i:o<.75?Math.PI+i:-i})(i,o),a=((e,t,n)=>e*t/Math.sqrt((t*Math.cos(n))**2+(e*Math.sin(n))**2))(i,o,r),s=n?a*Math.sqrt(Math.random()):a;return{x:e.x+s*Math.cos(r),y:e.y+s*Math.sin(r)}}}class He{constructor(){this.wait=!1}load(e){void 0!==e&&(void 0!==e.count&&(this.count=e.count),void 0!==e.delay&&(this.delay=e.delay),void 0!==e.duration&&(this.duration=e.duration),void 0!==e.wait&&(this.wait=e.wait))}}class Ve{constructor(){this.quantity=1,this.delay=.1}load(e){void 0!==e&&(void 0!==e.quantity&&(this.quantity=(0,Ae.setRangeValue)(e.quantity)),void 0!==e.delay&&(this.delay=(0,Ae.setRangeValue)(e.delay)))}}class Be{constructor(){this.mode="percent",this.height=0,this.width=0}load(e){void 0!==e&&(void 0!==e.mode&&(this.mode=e.mode),void 0!==e.height&&(this.height=e.height),void 0!==e.width&&(this.width=e.width))}}class Ue{constructor(){this.autoPlay=!0,this.fill=!0,this.life=new He,this.rate=new Ve,this.shape="square",this.startCount=0}load(e){void 0!==e&&(void 0!==e.autoPlay&&(this.autoPlay=e.autoPlay),void 0!==e.size&&(void 0===this.size&&(this.size=new Be),this.size.load(e.size)),void 0!==e.direction&&(this.direction=e.direction),this.domId=e.domId,void 0!==e.fill&&(this.fill=e.fill),this.life.load(e.life),this.name=e.name,void 0!==e.particles&&(this.particles=(0,Ae.deepExtend)({},e.particles)),this.rate.load(e.rate),void 0!==e.shape&&(this.shape=e.shape),void 0!==e.position&&(this.position={},void 0!==e.position.x&&(this.position.x=(0,Ae.setRangeValue)(e.position.x)),void 0!==e.position.y&&(this.position.y=(0,Ae.setRangeValue)(e.position.y))),void 0!==e.spawnColor&&(void 0===this.spawnColor&&(this.spawnColor=new Ae.AnimatableColor),this.spawnColor.load(e.spawnColor)),void 0!==e.startCount&&(this.startCount=e.startCount))}}var qe,We,$e,Ge=function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},Qe=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class Ye{constructor(e,t,n,i,o){var r,a,s,l,c,u,d,h;this.emitters=t,this.container=n,qe.set(this,void 0),We.set(this,void 0),$e.set(this,void 0),Ge(this,$e,e,"f"),this.currentDuration=0,this.currentEmitDelay=0,this.currentSpawnDelay=0,this.initialPosition=o,i instanceof Ue?this.options=i:(this.options=new Ue,this.options.load(i)),this.spawnDelay=1e3*(null!==(r=this.options.life.delay)&&void 0!==r?r:0)/this.container.retina.reduceFactor,this.position=null!==(a=this.initialPosition)&&void 0!==a?a:this.calcPosition(),this.name=this.options.name,this.shape=null===(s=Qe(this,$e,"f").emitterShapeManager)||void 0===s?void 0:s.getShape(this.options.shape),this.fill=this.options.fill,Ge(this,qe,!this.options.life.wait,"f"),Ge(this,We,!1,"f");let f=(0,Ae.deepExtend)({},this.options.particles);null!=f||(f={}),null!==(l=f.move)&&void 0!==l||(f.move={}),null!==(c=(h=f.move).direction)&&void 0!==c||(h.direction=this.options.direction),this.options.spawnColor&&(this.spawnColor=(0,Ae.colorToHsl)(this.options.spawnColor)),this.paused=!this.options.autoPlay,this.particlesOptions=f,this.size=null!==(u=this.options.size)&&void 0!==u?u:(()=>{const e=new Be;return e.load({height:0,mode:"percent",width:0}),e})(),this.lifeCount=null!==(d=this.options.life.count)&&void 0!==d?d:-1,this.immortal=this.lifeCount<=0,Qe(this,$e,"f").dispatchEvent("emitterCreated",{container:n,data:{emitter:this}}),this.play()}externalPlay(){this.paused=!1,this.play()}externalPause(){this.paused=!0,this.pause()}play(){var e;if(!this.paused&&this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal||!this.options.life.count)&&(Qe(this,qe,"f")||this.currentSpawnDelay>=(null!==(e=this.spawnDelay)&&void 0!==e?e:0))){if(void 0===this.emitDelay){const e=(0,Ae.getRangeValue)(this.options.rate.delay);this.emitDelay=1e3*e/this.container.retina.reduceFactor}(this.lifeCount>0||this.immortal)&&this.prepareToDie()}}pause(){this.paused||delete this.emitDelay}resize(){const e=this.initialPosition;this.position=e&&(0,Ae.isPointInside)(e,this.container.canvas.size,Ae.Vector.origin)?e:this.calcPosition()}update(e){var t,n,i;this.paused||(Qe(this,qe,"f")&&(Ge(this,qe,!1,"f"),this.currentSpawnDelay=null!==(t=this.spawnDelay)&&void 0!==t?t:0,this.currentEmitDelay=null!==(n=this.emitDelay)&&void 0!==n?n:0),Qe(this,We,"f")||(Ge(this,We,!0,"f"),this.emitParticles(this.options.startCount)),void 0!==this.duration&&(this.currentDuration+=e.value,this.currentDuration>=this.duration&&(this.pause(),void 0!==this.spawnDelay&&delete this.spawnDelay,this.immortal||this.lifeCount--,this.lifeCount>0||this.immortal?(this.position=this.calcPosition(),this.spawnDelay=1e3*(null!==(i=this.options.life.delay)&&void 0!==i?i:0)/this.container.retina.reduceFactor):this.destroy(),this.currentDuration-=this.duration,delete this.duration)),void 0!==this.spawnDelay&&(this.currentSpawnDelay+=e.value,this.currentSpawnDelay>=this.spawnDelay&&(Qe(this,$e,"f").dispatchEvent("emitterPlay",{container:this.container}),this.play(),this.currentSpawnDelay-=this.currentSpawnDelay,delete this.spawnDelay)),void 0!==this.emitDelay&&(this.currentEmitDelay+=e.value,this.currentEmitDelay>=this.emitDelay&&(this.emit(),this.currentEmitDelay-=this.emitDelay)))}getPosition(){if(this.options.domId){const e=this.container,t=document.getElementById(this.options.domId);if(t){const n=t.getBoundingClientRect();return{x:(n.x+n.width/2)*e.retina.pixelRatio,y:(n.y+n.height/2)*e.retina.pixelRatio}}}return this.position}getSize(){const e=this.container;if(this.options.domId){const t=document.getElementById(this.options.domId);if(t){const n=t.getBoundingClientRect();return{width:n.width*e.retina.pixelRatio,height:n.height*e.retina.pixelRatio}}}return{width:"percent"===this.size.mode?e.canvas.size.width*this.size.width/100:this.size.width,height:"percent"===this.size.mode?e.canvas.size.height*this.size.height/100:this.size.height}}prepareToDie(){var e;if(this.paused)return;const t=null===(e=this.options.life)||void 0===e?void 0:e.duration;this.container.retina.reduceFactor&&(this.lifeCount>0||this.immortal)&&void 0!==t&&t>0&&(this.duration=1e3*t)}destroy(){this.emitters.removeEmitter(this),Qe(this,$e,"f").dispatchEvent("emitterDestroyed",{container:this.container,data:{emitter:this}})}calcPosition(){return(0,Ae.calcPositionOrRandomFromSizeRanged)({size:this.container.canvas.size,position:this.options.position})}emit(){if(this.paused)return;const e=(0,Ae.getRangeValue)(this.options.rate.quantity);this.emitParticles(e)}emitParticles(e){var t,n,i;const o=this.getPosition(),r=this.getSize();for(let a=0;a<e;a++){const e=(0,Ae.deepExtend)({},this.particlesOptions);if(this.spawnColor){const n=null===(t=this.options.spawnColor)||void 0===t?void 0:t.animation;n&&(this.spawnColor.h=this.setColorAnimation(n.h,this.spawnColor.h,360),this.spawnColor.s=this.setColorAnimation(n.s,this.spawnColor.s,100),this.spawnColor.l=this.setColorAnimation(n.l,this.spawnColor.l,100)),e.color?e.color.value=this.spawnColor:e.color={value:this.spawnColor}}if(!o)return;const a=null!==(i=null===(n=this.shape)||void 0===n?void 0:n.randomPosition(o,r,this.fill))&&void 0!==i?i:o;this.container.particles.addParticle(a,e)}}setColorAnimation(e,t,n){var i;const o=this.container;if(!e.enable)return t;const r=(0,Ae.randomInRange)(e.offset),a=1e3*(0,Ae.getRangeValue)(this.options.rate.delay)/o.retina.reduceFactor;return(t+(0,Ae.getRangeValue)(null!==(i=e.speed)&&void 0!==i?i:0)*o.fpsLimit/a+3.6*r)%n}}qe=new WeakMap,We=new WeakMap,$e=new WeakMap;var Ze;class Xe{constructor(e,t){this.container=t,Ze.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,Ze,e,"f"),this.array=[],this.emitters=[],this.interactivityEmitters=[],t.getEmitter=e=>void 0===e||"number"==typeof e?this.array[e||0]:this.array.find((t=>t.name===e)),t.addEmitter=(e,t)=>this.addEmitter(e,t),t.removeEmitter=e=>{const n=t.getEmitter(e);n&&this.removeEmitter(n)},t.playEmitter=e=>{const n=t.getEmitter(e);n&&n.externalPlay()},t.pauseEmitter=e=>{const n=t.getEmitter(e);n&&n.externalPause()}}init(e){var t,n;if(!e)return;e.emitters&&(e.emitters instanceof Array?this.emitters=e.emitters.map((e=>{const t=new Ue;return t.load(e),t})):(this.emitters instanceof Array&&(this.emitters=new Ue),this.emitters.load(e.emitters)));const i=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.modes)||void 0===n?void 0:n.emitters;if(i&&(i instanceof Array?this.interactivityEmitters=i.map((e=>{const t=new Ue;return t.load(e),t})):(this.interactivityEmitters instanceof Array&&(this.interactivityEmitters=new Ue),this.interactivityEmitters.load(i))),this.emitters instanceof Array)for(const e of this.emitters)this.addEmitter(e);else this.addEmitter(this.emitters)}play(){for(const e of this.array)e.play()}pause(){for(const e of this.array)e.pause()}stop(){this.array=[]}update(e){for(const t of this.array)t.update(e)}handleClickMode(e){const t=this.emitters,n=this.interactivityEmitters;if("emitter"===e){let e;n instanceof Array?n.length>0&&(e=(0,Ae.itemFromArray)(n)):e=n;const i=null!=e?e:t instanceof Array?(0,Ae.itemFromArray)(t):t,o=this.container.interactivity.mouse.clickPosition;this.addEmitter((0,Ae.deepExtend)({},i),o)}}resize(){for(const e of this.array)e.resize()}addEmitter(e,t){const n=new Ue;n.load(e);const i=new Ye(function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)}(this,Ze,"f"),this,this.container,n,t);return this.array.push(i),i}removeEmitter(e){const t=this.array.indexOf(e);t>=0&&this.array.splice(t,1)}}Ze=new WeakMap;var Ke;const Je=new Map;class et{constructor(e){Ke.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,Ke,e,"f")}addShape(e,t){this.getShape(e)||Je.set(e,t)}getShape(e){return Je.get(e)}getSupportedShapes(){return Je.keys()}}function tt(e,t){return e+t*(Math.random()-.5)}Ke=new WeakMap;class nt{randomPosition(e,t,n){if(n)return{x:tt(e.x,t.width),y:tt(e.y,t.height)};{const n=t.width/2,i=t.height/2,o=Math.floor(4*Math.random()),r=2*(Math.random()-.5);switch(o){case 0:return{x:e.x+r*n,y:e.y-i};case 1:return{x:e.x-n,y:e.y+r*i};case 2:return{x:e.x+r*n,y:e.y+i};default:return{x:e.x+n,y:e.y+r*i}}}}}var it;class ot{constructor(e){it.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,it,e,"f"),this.id="emitters"}getPlugin(e){return new Xe(function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)}(this,it,"f"),e)}needsPlugin(e){var t,n,i;if(void 0===e)return!1;const o=e.emitters;return o instanceof Array&&!!o.length||void 0!==o||!!(null===(i=null===(n=null===(t=e.interactivity)||void 0===t?void 0:t.events)||void 0===n?void 0:n.onClick)||void 0===i?void 0:i.mode)&&(0,Ae.isInArray)("emitter",e.interactivity.events.onClick.mode)}loadOptions(e,t){var n,i;if(!this.needsPlugin(e)&&!this.needsPlugin(t))return;const o=e;if(null==t?void 0:t.emitters)if((null==t?void 0:t.emitters)instanceof Array)o.emitters=null==t?void 0:t.emitters.map((e=>{const t=new Ue;return t.load(e),t}));else{let e=o.emitters;void 0===(null==e?void 0:e.load)&&(o.emitters=e=new Ue),e.load(null==t?void 0:t.emitters)}const r=null===(i=null===(n=null==t?void 0:t.interactivity)||void 0===n?void 0:n.modes)||void 0===i?void 0:i.emitters;if(r)if(r instanceof Array)o.interactivity.modes.emitters=r.map((e=>{const t=new Ue;return t.load(e),t}));else{let e=o.interactivity.modes.emitters;void 0===(null==e?void 0:e.load)&&(o.interactivity.modes.emitters=e=new Ue),e.load(r)}}}it=new WeakMap;class rt extends Ae.ExternalInteractorBase{constructor(e){super(e),this.delay=0}async interact(e){var t,n,i,o;if(!this.container.retina.reduceFactor)return;const r=this.container,a=r.actualOptions.interactivity.modes.trail,s=1e3*a.delay/this.container.retina.reduceFactor;if(this.delay<s&&(this.delay+=e.value),this.delay<s)return;let l=!0;a.pauseOnStop&&(r.interactivity.mouse.position===this.lastPosition||(null===(t=r.interactivity.mouse.position)||void 0===t?void 0:t.x)===(null===(n=this.lastPosition)||void 0===n?void 0:n.x)&&(null===(i=r.interactivity.mouse.position)||void 0===i?void 0:i.y)===(null===(o=this.lastPosition)||void 0===o?void 0:o.y))&&(l=!1),r.interactivity.mouse.position?this.lastPosition={x:r.interactivity.mouse.position.x,y:r.interactivity.mouse.position.y}:delete this.lastPosition,l&&r.particles.push(a.quantity,r.interactivity.mouse,a.particles),this.delay-=s}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events;return n.clicking&&n.inside&&!!n.position&&(0,Ae.isInArray)("trail",i.onClick.mode)||n.inside&&!!n.position&&(0,Ae.isInArray)("trail",i.onHover.mode)}reset(){}}class at{constructor(){this.color=new Ae.OptionsColor,this.width=.5,this.opacity=1}load(e){var t;e&&(this.color=Ae.OptionsColor.create(this.color,e.color),"string"==typeof this.color.value&&(this.opacity=null!==(t=(0,Ae.stringToAlpha)(this.color.value))&&void 0!==t?t:this.opacity),void 0!==e.opacity&&(this.opacity=e.opacity),void 0!==e.width&&(this.width=e.width))}}class st{constructor(){this.enable=!1,this.stroke=new at}get lineWidth(){return this.stroke.width}set lineWidth(e){this.stroke.width=e}get lineColor(){return this.stroke.color}set lineColor(e){this.stroke.color=Ae.OptionsColor.create(this.stroke.color,e)}load(e){var t;if(!e)return;void 0!==e.enable&&(this.enable=e.enable);const n=null!==(t=e.stroke)&&void 0!==t?t:{color:e.lineColor,width:e.lineWidth};this.stroke.load(n)}}class lt{constructor(){this.arrangement="one-per-point"}load(e){e&&void 0!==e.arrangement&&(this.arrangement=e.arrangement)}}class ct{constructor(){this.path=[],this.size={height:0,width:0}}load(e){e&&(void 0!==e.path&&(this.path=e.path),void 0!==e.size&&(void 0!==e.size.width&&(this.size.width=e.size.width),void 0!==e.size.height&&(this.size.height=e.size.height)))}}class ut{constructor(){this.radius=10,this.type="path"}load(e){e&&(void 0!==e.radius&&(this.radius=e.radius),void 0!==e.type&&(this.type=e.type))}}class dt{constructor(){this.draw=new st,this.enable=!1,this.inline=new lt,this.move=new ut,this.scale=1,this.type="none"}get inlineArrangement(){return this.inline.arrangement}set inlineArrangement(e){this.inline.arrangement=e}load(e){e&&(this.draw.load(e.draw),this.inline.load(e.inline),this.move.load(e.move),void 0!==e.scale&&(this.scale=e.scale),void 0!==e.type&&(this.type=e.type),void 0!==e.enable?this.enable=e.enable:this.enable="none"!==this.type,void 0!==e.url&&(this.url=e.url),void 0!==e.data&&("string"==typeof e.data?this.data=e.data:(this.data=new ct,this.data.load(e.data))),void 0!==e.position&&(this.position=(0,Ae.deepExtend)({},e.position)))}}function ht(e,t,n){const i=(0,Ae.colorToRgb)(n.color);if(i){e.beginPath(),e.moveTo(t[0].x,t[0].y);for(const n of t)e.lineTo(n.x,n.y);e.closePath(),e.strokeStyle=(0,Ae.getStyleFromRgb)(i),e.lineWidth=n.width,e.stroke()}}function ft(e,t,n,i){e.translate(i.x,i.y);const o=(0,Ae.colorToRgb)(n.color);o&&(e.strokeStyle=(0,Ae.getStyleFromRgb)(o,n.opacity),e.lineWidth=n.width,e.stroke(t))}function pt(e,t,n){const{dx:i,dy:o}=(0,Ae.getDistances)(n,e),{dx:r,dy:a}=(0,Ae.getDistances)(t,e),s=(i*r+o*a)/(r**2+a**2),l={x:e.x+r*s,y:e.x+a*s,isOnSegment:s>=0&&s<=1};return s<0?(l.x=e.x,l.y=e.y):s>1&&(l.x=t.x,l.y=t.y),l}function vt(e,t,n){const{dx:i,dy:o}=(0,Ae.getDistances)(e,t),r=Math.atan2(o,i),a=Ae.Vector.create(Math.sin(r),-Math.cos(r)),s=2*(n.x*a.x+n.y*a.y);a.multTo(s),n.subFrom(a)}var mt;class yt{constructor(e,t){this.container=e,mt.set(this,void 0),function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,mt,t,"f"),this.dimension={height:0,width:0},this.path2DSupported=!!window.Path2D,this.options=new dt,this.polygonMaskMoveRadius=this.options.move.radius*e.retina.pixelRatio}async initAsync(e){this.options.load(null==e?void 0:e.polygon);const t=this.options;this.polygonMaskMoveRadius=t.move.radius*this.container.retina.pixelRatio,t.enable&&await this.initRawData()}resize(){const e=this.container,t=this.options;t.enable&&"none"!==t.type&&(this.redrawTimeout&&clearTimeout(this.redrawTimeout),this.redrawTimeout=window.setTimeout((async()=>{await this.initRawData(!0),await e.particles.redraw()}),250))}stop(){delete this.raw,delete this.paths}particlesInitialization(){const e=this.options;return!(!e.enable||"inline"!==e.type||"one-per-point"!==e.inline.arrangement&&"per-point"!==e.inline.arrangement||(this.drawPoints(),0))}particlePosition(e){var t,n;if(this.options.enable&&(null!==(n=null===(t=this.raw)||void 0===t?void 0:t.length)&&void 0!==n?n:0)>0)return(0,Ae.deepExtend)({},e||this.randomPoint())}particleBounce(e,t,n){return this.polygonBounce(e,t,n)}clickPositionValid(e){const t=this.options;return t.enable&&"none"!==t.type&&"inline"!==t.type&&this.checkInsidePolygon(e)}draw(e){var t;if(!(null===(t=this.paths)||void 0===t?void 0:t.length))return;const n=this.options,i=n.draw;if(!n.enable||!i.enable)return;const o=this.raw;for(const t of this.paths){const n=t.path2d,r=this.path2DSupported;e&&(r&&n&&this.offset?ft(e,n,i.stroke,this.offset):o&&ht(e,o,i.stroke))}}polygonBounce(e,t,n){const i=this.options;if(!this.raw||!i.enable||"top"!==n)return!1;if("inside"===i.type||"outside"===i.type){let t,n,i;const o=e.getPosition(),r=e.getRadius();for(let a=0,s=this.raw.length-1;a<this.raw.length;s=a++){const l=this.raw[a],c=this.raw[s];t=pt(l,c,o);const u=(0,Ae.getDistances)(o,t);if([n,i]=[u.dx,u.dy],u.distance<r)return vt(l,c,e.velocity),!0}if(t&&void 0!==n&&void 0!==i&&!this.checkInsidePolygon(o)){const n={x:1,y:1};return e.position.x>=t.x&&(n.x=-1),e.position.y>=t.y&&(n.y=-1),e.position.x=t.x+2*r*n.x,e.position.y=t.y+2*r*n.y,e.velocity.mult(-1),!0}}else if("inline"===i.type&&e.initialPosition&&(0,Ae.getDistance)(e.initialPosition,e.getPosition())>this.polygonMaskMoveRadius)return e.velocity.x=e.velocity.y/2-e.velocity.x,e.velocity.y=e.velocity.x/2-e.velocity.y,!0;return!1}checkInsidePolygon(e){var t,n;const i=this.container,o=this.options;if(!o.enable||"none"===o.type||"inline"===o.type)return!0;if(!this.raw)throw new Error(Ae.noPolygonFound);const r=i.canvas.size,a=null!==(t=null==e?void 0:e.x)&&void 0!==t?t:Math.random()*r.width,s=null!==(n=null==e?void 0:e.y)&&void 0!==n?n:Math.random()*r.height;let l=!1;for(let e=0,t=this.raw.length-1;e<this.raw.length;t=e++){const n=this.raw[e],i=this.raw[t];n.y>s!=i.y>s&&a<(i.x-n.x)*(s-n.y)/(i.y-n.y)+n.x&&(l=!l)}return"inside"===o.type?l:"outside"===o.type&&!l}parseSvgPath(e,t){var n,i,o;const r=null!=t&&t;if(void 0!==this.paths&&!r)return this.raw;const a=this.container,s=this.options,l=(new DOMParser).parseFromString(e,"image/svg+xml"),c=l.getElementsByTagName("svg")[0];let u=c.getElementsByTagName("path");u.length||(u=l.getElementsByTagName("path")),this.paths=[];for(let e=0;e<u.length;e++){const t=u.item(e);t&&this.paths.push({element:t,length:t.getTotalLength()})}const d=a.retina.pixelRatio,h=s.scale/d;this.dimension.width=parseFloat(null!==(n=c.getAttribute("width"))&&void 0!==n?n:"0")*h,this.dimension.height=parseFloat(null!==(i=c.getAttribute("height"))&&void 0!==i?i:"0")*h;const f=null!==(o=s.position)&&void 0!==o?o:{x:50,y:50};return this.offset={x:a.canvas.size.width*f.x/(100*d)-this.dimension.width/2,y:a.canvas.size.height*f.y/(100*d)-this.dimension.height/2},function(e,t,n){var i;const o=[];for(const r of e){const e=r.element.pathSegList,a=null!==(i=null==e?void 0:e.numberOfItems)&&void 0!==i?i:0,s={x:0,y:0};for(let i=0;i<a;i++){const r=null==e?void 0:e.getItem(i),a=window.SVGPathSeg;switch(null==r?void 0:r.pathSegType){case a.PATHSEG_MOVETO_ABS:case a.PATHSEG_LINETO_ABS:case a.PATHSEG_CURVETO_CUBIC_ABS:case a.PATHSEG_CURVETO_QUADRATIC_ABS:case a.PATHSEG_ARC_ABS:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:{const e=r;s.x=e.x,s.y=e.y;break}case a.PATHSEG_LINETO_HORIZONTAL_ABS:s.x=r.x;break;case a.PATHSEG_LINETO_VERTICAL_ABS:s.y=r.y;break;case a.PATHSEG_LINETO_REL:case a.PATHSEG_MOVETO_REL:case a.PATHSEG_CURVETO_CUBIC_REL:case a.PATHSEG_CURVETO_QUADRATIC_REL:case a.PATHSEG_ARC_REL:case a.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:case a.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:{const e=r;s.x+=e.x,s.y+=e.y;break}case a.PATHSEG_LINETO_HORIZONTAL_REL:s.x+=r.x;break;case a.PATHSEG_LINETO_VERTICAL_REL:s.y+=r.y;break;case a.PATHSEG_UNKNOWN:case a.PATHSEG_CLOSEPATH:continue}o.push({x:s.x*t+n.x,y:s.y*t+n.y})}}return o}(this.paths,h,this.offset)}async downloadSvgPath(e,t){const n=this.options,i=e||n.url,o=null!=t&&t;if(!i||void 0!==this.paths&&!o)return this.raw;const r=await fetch(i);if(!r.ok)throw new Error("tsParticles Error - Error occurred during polygon mask download");return this.parseSvgPath(await r.text(),t)}drawPoints(){if(this.raw)for(const e of this.raw)this.container.particles.addParticle({x:e.x,y:e.y})}randomPoint(){const e=this.container,t=this.options;let n;if("inline"===t.type)switch(t.inline.arrangement){case"random-point":n=this.getRandomPoint();break;case"random-length":n=this.getRandomPointByLength();break;case"equidistant":n=this.getEquidistantPointByIndex(e.particles.count);break;default:n=this.getPointByIndex(e.particles.count)}else n={x:Math.random()*e.canvas.size.width,y:Math.random()*e.canvas.size.height};return this.checkInsidePolygon(n)?n:this.randomPoint()}getRandomPoint(){if(!this.raw||!this.raw.length)throw new Error(Ae.noPolygonDataLoaded);const e=(0,Ae.itemFromArray)(this.raw);return{x:e.x,y:e.y}}getRandomPointByLength(){var e,t,n;const i=this.options;if(!this.raw||!this.raw.length||!(null===(e=this.paths)||void 0===e?void 0:e.length))throw new Error(Ae.noPolygonDataLoaded);const o=(0,Ae.itemFromArray)(this.paths),r=Math.floor(Math.random()*o.length)+1,a=o.element.getPointAtLength(r);return{x:a.x*i.scale+((null===(t=this.offset)||void 0===t?void 0:t.x)||0),y:a.y*i.scale+((null===(n=this.offset)||void 0===n?void 0:n.y)||0)}}getEquidistantPointByIndex(e){var t,n,i,o,r,a,s;const l=this.container.actualOptions,c=this.options;if(!this.raw||!this.raw.length||!(null===(t=this.paths)||void 0===t?void 0:t.length))throw new Error(Ae.noPolygonDataLoaded);let u,d=0;const h=this.paths.reduce(((e,t)=>e+t.length),0)/l.particles.number.value;for(const t of this.paths){const n=h*e-d;if(n<=t.length){u=t.element.getPointAtLength(n);break}d+=t.length}return{x:(null!==(n=null==u?void 0:u.x)&&void 0!==n?n:0)*c.scale+(null!==(o=null===(i=this.offset)||void 0===i?void 0:i.x)&&void 0!==o?o:0),y:(null!==(r=null==u?void 0:u.y)&&void 0!==r?r:0)*c.scale+(null!==(s=null===(a=this.offset)||void 0===a?void 0:a.y)&&void 0!==s?s:0)}}getPointByIndex(e){if(!this.raw||!this.raw.length)throw new Error(Ae.noPolygonDataLoaded);const t=this.raw[e%this.raw.length];return{x:t.x,y:t.y}}createPath2D(){var e,t;const n=this.options;if(this.path2DSupported&&(null===(e=this.paths)||void 0===e?void 0:e.length))for(const e of this.paths){const i=null===(t=e.element)||void 0===t?void 0:t.getAttribute("d");if(i){const t=new Path2D(i),o=document.createElementNS("http://www.w3.org/2000/svg","svg").createSVGMatrix(),r=new Path2D,a=o.scale(n.scale);r.addPath?(r.addPath(t,a),e.path2d=r):delete e.path2d}else delete e.path2d;!e.path2d&&this.raw&&(e.path2d=new Path2D,e.path2d.moveTo(this.raw[0].x,this.raw[0].y),this.raw.forEach(((t,n)=>{var i;n>0&&(null===(i=e.path2d)||void 0===i||i.lineTo(t.x,t.y))})),e.path2d.closePath())}}async initRawData(e){const t=this.options;if(t.url)this.raw=await this.downloadSvgPath(t.url,e);else if(t.data){const n=t.data;let i;if("string"!=typeof n){const e=n.path instanceof Array?n.path.map((e=>`<path d="${e}" />`)).join(""):`<path d="${n.path}" />`;i=`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${n.size.width}" height="${n.size.height}">${e}</svg>`}else i=n;this.raw=this.parseSvgPath(i,e)}this.createPath2D(),function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)}(this,mt,"f").dispatchEvent("polygonMaskLoaded",{container:this.container})}}mt=new WeakMap;var gt;class bt{constructor(e){gt.set(this,void 0),this.id="polygonMask",function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===i?o.call(e,n):o?o.value=n:t.set(e,n)}(this,gt,e,"f")}getPlugin(e){return new yt(e,function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)}(this,gt,"f"))}needsPlugin(e){var t,n,i;return null!==(n=null===(t=null==e?void 0:e.polygon)||void 0===t?void 0:t.enable)&&void 0!==n?n:void 0!==(null===(i=null==e?void 0:e.polygon)||void 0===i?void 0:i.type)&&"none"!==e.polygon.type}loadOptions(e,t){if(!this.needsPlugin(t))return;const n=e;let i=n.polygon;void 0===(null==i?void 0:i.load)&&(n.polygon=i=new dt),i.load(null==t?void 0:t.polygon)}}gt=new WeakMap;class wt{init(e){const t=e.options.roll;if(t.enable)if(e.roll={angle:Math.random()*Math.PI*2,speed:(0,Ae.getRangeValue)(t.speed)/360},t.backColor)e.backColor=(0,Ae.colorToHsl)(t.backColor);else if(t.darken.enable&&t.enlighten.enable){const n=Math.random()>=.5?"darken":"enlighten";e.roll.alter={type:n,value:(0,Ae.getRangeValue)("darken"===n?t.darken.value:t.enlighten.value)}}else t.darken.enable?e.roll.alter={type:"darken",value:(0,Ae.getRangeValue)(t.darken.value)}:t.enlighten.enable&&(e.roll.alter={type:"enlighten",value:(0,Ae.getRangeValue)(t.enlighten.value)});else e.roll={angle:0,speed:0}}isEnabled(e){const t=e.options.roll;return!e.destroyed&&!e.spawning&&t.enable}update(e,t){this.isEnabled(e)&&function(e,t){const n=e.options.roll;if(!e.roll||!n.enable)return;const i=e.roll.speed*t.factor,o=2*Math.PI;e.roll.angle+=i,e.roll.angle>o&&(e.roll.angle-=o)}(e,t)}}class kt{constructor(e){this.container=e}init(e){const t=e.options.rotate;e.rotate={enable:t.animation.enable,value:(0,Ae.getRangeValue)(t.value)*Math.PI/180};let n=t.direction;switch("random"===n&&(n=Math.floor(2*Math.random())>0?"counter-clockwise":"clockwise"),n){case"counter-clockwise":case"counterClockwise":e.rotate.status=1;break;case"clockwise":e.rotate.status=0}const i=e.options.rotate.animation;i.enable&&(e.rotate.velocity=(0,Ae.getRangeValue)(i.speed)/360*this.container.retina.reduceFactor,i.sync||(e.rotate.velocity*=Math.random()))}isEnabled(e){const t=e.options.rotate,n=t.animation;return!e.destroyed&&!e.spawning&&!t.path&&n.enable}update(e,t){this.isEnabled(e)&&function(e,t){var n;const i=e.rotate;if(!i)return;const o=e.options.rotate.animation,r=(null!==(n=i.velocity)&&void 0!==n?n:0)*t.factor,a=2*Math.PI;o.enable&&(0===i.status?(i.value+=r,i.value>a&&(i.value-=a)):(i.value-=r,i.value<0&&(i.value+=a)))}(e,t)}}class xt{init(e){var t;const n=e.container,i=e.options.move.spin;if(i.enable){const o=null!==(t=i.position)&&void 0!==t?t:{x:50,y:50},r={x:o.x/100*n.canvas.size.width,y:o.y/100*n.canvas.size.height},a=e.getPosition(),s=(0,Ae.getDistance)(a,r),l=(0,Ae.getRangeValue)(i.acceleration);e.retina.spinAcceleration=l*n.retina.pixelRatio,e.spin={center:r,direction:e.velocity.x>=0?"clockwise":"counter-clockwise",angle:e.velocity.angle,radius:s,acceleration:e.retina.spinAcceleration}}}isEnabled(e){return!e.destroyed&&e.options.move.enable}move(e,t){var n,i,o,r,a;const s=e.options,l=s.move;if(!l.enable)return;const c=e.container,u=function(e){const t=e.container,n=t.actualOptions;if(!(0,Ae.isInArray)("slow",n.interactivity.events.onHover.mode))return 1;const i=e.container.interactivity.mouse.position;if(!i)return 1;const o=e.getPosition(),r=(0,Ae.getDistance)(i,o),a=t.retina.slowModeRadius;return r>a?1:(r/a||0)/n.interactivity.modes.slow.factor}(e),d=(null!==(n=(r=e.retina).moveSpeed)&&void 0!==n?n:r.moveSpeed=(0,Ae.getRangeValue)(l.speed)*c.retina.pixelRatio)*c.retina.reduceFactor,h=null!==(i=(a=e.retina).moveDrift)&&void 0!==i?i:a.moveDrift=(0,Ae.getRangeValue)(e.options.move.drift)*c.retina.pixelRatio,f=(0,Ae.getRangeMax)(s.size.value)*c.retina.pixelRatio,p=d*((l.size?e.getRadius()/f:1)*u*(t.factor||1))/2;!function(e,t){const n=e.options.move.path;if(!n.enable)return;const i=e.container;if(e.lastPathTime<=e.pathDelay)return void(e.lastPathTime+=t.value);const o=i.pathGenerator.generate(e);e.velocity.addTo(o),n.clamp&&(e.velocity.x=(0,Ae.clamp)(e.velocity.x,-1,1),e.velocity.y=(0,Ae.clamp)(e.velocity.y,-1,1)),e.lastPathTime-=e.pathDelay}(e,t);const v=e.gravity,m=v.enable&&v.inverse?-1:1;v.enable&&p&&(e.velocity.y+=m*(v.acceleration*t.factor)/(60*p)),h&&p&&(e.velocity.x+=h*t.factor/(60*p));const y=e.moveDecay;1!=y&&e.velocity.multTo(y);const g=e.velocity.mult(p),b=null!==(o=e.retina.maxSpeed)&&void 0!==o?o:c.retina.maxSpeed;v.enable&&b>0&&(!v.inverse&&g.y>=0&&g.y>=b||v.inverse&&g.y<=0&&g.y<=-b)&&(g.y=m*b,p&&(e.velocity.y=g.y/p));const w=e.options.zIndex,k=(1-e.zIndexFactor)**w.velocityRate;l.spin.enable?function(e,t){const n=e.container;if(!e.spin)return;const i={x:"clockwise"===e.spin.direction?Math.cos:Math.sin,y:"clockwise"===e.spin.direction?Math.sin:Math.cos};e.position.x=e.spin.center.x+e.spin.radius*i.x(e.spin.angle),e.position.y=e.spin.center.y+e.spin.radius*i.y(e.spin.angle),e.spin.radius+=e.spin.acceleration;const o=Math.max(n.canvas.size.width,n.canvas.size.height);e.spin.radius>o/2?(e.spin.radius=o/2,e.spin.acceleration*=-1):e.spin.radius<0&&(e.spin.radius=0,e.spin.acceleration*=-1),e.spin.angle+=t/100*(1-e.spin.radius/o)}(e,p):(1!=k&&g.multTo(k),e.position.addTo(g),l.vibrate&&(e.position.x+=Math.sin(e.position.x*Math.cos(e.position.y)),e.position.y+=Math.cos(e.position.y*Math.sin(e.position.x)))),function(e){const t=e.initialPosition,{dx:n,dy:i}=(0,Ae.getDistances)(t,e.position),o=Math.abs(n),r=Math.abs(i),a=e.retina.maxDistance.horizontal,s=e.retina.maxDistance.vertical;if(a||s)if((a&&o>=a||s&&r>=s)&&!e.misplaced)e.misplaced=!!a&&o>a||!!s&&r>s,a&&(e.velocity.x=e.velocity.y/2-e.velocity.x),s&&(e.velocity.y=e.velocity.x/2-e.velocity.y);else if((!a||o<a)&&(!s||r<s)&&e.misplaced)e.misplaced=!1;else if(e.misplaced){const n=e.position,i=e.velocity;a&&(n.x<t.x&&i.x<0||n.x>t.x&&i.x>0)&&(i.x*=-Math.random()),s&&(n.y<t.y&&i.y<0||n.y>t.y&&i.y>0)&&(i.y*=-Math.random())}}(e)}}class Et{getSidesCount(){return 12}draw(e,t,n){e.arc(0,0,n,0,2*Math.PI,!1)}}function St(e,t,n,i,o){var r;const a=t;if(!a||!n.enable)return;const s=(0,Ae.randomInRange)(n.offset),l=(null!==(r=t.velocity)&&void 0!==r?r:0)*e.factor+3.6*s;o&&0!==a.status?(a.value-=l,a.value<0&&(a.status=0,a.value+=a.value)):(a.value+=l,o&&a.value>i&&(a.status=1,a.value-=a.value%i)),a.value>i&&(a.value%=i)}class Ct{constructor(e){this.container=e}init(e){const t=(0,Ae.colorToHsl)(e.options.color,e.id,e.options.reduceDuplicates);t&&(e.color=(0,Ae.getHslAnimationFromHsl)(t,e.options.color.animation,this.container.retina.reduceFactor))}isEnabled(e){var t,n,i;const o=e.options.color.animation;return!e.destroyed&&!e.spawning&&(void 0!==(null===(t=e.color)||void 0===t?void 0:t.h.value)&&o.h.enable||void 0!==(null===(n=e.color)||void 0===n?void 0:n.s.value)&&o.s.enable||void 0!==(null===(i=e.color)||void 0===i?void 0:i.l.value)&&o.l.enable)}update(e,t){!function(e,t){var n,i,o;const r=e.options.color.animation;void 0!==(null===(n=e.color)||void 0===n?void 0:n.h)&&St(t,e.color.h,r.h,360,!1),void 0!==(null===(i=e.color)||void 0===i?void 0:i.s)&&St(t,e.color.s,r.s,100,!0),void 0!==(null===(o=e.color)||void 0===o?void 0:o.l)&&St(t,e.color.l,r.l,100,!0)}(e,t)}}class Pt extends Ae.ExternalInteractorBase{constructor(e){super(e),e.attract||(e.attract={particles:[]}),this.handleClickMode=t=>{const n=this.container.actualOptions;if("attract"===t){e.attract||(e.attract={particles:[]}),e.attract.clicking=!0,e.attract.count=0;for(const t of e.attract.particles)t.velocity.setTo(t.initialVelocity);e.attract.particles=[],e.attract.finish=!1,setTimeout((()=>{e.destroyed||(e.attract||(e.attract={particles:[]}),e.attract.clicking=!1)}),1e3*n.interactivity.modes.attract.duration)}}}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events;if(!(n.position&&i.onHover.enable||n.clickPosition&&i.onClick.enable))return!1;const o=i.onHover.mode,r=i.onClick.mode;return(0,Ae.isInArray)("attract",o)||(0,Ae.isInArray)("attract",r)}reset(){}async interact(){const e=this.container,t=e.actualOptions,n=e.interactivity.status===Ae.mouseMoveEvent,i=t.interactivity.events,o=i.onHover.enable,r=i.onHover.mode,a=i.onClick.enable,s=i.onClick.mode;n&&o&&(0,Ae.isInArray)("attract",r)?this.hoverAttract():a&&(0,Ae.isInArray)("attract",s)&&this.clickAttract()}hoverAttract(){const e=this.container,t=e.interactivity.mouse.position;if(!t)return;const n=e.retina.attractModeDistance;this.processAttract(t,n,new Ae.Circle(t.x,t.y,n))}processAttract(e,t,n){const i=this.container,o=i.actualOptions.interactivity.modes.attract,r=i.particles.quadTree.query(n);for(const n of r){const{dx:i,dy:r,distance:a}=(0,Ae.getDistances)(n.position,e),s=o.speed*o.factor,l=(0,Ae.clamp)((0,Ae.calcEasing)(1-a/t,o.easing)*s,0,o.maxSpeed),c=Ae.Vector.create(0===a?s:i/a*l,0===a?s:r/a*l);n.position.subFrom(c)}}clickAttract(){const e=this.container;if(e.attract||(e.attract={particles:[]}),e.attract.finish||(e.attract.count||(e.attract.count=0),e.attract.count++,e.attract.count===e.particles.count&&(e.attract.finish=!0)),e.attract.clicking){const t=e.interactivity.mouse.clickPosition;if(!t)return;const n=e.retina.attractModeDistance;this.processAttract(t,n,new Ae.Circle(t.x,t.y,n))}else!1===e.attract.clicking&&(e.attract.particles=[])}}class Mt extends Ae.ExternalInteractorBase{constructor(e){super(e)}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events,o=i.onDiv;return n.position&&i.onHover.enable&&(0,Ae.isInArray)("bounce",i.onHover.mode)||(0,Ae.isDivModeEnabled)("bounce",o)}async interact(){const e=this.container,t=e.actualOptions.interactivity.events,n=e.interactivity.status===Ae.mouseMoveEvent,i=t.onHover.enable,o=t.onHover.mode,r=t.onDiv;n&&i&&(0,Ae.isInArray)("bounce",o)?this.processMouseBounce():(0,Ae.divModeExecute)("bounce",r,((e,t)=>this.singleSelectorBounce(e,t)))}reset(){}processMouseBounce(){const e=this.container,t=10*e.retina.pixelRatio,n=e.interactivity.mouse.position,i=e.retina.bounceModeDistance;n&&this.processBounce(n,i,new Ae.Circle(n.x,n.y,i+t))}singleSelectorBounce(e,t){const n=this.container,i=document.querySelectorAll(e);i.length&&i.forEach((e=>{const i=e,o=n.retina.pixelRatio,r={x:(i.offsetLeft+i.offsetWidth/2)*o,y:(i.offsetTop+i.offsetHeight/2)*o},a=i.offsetWidth/2*o,s=10*o,l="circle"===t.type?new Ae.Circle(r.x,r.y,a+s):new Ae.Rectangle(i.offsetLeft*o-s,i.offsetTop*o-s,i.offsetWidth*o+2*s,i.offsetHeight*o+2*s);this.processBounce(r,a,l)}))}processBounce(e,t,n){const i=this.container.particles.quadTree.query(n);for(const o of i)n instanceof Ae.Circle?(0,Ae.circleBounce)((0,Ae.circleBounceDataFromParticle)(o),{position:e,radius:t,mass:t**2*Math.PI/2,velocity:Ae.Vector.origin,factor:Ae.Vector.origin}):n instanceof Ae.Rectangle&&(0,Ae.rectBounce)(o,(0,Ae.calculateBounds)(e,t))}}function zt(e,t,n,i){if(t>=n){const o=e+(t-n)*i;return(0,Ae.clamp)(o,e,t)}if(t<n){const o=e-(n-t)*i;return(0,Ae.clamp)(o,t,e)}}class Tt extends Ae.ExternalInteractorBase{constructor(e){super(e),e.bubble||(e.bubble={}),this.handleClickMode=t=>{"bubble"===t&&(e.bubble||(e.bubble={}),e.bubble.clicking=!0)}}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events,o=i.onDiv,r=(0,Ae.isDivModeEnabled)("bubble",o);if(!(r||i.onHover.enable&&n.position||i.onClick.enable&&n.clickPosition))return!1;const a=i.onHover.mode,s=i.onClick.mode;return(0,Ae.isInArray)("bubble",a)||(0,Ae.isInArray)("bubble",s)||r}reset(e,t){e.bubble.inRange&&!t||(delete e.bubble.div,delete e.bubble.opacity,delete e.bubble.radius,delete e.bubble.color)}async interact(){const e=this.container.actualOptions.interactivity.events,t=e.onHover,n=e.onClick,i=t.enable,o=t.mode,r=n.enable,a=n.mode,s=e.onDiv;i&&(0,Ae.isInArray)("bubble",o)?this.hoverBubble():r&&(0,Ae.isInArray)("bubble",a)?this.clickBubble():(0,Ae.divModeExecute)("bubble",s,((e,t)=>this.singleSelectorHover(e,t)))}singleSelectorHover(e,t){const n=this.container,i=document.querySelectorAll(e);i.length&&i.forEach((e=>{const i=e,o=n.retina.pixelRatio,r={x:(i.offsetLeft+i.offsetWidth/2)*o,y:(i.offsetTop+i.offsetHeight/2)*o},a=i.offsetWidth/2*o,s="circle"===t.type?new Ae.Circle(r.x,r.y,a):new Ae.Rectangle(i.offsetLeft*o,i.offsetTop*o,i.offsetWidth*o,i.offsetHeight*o),l=n.particles.quadTree.query(s);for(const e of l){if(!s.contains(e.getPosition()))continue;e.bubble.inRange=!0;const t=n.actualOptions.interactivity.modes.bubble.divs,o=(0,Ae.divMode)(t,i);e.bubble.div&&e.bubble.div===i||(this.reset(e,!0),e.bubble.div=i),this.hoverBubbleSize(e,1,o),this.hoverBubbleOpacity(e,1,o),this.hoverBubbleColor(e,1,o)}}))}process(e,t,n,i){const o=this.container,r=i.bubbleObj.optValue;if(void 0===r)return;const a=o.actualOptions.interactivity.modes.bubble.duration,s=o.retina.bubbleModeDistance,l=i.particlesObj.optValue,c=i.bubbleObj.value,u=i.particlesObj.value||0,d=i.type;if(r!==l)if(o.bubble||(o.bubble={}),o.bubble.durationEnd)c&&("size"===d&&delete e.bubble.radius,"opacity"===d&&delete e.bubble.opacity);else if(t<=s){if((null!=c?c:u)!==r){const t=u-n*(u-r)/a;"size"===d&&(e.bubble.radius=t),"opacity"===d&&(e.bubble.opacity=t)}}else"size"===d&&delete e.bubble.radius,"opacity"===d&&delete e.bubble.opacity}clickBubble(){var e,t;const n=this.container,i=n.actualOptions,o=n.interactivity.mouse.clickPosition;if(!o)return;n.bubble||(n.bubble={});const r=n.retina.bubbleModeDistance,a=n.particles.quadTree.queryCircle(o,r);for(const r of a){if(!n.bubble.clicking)continue;r.bubble.inRange=!n.bubble.durationEnd;const a=r.getPosition(),s=(0,Ae.getDistance)(a,o),l=((new Date).getTime()-(n.interactivity.mouse.clickTime||0))/1e3;l>i.interactivity.modes.bubble.duration&&(n.bubble.durationEnd=!0),l>2*i.interactivity.modes.bubble.duration&&(n.bubble.clicking=!1,n.bubble.durationEnd=!1);const c={bubbleObj:{optValue:n.retina.bubbleModeSize,value:r.bubble.radius},particlesObj:{optValue:(0,Ae.getRangeMax)(r.options.size.value)*n.retina.pixelRatio,value:r.size.value},type:"size"};this.process(r,s,l,c);const u={bubbleObj:{optValue:i.interactivity.modes.bubble.opacity,value:r.bubble.opacity},particlesObj:{optValue:(0,Ae.getRangeMax)(r.options.opacity.value),value:null!==(t=null===(e=r.opacity)||void 0===e?void 0:e.value)&&void 0!==t?t:1},type:"opacity"};this.process(r,s,l,u),n.bubble.durationEnd?delete r.bubble.color:s<=n.retina.bubbleModeDistance?this.hoverBubbleColor(r,s):delete r.bubble.color}}hoverBubble(){const e=this.container,t=e.interactivity.mouse.position;if(void 0===t)return;const n=e.retina.bubbleModeDistance,i=e.particles.quadTree.queryCircle(t,n);for(const o of i){o.bubble.inRange=!0;const i=o.getPosition(),r=(0,Ae.getDistance)(i,t),a=1-r/n;r<=n?a>=0&&e.interactivity.status===Ae.mouseMoveEvent&&(this.hoverBubbleSize(o,a),this.hoverBubbleOpacity(o,a),this.hoverBubbleColor(o,a)):this.reset(o),e.interactivity.status===Ae.mouseLeaveEvent&&this.reset(o)}}hoverBubbleSize(e,t,n){const i=this.container,o=(null==n?void 0:n.size)?n.size*i.retina.pixelRatio:i.retina.bubbleModeSize;if(void 0===o)return;const r=(0,Ae.getRangeMax)(e.options.size.value)*i.retina.pixelRatio,a=zt(e.size.value,o,r,t);void 0!==a&&(e.bubble.radius=a)}hoverBubbleOpacity(e,t,n){var i,o,r;const a=this.container.actualOptions,s=null!==(i=null==n?void 0:n.opacity)&&void 0!==i?i:a.interactivity.modes.bubble.opacity;if(!s)return;const l=e.options.opacity.value,c=zt(null!==(r=null===(o=e.opacity)||void 0===o?void 0:o.value)&&void 0!==r?r:1,s,(0,Ae.getRangeMax)(l),t);void 0!==c&&(e.bubble.opacity=c)}hoverBubbleColor(e,t,n){const i=this.container.actualOptions,o=null!=n?n:i.interactivity.modes.bubble;if(!e.bubble.finalColor){const t=o.color;if(!t)return;const n=t instanceof Array?(0,Ae.itemFromArray)(t):t;e.bubble.finalColor=(0,Ae.colorToHsl)(n)}if(e.bubble.finalColor)if(o.mix){e.bubble.color=void 0;const n=e.getFillColor();e.bubble.color=n?(0,Ae.rgbToHsl)((0,Ae.colorMix)(n,e.bubble.finalColor,1-t,t)):e.bubble.finalColor}else e.bubble.color=e.bubble.finalColor}}class Ot extends Ae.ExternalInteractorBase{constructor(e){super(e)}isEnabled(){const e=this.container,t=e.interactivity.mouse,n=e.actualOptions.interactivity.events;return!(!n.onHover.enable||!t.position)&&(0,Ae.isInArray)("connect",n.onHover.mode)}reset(){}async interact(){const e=this.container;if(e.actualOptions.interactivity.events.onHover.enable&&"mousemove"===e.interactivity.status){const t=e.interactivity.mouse.position;if(!t)return;const n=Math.abs(e.retina.connectModeRadius),i=e.particles.quadTree.queryCircle(t,n);let o=0;for(const t of i){const n=t.getPosition();for(const r of i.slice(o+1)){const i=r.getPosition(),o=Math.abs(e.retina.connectModeDistance),a=Math.abs(n.x-i.x),s=Math.abs(n.y-i.y);a<o&&s<o&&e.canvas.drawConnectLine(t,r)}++o}}}}class Rt extends Ae.ExternalInteractorBase{constructor(e){super(e)}isEnabled(){const e=this.container,t=e.interactivity.mouse,n=e.actualOptions.interactivity.events;return n.onHover.enable&&!!t.position&&(0,Ae.isInArray)("grab",n.onHover.mode)}reset(){}async interact(){var e;const t=this.container,n=t.actualOptions,i=n.interactivity;if(!i.events.onHover.enable||t.interactivity.status!==Ae.mouseMoveEvent)return;const o=t.interactivity.mouse.position;if(!o)return;const r=t.retina.grabModeDistance,a=t.particles.quadTree.queryCircle(o,r);for(const s of a){const a=s.getPosition(),l=(0,Ae.getDistance)(a,o);if(l>r)continue;const c=i.modes.grab.links,u=c.opacity,d=u-l*u/r;if(d<=0)continue;const h=null!==(e=c.color)&&void 0!==e?e:s.options.links.color;if(!t.particles.grabLineColor){const e=n.interactivity.modes.grab.links;t.particles.grabLineColor=(0,Ae.getLinkRandomColor)(h,e.blink,e.consent)}const f=(0,Ae.getLinkColor)(s,void 0,t.particles.grabLineColor);if(!f)return;t.canvas.drawGrabLine(s,f,d,o)}}}class At extends Ae.ExternalInteractorBase{constructor(e){super(e),this.handleClickMode=e=>{if("pause"!==e)return;const t=this.container;t.getAnimationStatus()?t.pause():t.play()}}isEnabled(){return!0}reset(){}async interact(){}}class _t extends Ae.ExternalInteractorBase{constructor(e){super(e),this.handleClickMode=e=>{if("push"!==e)return;const t=this.container,n=t.actualOptions,i=n.interactivity.modes.push.quantity;if(i<=0)return;const o=n.interactivity.modes.push,r=(0,Ae.itemFromArray)([void 0,...o.groups]),a=void 0!==r?t.actualOptions.particles.groups[r]:void 0;t.particles.push(i,t.interactivity.mouse,a,r)}}isEnabled(){return!0}reset(){}async interact(){}}class It extends Ae.ExternalInteractorBase{constructor(e){super(e),this.handleClickMode=e=>{if("remove"!==e)return;const t=this.container,n=t.actualOptions.interactivity.modes.remove.quantity;t.particles.removeQuantity(n)}}isEnabled(){return!0}reset(){}async interact(){}}class Lt extends Ae.ExternalInteractorBase{constructor(e){super(e),e.repulse||(e.repulse={particles:[]}),this.handleClickMode=t=>{const n=this.container.actualOptions;if("repulse"===t){e.repulse||(e.repulse={particles:[]}),e.repulse.clicking=!0,e.repulse.count=0;for(const t of e.repulse.particles)t.velocity.setTo(t.initialVelocity);e.repulse.particles=[],e.repulse.finish=!1,setTimeout((()=>{e.destroyed||(e.repulse||(e.repulse={particles:[]}),e.repulse.clicking=!1)}),1e3*n.interactivity.modes.repulse.duration)}}}isEnabled(){const e=this.container,t=e.actualOptions,n=e.interactivity.mouse,i=t.interactivity.events,o=i.onDiv,r=(0,Ae.isDivModeEnabled)("repulse",o);if(!(r||i.onHover.enable&&n.position||i.onClick.enable&&n.clickPosition))return!1;const a=i.onHover.mode,s=i.onClick.mode;return(0,Ae.isInArray)("repulse",a)||(0,Ae.isInArray)("repulse",s)||r}reset(){}async interact(){const e=this.container,t=e.actualOptions,n=e.interactivity.status===Ae.mouseMoveEvent,i=t.interactivity.events,o=i.onHover.enable,r=i.onHover.mode,a=i.onClick.enable,s=i.onClick.mode,l=i.onDiv;n&&o&&(0,Ae.isInArray)("repulse",r)?this.hoverRepulse():a&&(0,Ae.isInArray)("repulse",s)?this.clickRepulse():(0,Ae.divModeExecute)("repulse",l,((e,t)=>this.singleSelectorRepulse(e,t)))}singleSelectorRepulse(e,t){const n=this.container,i=document.querySelectorAll(e);i.length&&i.forEach((e=>{const i=e,o=n.retina.pixelRatio,r={x:(i.offsetLeft+i.offsetWidth/2)*o,y:(i.offsetTop+i.offsetHeight/2)*o},a=i.offsetWidth/2*o,s="circle"===t.type?new Ae.Circle(r.x,r.y,a):new Ae.Rectangle(i.offsetLeft*o,i.offsetTop*o,i.offsetWidth*o,i.offsetHeight*o),l=n.actualOptions.interactivity.modes.repulse.divs,c=(0,Ae.divMode)(l,i);this.processRepulse(r,a,s,c)}))}hoverRepulse(){const e=this.container,t=e.interactivity.mouse.position;if(!t)return;const n=e.retina.repulseModeDistance;this.processRepulse(t,n,new Ae.Circle(t.x,t.y,n))}processRepulse(e,t,n,i){var o;const r=this.container,a=r.particles.quadTree.query(n),s=r.actualOptions.interactivity.modes.repulse;for(const n of a){const{dx:r,dy:a,distance:l}=(0,Ae.getDistances)(n.position,e),c=(null!==(o=null==i?void 0:i.speed)&&void 0!==o?o:s.speed)*s.factor,u=(0,Ae.clamp)((0,Ae.calcEasing)(1-l/t,s.easing)*c,0,s.maxSpeed),d=Ae.Vector.create(0===l?c:r/l*u,0===l?c:a/l*u);n.position.addTo(d)}}clickRepulse(){const e=this.container;if(e.repulse||(e.repulse={particles:[]}),e.repulse.finish||(e.repulse.count||(e.repulse.count=0),e.repulse.count++,e.repulse.count===e.particles.count&&(e.repulse.finish=!0)),e.repulse.clicking){const t=e.retina.repulseModeDistance,n=Math.pow(t/6,3),i=e.interactivity.mouse.clickPosition;if(void 0===i)return;const o=new Ae.Circle(i.x,i.y,n),r=e.particles.quadTree.query(o);for(const t of r){const{dx:o,dy:r,distance:a}=(0,Ae.getDistances)(i,t.position),s=a**2,l=e.actualOptions.interactivity.modes.repulse.speed,c=-n*l/s;if(s<=n){e.repulse.particles.push(t);const n=Ae.Vector.create(o,r);n.length=c,t.velocity.setTo(n)}}}else if(!1===e.repulse.clicking){for(const t of e.repulse.particles)t.velocity.setTo(t.initialVelocity);e.repulse.particles=[]}}}const Dt=/(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;async function Ft(e){return new Promise((t=>{e.loading=!0;const n=new Image;n.addEventListener("load",(()=>{e.element=n,e.loading=!1,t()})),n.addEventListener("error",(()=>{e.error=!0,e.loading=!1,console.error(`Error tsParticles - loading image: ${e.source}`),t()})),n.src=e.source}))}async function Nt(e){if("svg"!==e.type)return void await Ft(e);e.loading=!0;const t=await fetch(e.source);e.loading=!1,t.ok||(console.error("Error tsParticles - Image not found"),e.error=!0),e.error||(e.svgData=await t.text())}var jt,Ht=function(e,t,n,i,o){if("m"===i)throw new TypeError("Private method is not writable");if("a"===i&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===i?o.call(e,n):o?o.value=n:t.set(e,n),n},Vt=function(e,t,n,i){if("a"===n&&!i)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?i:"a"===n?i.call(e):i?i.value:t.get(e)};class Bt{constructor(){jt.set(this,void 0),Ht(this,jt,[],"f")}getSidesCount(){return 12}getImages(e){const t=Vt(this,jt,"f").find((t=>t.id===e.id));return t||(Vt(this,jt,"f").push({id:e.id,images:[]}),this.getImages(e))}addImage(e,t){const n=this.getImages(e);null==n||n.images.push(t)}destroy(){Ht(this,jt,[],"f")}draw(e,t,n,i){var o,r;const a=t.image,s=null===(o=null==a?void 0:a.data)||void 0===o?void 0:o.element;if(!s)return;const l=null!==(r=null==a?void 0:a.ratio)&&void 0!==r?r:1,c={x:-n,y:-n};(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(e.globalAlpha=i),e.drawImage(s,c.x,c.y,2*n,2*n/l),(null==a?void 0:a.data.svgData)&&(null==a?void 0:a.replaceColor)||(e.globalAlpha=1)}loadShape(e){var t,n,i;if("image"!==e.shape&&"images"!==e.shape)return;const o=this.getImages(e.container).images,r=e.shapeData,a=o.find((e=>e.source===r.src));let s;if(!a)return void this.loadImageShape(e.container,r).then((()=>{this.loadShape(e)}));if(a.error)return;const l=e.getFillColor();s=a.svgData&&r.replaceColor&&l?function(e,t,n,i){var o,r,a;const s=function(e,t,n){const{svgData:i}=e;if(!i)return"";const o=(0,Ae.getStyleFromHsl)(t,n);if(i.includes("fill"))return i.replace(Dt,(()=>o));const r=i.indexOf(">");return`${i.substring(0,r)} fill="${o}"${i.substring(r)}`}(e,n,null!==(r=null===(o=i.opacity)||void 0===o?void 0:o.value)&&void 0!==r?r:1),l=new Blob([s],{type:"image/svg+xml"}),c=URL||window.URL||window.webkitURL||window,u=c.createObjectURL(l),d=new Image,h={data:Object.assign(Object.assign({},e),{svgData:s}),ratio:t.width/t.height,replaceColor:null!==(a=t.replaceColor)&&void 0!==a?a:t.replace_color,source:t.src};return d.addEventListener("load",(()=>{const t=i.image;t&&(t.loaded=!0,e.element=d),c.revokeObjectURL(u)})),d.addEventListener("error",(()=>{c.revokeObjectURL(u);const t=Object.assign(Object.assign({},e),{error:!1,loading:!0});Ft(t).then((()=>{const n=i.image;n&&(e.element=t.element,n.loaded=!0)}))})),d.src=u,h}(a,r,l,e):{data:a,loaded:!0,ratio:r.width/r.height,replaceColor:null!==(t=r.replaceColor)&&void 0!==t?t:r.replace_color,source:r.src},s.ratio||(s.ratio=1);const c={image:s,fill:null!==(n=r.fill)&&void 0!==n?n:e.fill,close:null!==(i=r.close)&&void 0!==i?i:e.close};e.image=c.image,e.fill=c.fill,e.close=c.close}async loadImageShape(e,t){const n=t.src;if(!n)throw new Error("Error tsParticles - No image.src");try{const i={source:n,type:n.substr(n.length-3),error:!1,loading:!0};this.addImage(e,i);const o=t.replaceColor?Nt:Ft;await o(i)}catch(e){throw new Error(`tsParticles error - ${t.src} not found`)}}}jt=new WeakMap;class Ut{constructor(e){this.container=e}init(){}isEnabled(e){return!e.destroyed}update(e,t){if(!this.isEnabled(e))return;const n=e.life;let i=!1;if(e.spawning){if(n.delayTime+=t.value,!(n.delayTime>=e.life.delay))return;i=!0,e.spawning=!1,n.delayTime=0,n.time=0}if(-1===n.duration)return;if(e.spawning)return;if(i?n.time=0:n.time+=t.value,n.time<n.duration)return;if(n.time=0,e.life.count>0&&e.life.count--,0===e.life.count)return void e.destroy();const o=this.container.canvas.size,r=(0,Ae.setRangeValue)(0,o.width),a=(0,Ae.setRangeValue)(0,o.width);e.position.x=(0,Ae.randomInRange)(r),e.position.y=(0,Ae.randomInRange)(a),e.spawning=!0,n.delayTime=0,n.time=0,e.reset();const s=e.options.life;n.delay=1e3*(0,Ae.getRangeValue)(s.delay.value),n.duration=1e3*(0,Ae.getRangeValue)(s.duration.value)}}class qt{getSidesCount(){return 1}draw(e,t,n){e.moveTo(-n/2,0),e.lineTo(n/2,0)}}class Wt{constructor(e){this.container=e}init(e){const t=e.options.opacity;e.opacity={enable:t.animation.enable,max:(0,Ae.getRangeMax)(t.value),min:(0,Ae.getRangeMin)(t.value),value:(0,Ae.getRangeValue)(t.value),loops:0,maxLoops:(0,Ae.getRangeValue)(t.animation.count)};const n=t.animation;if(n.enable){e.opacity.status=0;const i=t.value;switch(e.opacity.min=(0,Ae.getRangeMin)(i),e.opacity.max=(0,Ae.getRangeMax)(i),n.startValue){case"min":e.opacity.value=e.opacity.min,e.opacity.status=0;break;case"random":e.opacity.value=(0,Ae.randomInRange)(e.opacity),e.opacity.status=Math.random()>=.5?0:1;break;default:e.opacity.value=e.opacity.max,e.opacity.status=1}e.opacity.velocity=(0,Ae.getRangeValue)(n.speed)/100*this.container.retina.reduceFactor,n.sync||(e.opacity.velocity*=Math.random())}}isEnabled(e){var t,n,i,o;return!e.destroyed&&!e.spawning&&!!e.opacity&&e.opacity.enable&&((null!==(t=e.opacity.maxLoops)&&void 0!==t?t:0)<=0||(null!==(n=e.opacity.maxLoops)&&void 0!==n?n:0)>0&&(null!==(i=e.opacity.loops)&&void 0!==i?i:0)<(null!==(o=e.opacity.maxLoops)&&void 0!==o?o:0))}update(e,t){this.isEnabled(e)&&function(e,t){var n,i,o,r,a;if(!e.opacity)return;const s=e.opacity.min,l=e.opacity.max;if(!(e.destroyed||!e.opacity.enable||(null!==(n=e.opacity.maxLoops)&&void 0!==n?n:0)>0&&(null!==(i=e.opacity.loops)&&void 0!==i?i:0)>(null!==(o=e.opacity.maxLoops)&&void 0!==o?o:0))){switch(e.opacity.status){case 0:e.opacity.value>=l?(e.opacity.status=1,e.opacity.loops||(e.opacity.loops=0),e.opacity.loops++):e.opacity.value+=(null!==(r=e.opacity.velocity)&&void 0!==r?r:0)*t.factor;break;case 1:e.opacity.value<=s?(e.opacity.status=0,e.opacity.loops||(e.opacity.loops=0),e.opacity.loops++):e.opacity.value-=(null!==(a=e.opacity.velocity)&&void 0!==a?a:0)*t.factor}!function(e,t,n,i){switch(e.options.opacity.animation.destroy){case"max":t>=i&&e.destroy();break;case"min":t<=n&&e.destroy()}}(e,e.opacity.value,s,l),e.destroyed||(e.opacity.value=(0,Ae.clamp)(e.opacity.value,s,l))}}(e,t)}}class $t{constructor(e){this.container=e,this.modes=["bounce","bounce-vertical","bounce-horizontal","bounceVertical","bounceHorizontal","split"]}update(e,t,n,i){if(!this.modes.includes(i))return;const o=this.container;let r=!1;for(const[,i]of o.plugins)if(void 0!==i.particleBounce&&(r=i.particleBounce(e,n,t)),r)break;if(r)return;const a=e.getPosition(),s=e.offset,l=e.getRadius(),c=(0,Ae.calculateBounds)(a,l),u=o.canvas.size;!function(e){if("bounce"!==e.outMode&&"bounce-horizontal"!==e.outMode&&"bounceHorizontal"!==e.outMode&&"split"!==e.outMode)return;const t=e.particle.velocity.x;let n=!1;if("right"===e.direction&&e.bounds.right>=e.canvasSize.width&&t>0||"left"===e.direction&&e.bounds.left<=0&&t<0){const t=(0,Ae.getValue)(e.particle.options.bounce.horizontal);e.particle.velocity.x*=-t,n=!0}if(!n)return;const i=e.offset.x+e.size;e.bounds.right>=e.canvasSize.width?e.particle.position.x=e.canvasSize.width-i:e.bounds.left<=0&&(e.particle.position.x=i),"split"===e.outMode&&e.particle.destroy()}({particle:e,outMode:i,direction:t,bounds:c,canvasSize:u,offset:s,size:l}),function(e){if("bounce"===e.outMode||"bounce-vertical"===e.outMode||"bounceVertical"===e.outMode||"split"===e.outMode){const t=e.particle.velocity.y;let n=!1;if("bottom"===e.direction&&e.bounds.bottom>=e.canvasSize.height&&t>0||"top"===e.direction&&e.bounds.top<=0&&t<0){const t=(0,Ae.getValue)(e.particle.options.bounce.vertical);e.particle.velocity.y*=-t,n=!0}if(!n)return;const i=e.offset.y+e.size;e.bounds.bottom>=e.canvasSize.height?e.particle.position.y=e.canvasSize.height-i:e.bounds.top<=0&&(e.particle.position.y=i),"split"===e.outMode&&e.particle.destroy()}}({particle:e,outMode:i,direction:t,bounds:c,canvasSize:u,offset:s,size:l})}}class Gt{constructor(e){this.container=e,this.modes=["destroy"]}update(e,t,n,i){if(!this.modes.includes(i))return;const o=this.container;switch(e.outType){case"normal":case"outside":if((0,Ae.isPointInside)(e.position,o.canvas.size,Ae.Vector.origin,e.getRadius(),t))return;break;case"inside":{const{dx:t,dy:n}=(0,Ae.getDistances)(e.position,e.moveCenter),{x:i,y:o}=e.velocity;if(i<0&&t>e.moveCenter.radius||o<0&&n>e.moveCenter.radius||i>=0&&t<-e.moveCenter.radius||o>=0&&n<-e.moveCenter.radius)return;break}}o.particles.remove(e,void 0,!0)}}class Qt{constructor(e){this.container=e,this.modes=["none"]}update(e,t,n,i){if(!this.modes.includes(i))return;if(e.options.move.distance.horizontal&&("left"===t||"right"===t)||e.options.move.distance.vertical&&("top"===t||"bottom"===t))return;const o=e.options.move.gravity,r=this.container,a=r.canvas.size,s=e.getRadius();if(o.enable){const n=e.position;(!o.inverse&&n.y>a.height+s&&"bottom"===t||o.inverse&&n.y<-s&&"top"===t)&&r.particles.remove(e)}else{if(e.velocity.y>0&&e.position.y<=a.height+s||e.velocity.y<0&&e.position.y>=-s||e.velocity.x>0&&e.position.x<=a.width+s||e.velocity.x<0&&e.position.x>=-s)return;(0,Ae.isPointInside)(e.position,r.canvas.size,Ae.Vector.origin,s,t)||r.particles.remove(e)}}}class Yt{constructor(e){this.container=e,this.modes=["out"]}update(e,t,n,i){if(!this.modes.includes(i))return;const o=this.container;switch(e.outType){case"inside":{const{x:t,y:n}=e.velocity,i=Ae.Vector.origin;i.length=e.moveCenter.radius,i.angle=e.velocity.angle+Math.PI,i.addTo(Ae.Vector.create(e.moveCenter));const{dx:r,dy:a}=(0,Ae.getDistances)(e.position,i);if(t<=0&&r>=0||n<=0&&a>=0||t>=0&&r<=0||n>=0&&a<=0)return;e.position.x=Math.floor((0,Ae.randomInRange)({min:0,max:o.canvas.size.width})),e.position.y=Math.floor((0,Ae.randomInRange)({min:0,max:o.canvas.size.height}));const{dx:s,dy:l}=(0,Ae.getDistances)(e.position,e.moveCenter);e.direction=Math.atan2(-l,-s),e.velocity.angle=e.direction;break}default:if((0,Ae.isPointInside)(e.position,o.canvas.size,Ae.Vector.origin,e.getRadius(),t))return;switch(e.outType){case"outside":{e.position.x=Math.floor((0,Ae.randomInRange)({min:-e.moveCenter.radius,max:e.moveCenter.radius}))+e.moveCenter.x,e.position.y=Math.floor((0,Ae.randomInRange)({min:-e.moveCenter.radius,max:e.moveCenter.radius}))+e.moveCenter.y;const{dx:t,dy:n}=(0,Ae.getDistances)(e.position,e.moveCenter);e.moveCenter.radius&&(e.direction=Math.atan2(n,t),e.velocity.angle=e.direction);break}case"normal":{const n=e.options.move.warp,i=o.canvas.size,r={bottom:i.height+e.getRadius()+e.offset.y,left:-e.getRadius()-e.offset.x,right:i.width+e.getRadius()+e.offset.x,top:-e.getRadius()-e.offset.y},a=e.getRadius(),s=(0,Ae.calculateBounds)(e.position,a);"right"===t&&s.left>i.width+e.offset.x?(e.position.x=r.left,e.initialPosition.x=e.position.x,n||(e.position.y=Math.random()*i.height,e.initialPosition.y=e.position.y)):"left"===t&&s.right<-e.offset.x&&(e.position.x=r.right,e.initialPosition.x=e.position.x,n||(e.position.y=Math.random()*i.height,e.initialPosition.y=e.position.y)),"bottom"===t&&s.top>i.height+e.offset.y?(n||(e.position.x=Math.random()*i.width,e.initialPosition.x=e.position.x),e.position.y=r.top,e.initialPosition.y=e.position.y):"top"===t&&s.bottom<-e.offset.y&&(n||(e.position.x=Math.random()*i.width,e.initialPosition.x=e.position.x),e.position.y=r.bottom,e.initialPosition.y=e.position.y);break}}}}}class Zt{constructor(e){this.container=e,this.updaters=[new $t(e),new Gt(e),new Yt(e),new Qt(e)]}init(){}isEnabled(e){return!e.destroyed&&!e.spawning}update(e,t){var n,i,o,r;const a=e.options.move.outModes;this.updateOutMode(e,t,null!==(n=a.bottom)&&void 0!==n?n:a.default,"bottom"),this.updateOutMode(e,t,null!==(i=a.left)&&void 0!==i?i:a.default,"left"),this.updateOutMode(e,t,null!==(o=a.right)&&void 0!==o?o:a.default,"right"),this.updateOutMode(e,t,null!==(r=a.top)&&void 0!==r?r:a.default,"top")}updateOutMode(e,t,n,i){for(const o of this.updaters)o.update(e,i,t,n)}}class Xt{init(){}isEnabled(e){return!(0,Ae.isSsr)()&&!e.destroyed&&e.container.actualOptions.interactivity.events.onHover.parallax.enable}move(e){const t=e.container,n=t.actualOptions;if((0,Ae.isSsr)()||!n.interactivity.events.onHover.parallax.enable)return;const i=n.interactivity.events.onHover.parallax.force,o=t.interactivity.mouse.position;if(!o)return;const r=t.canvas.size.width/2,a=t.canvas.size.height/2,s=n.interactivity.events.onHover.parallax.smooth,l=e.getRadius()/i,c=(o.x-r)*l,u=(o.y-a)*l;e.offset.x+=(c-e.offset.x)/s,e.offset.y+=(u-e.offset.y)/s}}class Kt extends Ae.ParticlesInteractorBase{constructor(e){super(e)}async interact(e){var t;const n=this.container,i=null!==(t=e.retina.attractDistance)&&void 0!==t?t:n.retina.attractDistance,o=e.getPosition(),r=n.particles.quadTree.queryCircle(o,i);for(const t of r){if(e===t||!t.options.move.attract.enable||t.destroyed||t.spawning)continue;const n=t.getPosition(),{dx:i,dy:r}=(0,Ae.getDistances)(o,n),a=e.options.move.attract.rotate,s=i/(1e3*a.x),l=r/(1e3*a.y),c=t.size.value/e.size.value,u=1/c;e.velocity.x-=s*c,e.velocity.y-=l*c,t.velocity.x+=s*u,t.velocity.y+=l*u}}isEnabled(e){return e.options.move.attract.enable}reset(){}}function Jt(e,t){(0,Ae.circleBounce)((0,Ae.circleBounceDataFromParticle)(e),(0,Ae.circleBounceDataFromParticle)(t))}function en(e,t,n,i){switch(e.options.collisions.mode){case"absorb":!function(e,t,n,i){if(void 0===e.getRadius()&&void 0!==t.getRadius())e.destroy();else if(void 0!==e.getRadius()&&void 0===t.getRadius())t.destroy();else if(void 0!==e.getRadius()&&void 0!==t.getRadius())if(e.getRadius()>=t.getRadius()){const o=(0,Ae.clamp)(e.getRadius()/t.getRadius(),0,t.getRadius())*n;e.size.value+=o,t.size.value-=o,t.getRadius()<=i&&(t.size.value=0,t.destroy())}else{const o=(0,Ae.clamp)(t.getRadius()/e.getRadius(),0,e.getRadius())*n;e.size.value-=o,t.size.value+=o,e.getRadius()<=i&&(e.size.value=0,e.destroy())}}(e,t,n,i);break;case"bounce":Jt(e,t);break;case"destroy":!function(e,t){e.unbreakable||t.unbreakable||Jt(e,t),void 0===e.getRadius()&&void 0!==t.getRadius()?e.destroy():void 0!==e.getRadius()&&void 0===t.getRadius()?t.destroy():void 0!==e.getRadius()&&void 0!==t.getRadius()&&(e.getRadius()>=t.getRadius()?t.destroy():e.destroy())}(e,t)}}class tn extends Ae.ParticlesInteractorBase{constructor(e){super(e)}isEnabled(e){return e.options.collisions.enable}reset(){}async interact(e){const t=this.container,n=e.getPosition(),i=e.getRadius(),o=t.particles.quadTree.queryCircle(n,2*i);for(const r of o){if(e===r||!r.options.collisions.enable||e.options.collisions.mode!==r.options.collisions.mode||r.destroyed||r.spawning)continue;const o=r.getPosition(),a=r.getRadius();Math.abs(Math.round(n.z)-Math.round(o.z))>i+a||((0,Ae.getDistance)(n,o)>i+a||en(e,r,t.fpsLimit/1e3,t.retina.pixelRatio))}}}function nn(e,t,n,i,o){let r=(0,Ae.getDistance)(e,t);if(!o||r<=n)return r;const a={x:t.x-i.width,y:t.y};if(r=(0,Ae.getDistance)(e,a),r<=n)return r;const s={x:t.x-i.width,y:t.y-i.height};if(r=(0,Ae.getDistance)(e,s),r<=n)return r;const l={x:t.x,y:t.y-i.height};return r=(0,Ae.getDistance)(e,l),r}class on extends Ae.ParticlesInteractorBase{constructor(e){super(e)}isEnabled(e){return e.options.links.enable}reset(){}async interact(e){var t;e.links=[];const n=e.getPosition(),i=this.container,o=i.canvas.size;if(n.x<0||n.y<0||n.x>o.width||n.y>o.height)return;const r=e.options.links,a=r.opacity,s=null!==(t=e.retina.linksDistance)&&void 0!==t?t:i.retina.linksDistance,l=r.warp,c=l?new Ae.CircleWarp(n.x,n.y,s,o):new Ae.Circle(n.x,n.y,s),u=i.particles.quadTree.query(c);for(const t of u){const i=t.options.links;if(e===t||!i.enable||r.id!==i.id||t.spawning||t.destroyed||-1!==e.links.map((e=>e.destination)).indexOf(t)||-1!==t.links.map((e=>e.destination)).indexOf(e))continue;const c=t.getPosition();if(c.x<0||c.y<0||c.x>o.width||c.y>o.height)continue;const u=nn(n,c,s,o,l&&i.warp);if(u>s)return;const d=(1-u/s)*a;this.setColor(e),e.links.push({destination:t,opacity:d})}}setColor(e){const t=this.container,n=e.options.links;let i=void 0===n.id?t.particles.linksColor:t.particles.linksColors.get(n.id);if(!i){const e=n.color;i=(0,Ae.getLinkRandomColor)(e,n.blink,n.consent),void 0===n.id?t.particles.linksColor=i:t.particles.linksColors.set(n.id,i)}}}class rn{constructor(e){this.container=e}particleCreated(e){e.links=[]}particleDestroyed(e){e.links=[]}drawParticle(e,t){const n=t,i=this.container,o=i.particles,r=t.options;if(n.links.length<=0)return;e.save();const a=n.links.filter((e=>i.particles.getLinkFrequency(n,e.destination)<=r.links.frequency));for(const e of a){const t=e.destination;if(r.links.triangles.enable){const s=a.map((e=>e.destination)),l=t.links.filter((e=>i.particles.getLinkFrequency(t,e.destination)<=t.options.links.frequency&&s.indexOf(e.destination)>=0));if(l.length)for(const i of l){const a=i.destination;o.getTriangleFrequency(n,t,a)>r.links.triangles.frequency||this.drawLinkTriangle(n,e,i)}}e.opacity>0&&i.retina.linksWidth>0&&this.drawLinkLine(n,e)}e.restore()}drawLinkTriangle(e,t,n){var i;const o=this.container,r=o.actualOptions,a=t.destination,s=n.destination,l=e.options.links.triangles,c=null!==(i=l.opacity)&&void 0!==i?i:(t.opacity+n.opacity)/2;c<=0||o.canvas.draw((t=>{const n=e.getPosition(),i=a.getPosition(),u=s.getPosition();if((0,Ae.getDistance)(n,i)>o.retina.linksDistance||(0,Ae.getDistance)(u,i)>o.retina.linksDistance||(0,Ae.getDistance)(u,n)>o.retina.linksDistance)return;let d=(0,Ae.colorToRgb)(l.color);if(!d){const t=e.options.links,n=void 0!==t.id?o.particles.linksColors.get(t.id):o.particles.linksColor;d=(0,Ae.getLinkColor)(e,a,n)}d&&function(e,t,n,i,o,r,a,s){(0,Ae.drawTriangle)(e,t,n,i),o&&(e.globalCompositeOperation=r),e.fillStyle=(0,Ae.getStyleFromRgb)(a,s),e.fill()}(t,n,i,u,r.backgroundMask.enable,r.backgroundMask.composite,d,c)}))}drawLinkLine(e,t){const n=this.container,i=n.actualOptions,o=t.destination,r=e.getPosition(),a=o.getPosition();let s=t.opacity;n.canvas.draw((t=>{var l,c;let u;const d=e.options.twinkle.lines;if(d.enable){const e=d.frequency,t=(0,Ae.colorToRgb)(d.color);Math.random()<e&&t&&(u=t,s=(0,Ae.getRangeValue)(d.opacity))}if(!u){const t=e.options.links,i=void 0!==t.id?n.particles.linksColors.get(t.id):n.particles.linksColor;u=(0,Ae.getLinkColor)(e,o,i)}if(!u)return;const h=null!==(l=e.retina.linksWidth)&&void 0!==l?l:n.retina.linksWidth,f=null!==(c=e.retina.linksDistance)&&void 0!==c?c:n.retina.linksDistance;!function(e,t,n,i,o,r,a,s,l,c,u,d){let h=!1;if((0,Ae.getDistance)(n,i)<=o)(0,Ae.drawLine)(e,n,i),h=!0;else if(a){let t,a;const s={x:i.x-r.width,y:i.y},l=(0,Ae.getDistances)(n,s);if(l.distance<=o){const e=n.y-l.dy/l.dx*n.x;t={x:0,y:e},a={x:r.width,y:e}}else{const e={x:i.x,y:i.y-r.height},s=(0,Ae.getDistances)(n,e);if(s.distance<=o){const e=-(n.y-s.dy/s.dx*n.x)/(s.dy/s.dx);t={x:e,y:0},a={x:e,y:r.height}}else{const e={x:i.x-r.width,y:i.y-r.height},s=(0,Ae.getDistances)(n,e);if(s.distance<=o){const e=n.y-s.dy/s.dx*n.x;t={x:-e/(s.dy/s.dx),y:e},a={x:t.x+r.width,y:t.y+r.height}}}}t&&a&&((0,Ae.drawLine)(e,n,t),(0,Ae.drawLine)(e,i,a),h=!0)}if(h){if(e.lineWidth=t,s&&(e.globalCompositeOperation=l),e.strokeStyle=(0,Ae.getStyleFromRgb)(c,u),d.enable){const t=(0,Ae.colorToRgb)(d.color);t&&(e.shadowBlur=d.blur,e.shadowColor=(0,Ae.getStyleFromRgb)(t))}e.stroke()}}(t,h,r,a,f,n.canvas.size,e.options.links.warp,i.backgroundMask.enable,i.backgroundMask.composite,u,s,e.options.links.shadow)}))}}class an{constructor(){this.id="links"}getPlugin(e){return new rn(e)}needsPlugin(){return!0}loadOptions(){}}class sn{getSidesCount(e){var t,n;const i=e.shapeData;return null!==(n=null!==(t=null==i?void 0:i.sides)&&void 0!==t?t:null==i?void 0:i.nb_sides)&&void 0!==n?n:5}draw(e,t,n){const i=this.getCenter(t,n),o=this.getSidesData(t,n),r=o.count.numerator*o.count.denominator,a=o.count.numerator/o.count.denominator,s=180*(a-2)/a,l=Math.PI-Math.PI*s/180;if(e){e.beginPath(),e.translate(i.x,i.y),e.moveTo(0,0);for(let t=0;t<r;t++)e.lineTo(o.length,0),e.translate(o.length,0),e.rotate(l)}}}class ln extends sn{getSidesData(e,t){var n,i;const o=e.shapeData,r=null!==(i=null!==(n=null==o?void 0:o.sides)&&void 0!==n?n:null==o?void 0:o.nb_sides)&&void 0!==i?i:5;return{count:{denominator:1,numerator:r},length:2.66*t/(r/3)}}getCenter(e,t){return{x:-t/(this.getSidesCount(e)/3.5),y:-t/.76}}}class cn extends sn{getSidesCount(){return 3}getSidesData(e,t){return{count:{denominator:2,numerator:3},length:2*t}}getCenter(e,t){return{x:-t,y:t/1.66}}}class un{init(){}isEnabled(e){var t,n,i,o;return!e.destroyed&&!e.spawning&&e.size.enable&&((null!==(t=e.size.maxLoops)&&void 0!==t?t:0)<=0||(null!==(n=e.size.maxLoops)&&void 0!==n?n:0)>0&&(null!==(i=e.size.loops)&&void 0!==i?i:0)<(null!==(o=e.size.maxLoops)&&void 0!==o?o:0))}update(e,t){this.isEnabled(e)&&function(e,t){var n,i,o,r;const a=(null!==(n=e.size.velocity)&&void 0!==n?n:0)*t.factor,s=e.size.min,l=e.size.max;if(!(e.destroyed||!e.size.enable||(null!==(i=e.size.maxLoops)&&void 0!==i?i:0)>0&&(null!==(o=e.size.loops)&&void 0!==o?o:0)>(null!==(r=e.size.maxLoops)&&void 0!==r?r:0))){switch(e.size.status){case 0:e.size.value>=l?(e.size.status=1,e.size.loops||(e.size.loops=0),e.size.loops++):e.size.value+=a;break;case 1:e.size.value<=s?(e.size.status=0,e.size.loops||(e.size.loops=0),e.size.loops++):e.size.value-=a}!function(e,t,n,i){switch(e.options.size.animation.destroy){case"max":t>=i&&e.destroy();break;case"min":t<=n&&e.destroy()}}(e,e.size.value,s,l),e.destroyed||(e.size.value=(0,Ae.clamp)(e.size.value,s,l))}}(e,t)}}const dn=Math.sqrt(2);class hn{getSidesCount(){return 4}draw(e,t,n){e.rect(-n/dn,-n/dn,2*n/dn,2*n/dn)}}class fn{getSidesCount(e){var t,n;const i=e.shapeData;return null!==(n=null!==(t=null==i?void 0:i.sides)&&void 0!==t?t:null==i?void 0:i.nb_sides)&&void 0!==n?n:5}draw(e,t,n){var i;const o=t.shapeData,r=this.getSidesCount(t),a=null!==(i=null==o?void 0:o.inset)&&void 0!==i?i:2;e.moveTo(0,0-n);for(let t=0;t<r;t++)e.rotate(Math.PI/r),e.lineTo(0,0-n*a),e.rotate(Math.PI/r),e.lineTo(0,0-n)}}function pn(e,t,n,i,o){var r;const a=t;if(!a||!a.enable)return;const s=(0,Ae.randomInRange)(n.offset),l=(null!==(r=t.velocity)&&void 0!==r?r:0)*e.factor+3.6*s;o&&0!==a.status?(a.value-=l,a.value<0&&(a.status=0,a.value+=a.value)):(a.value+=l,o&&a.value>i&&(a.status=1,a.value-=a.value%i)),a.value>i&&(a.value%=i)}class vn{constructor(e){this.container=e}init(e){var t,n;const i=this.container;e.stroke=e.options.stroke instanceof Array?(0,Ae.itemFromArray)(e.options.stroke,e.id,e.options.reduceDuplicates):e.options.stroke,e.strokeWidth=e.stroke.width*i.retina.pixelRatio;const o=null!==(t=(0,Ae.colorToHsl)(e.stroke.color))&&void 0!==t?t:e.getFillColor();o&&(e.strokeColor=(0,Ae.getHslAnimationFromHsl)(o,null===(n=e.stroke.color)||void 0===n?void 0:n.animation,i.retina.reduceFactor))}isEnabled(e){var t,n,i,o;const r=null===(t=e.stroke)||void 0===t?void 0:t.color;return!e.destroyed&&!e.spawning&&!!r&&(void 0!==(null===(n=e.strokeColor)||void 0===n?void 0:n.h.value)&&r.animation.h.enable||void 0!==(null===(i=e.strokeColor)||void 0===i?void 0:i.s.value)&&r.animation.s.enable||void 0!==(null===(o=e.strokeColor)||void 0===o?void 0:o.l.value)&&r.animation.l.enable)}update(e,t){this.isEnabled(e)&&function(e,t){var n,i,o,r,a,s,l,c,u,d;if(!(null===(n=e.stroke)||void 0===n?void 0:n.color))return;const h=e.stroke.color.animation,f=null!==(o=null===(i=e.strokeColor)||void 0===i?void 0:i.h)&&void 0!==o?o:null===(r=e.color)||void 0===r?void 0:r.h;f&&pn(t,f,h.h,360,!1);const p=null!==(s=null===(a=e.strokeColor)||void 0===a?void 0:a.s)&&void 0!==s?s:null===(l=e.color)||void 0===l?void 0:l.s;p&&pn(t,p,h.s,100,!0);const v=null!==(u=null===(c=e.strokeColor)||void 0===c?void 0:c.l)&&void 0!==u?u:null===(d=e.color)||void 0===d?void 0:d.l;v&&pn(t,v,h.l,100,!0)}(e,t)}}const mn=["text","character","char"];class yn{getSidesCount(){return 12}async init(e){const t=e.actualOptions;if(mn.find((e=>(0,Ae.isInArray)(e,t.particles.shape.type)))){const e=mn.map((e=>t.particles.shape.options[e])).find((e=>!!e));if(e instanceof Array){const t=[];for(const n of e){const e=n;t.push((0,Ae.loadFont)(e.font,e.weight))}await Promise.allSettled(t)}else if(void 0!==e){const t=e;await(0,Ae.loadFont)(t.font,t.weight)}}}draw(e,t,n,i){var o,r,a;const s=t.shapeData;if(void 0===s)return;const l=s.value;if(void 0===l)return;const c=t;void 0===c.text&&(c.text=l instanceof Array?(0,Ae.itemFromArray)(l,t.randomIndexData):l);const u=c.text,d=null!==(o=s.style)&&void 0!==o?o:"",h=null!==(r=s.weight)&&void 0!==r?r:"400",f=2*Math.round(n),p=null!==(a=s.font)&&void 0!==a?a:"Verdana",v=t.fill,m=u.length*n/2;e.font=`${d} ${h} ${f}px "${p}"`;const y={x:-m,y:n/2};e.globalAlpha=i,v?e.fillText(u,y.x,y.y):e.strokeText(u,y.x,y.y),e.globalAlpha=1}}async function gn(e){await async function(e){e.addMover("base",(()=>new xt))}(e),await async function(e){e.addMover("parallax",(()=>new Xt))}(e),await async function(e){await e.addInteractor("externalAttract",(e=>new Pt(e)))}(e),await async function(e){await e.addInteractor("externalBounce",(e=>new Mt(e)))}(e),await async function(e){await e.addInteractor("externalBubble",(e=>new Tt(e)))}(e),await async function(e){await e.addInteractor("externalConnect",(e=>new Ot(e)))}(e),await async function(e){await e.addInteractor("externalGrab",(e=>new Rt(e)))}(e),await function(e){e.addInteractor("externalPause",(e=>new At(e)))}(e),await async function(e){await e.addInteractor("externalPush",(e=>new _t(e)))}(e),await function(e){e.addInteractor("externalRemove",(e=>new It(e)))}(e),await async function(e){await e.addInteractor("externalRepulse",(e=>new Lt(e)))}(e),await async function(e){await e.addInteractor("particlesAttract",(e=>new Kt(e)))}(e),await async function(e){await e.addInteractor("particlesCollisions",(e=>new tn(e)))}(e),await async function(e){await async function(e){await e.addInteractor("particlesLinks",(e=>new on(e)))}(e),await async function(e){const t=new an;await e.addPlugin(t)}(e)}(e),await async function(e){await e.addShape("circle",new Et)}(e),await async function(e){const t=new Bt;await e.addShape("image",t),await e.addShape("images",t)}(e),await async function(e){await e.addShape("line",new qt)}(e),await async function(e){await async function(e){await e.addShape("polygon",new ln)}(e),await async function(e){await e.addShape("triangle",new cn)}(e)}(e),await async function(e){const t=new hn;await e.addShape("edge",t),await e.addShape("square",t)}(e),await async function(e){await e.addShape("star",new fn)}(e),await async function(e){const t=new yn;for(const n of mn)await e.addShape(n,t)}(e),await async function(e){await e.addParticleUpdater("life",(e=>new Ut(e)))}(e),await async function(e){await e.addParticleUpdater("opacity",(e=>new Wt(e)))}(e),await async function(e){await e.addParticleUpdater("size",(()=>new un))}(e),await async function(e){await e.addParticleUpdater("angle",(e=>new kt(e)))}(e),await async function(e){await e.addParticleUpdater("color",(e=>new Ct(e)))}(e),await async function(e){await e.addParticleUpdater("strokeColor",(e=>new vn(e)))}(e),await async function(e){await e.addParticleUpdater("outModes",(e=>new Zt(e)))}(e),await(e=>{const t=(t,n)=>e.load(t,n);return t.load=(t,n,i)=>{e.loadJSON(t,n).then((e=>{e&&i(e)})).catch((()=>{i(void 0)}))},t.setOnClickHandler=t=>{e.setOnClickHandler(t)},{particlesJS:t,pJSDom:e.dom()}})(e)}class bn{constructor(e){this.container=e}init(e){const t=e.options.tilt;e.tilt={enable:t.enable,value:(0,Ae.getRangeValue)(t.value)*Math.PI/180,sinDirection:Math.random()>=.5?1:-1,cosDirection:Math.random()>=.5?1:-1};let n=t.direction;switch("random"===n&&(n=Math.floor(2*Math.random())>0?"counter-clockwise":"clockwise"),n){case"counter-clockwise":case"counterClockwise":e.tilt.status=1;break;case"clockwise":e.tilt.status=0}const i=e.options.tilt.animation;i.enable&&(e.tilt.velocity=(0,Ae.getRangeValue)(i.speed)/360*this.container.retina.reduceFactor,i.sync||(e.tilt.velocity*=Math.random()))}isEnabled(e){const t=e.options.tilt.animation;return!e.destroyed&&!e.spawning&&t.enable}update(e,t){this.isEnabled(e)&&function(e,t){var n;if(!e.tilt)return;const i=e.options.tilt.animation,o=(null!==(n=e.tilt.velocity)&&void 0!==n?n:0)*t.factor,r=2*Math.PI;i.enable&&(0===e.tilt.status?(e.tilt.value+=o,e.tilt.value>r&&(e.tilt.value-=r)):(e.tilt.value-=o,e.tilt.value<0&&(e.tilt.value+=r)))}(e,t)}}class wn{getColorStyles(e,t,n,i){const o=e.options.twinkle.particles,r=o.enable&&Math.random()<o.frequency,a=e.options.zIndex,s=(1-e.zIndexFactor)**a.opacityRate,l=r?(0,Ae.getRangeValue)(o.opacity)*s:i,c=(0,Ae.colorToHsl)(o.color),u=c?(0,Ae.getStyleFromHsl)(c,l):void 0,d={},h=r&&u;return d.fill=h?u:void 0,d.stroke=h?u:void 0,d}init(){}isEnabled(e){return e.options.twinkle.particles.enable}update(){}}class kn{constructor(e){this.container=e}init(e){const t=e.options.wobble;t.enable?e.wobble={angle:Math.random()*Math.PI*2,speed:(0,Ae.getRangeValue)(t.speed)/360}:e.wobble={angle:0,speed:0},e.retina.wobbleDistance=(0,Ae.getRangeValue)(t.distance)*this.container.retina.pixelRatio}isEnabled(e){return!e.destroyed&&!e.spawning&&e.options.wobble.enable}update(e,t){this.isEnabled(e)&&function(e,t){var n;if(!e.options.wobble.enable||!e.wobble)return;const i=e.wobble.speed*t.factor,o=(null!==(n=e.retina.wobbleDistance)&&void 0!==n?n:0)*t.factor/(1e3/60),r=2*Math.PI;e.wobble.angle+=i,e.wobble.angle>r&&(e.wobble.angle-=r),e.position.x+=o*Math.cos(e.wobble.angle),e.position.y+=o*Math.abs(Math.sin(e.wobble.angle))}(e,t)}}async function xn(e){await gn(e),await async function(e){await e.addParticleUpdater("roll",(()=>new wt))}(e),await async function(e){await e.addParticleUpdater("tilt",(e=>new bn(e)))}(e),await async function(e){await e.addParticleUpdater("twinkle",(()=>new wn))}(e),await async function(e){await e.addParticleUpdater("wobble",(e=>new kn(e)))}(e),await async function(e){await e.addInteractor("externalTrail",(e=>new rt(e)))}(e),await async function(e){const t=new Ne;await e.addPlugin(t)}(e),await async function(e){e.emitterShapeManager||(e.emitterShapeManager=new et(e)),e.addEmitterShape||(e.addEmitterShape=(t,n)=>{var i;null===(i=e.emitterShapeManager)||void 0===i||i.addShape(t,n)});const t=new ot(e);await e.addPlugin(t),e.addEmitterShape("circle",new je),e.addEmitterShape("square",new nt)}(e),await async function(e){(0,Ae.isSsr)()||"SVGPathSeg"in window||await a.e(79).then(a.t.bind(a,79,23));const t=new bt(e);await e.addPlugin(t)}(e)}function En(e,t,n,i,o,r,a){try{var s=e[r](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(i,o)}const Sn=function(){var t=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log(t),e.next=3,xn(t);case 3:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(i,o){var r=e.apply(t,n);function a(e){En(r,i,o,a,s,"next",e)}function s(e){En(r,i,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return e.createElement(Re(),{id:"tsparticles",init:t,loaded:function(e){console.log(e)},options:{background:{color:{value:"#e8ccbf"}},fpsLimit:120,interactivity:{events:{onClick:{enable:!0,mode:"push"},onHover:{enable:!0,mode:"repulse"},resize:!0},modes:{push:{quantity:4},repulse:{distance:200,duration:.4}}},particles:{color:{value:"#8d99ae"},links:{color:"#8d99ae",distance:150,enable:!0,opacity:.5,width:1},collisions:{enable:!0},move:{direction:"none",enable:!0,outModes:{default:"bounce"},random:!1,speed:3,straight:!1},number:{density:{enable:!0,area:750},value:80},opacity:{value:.5},shape:{type:"circle"},size:{value:{min:1,max:5}}},detectRetina:!0}})};var Cn,Pn,Mn,zn=Te.section(Cn||(Pn=["\n  height: 100vh;\n  width: 100%;\n  position: relative;\n\n  #tsparticles {\n    position: fixed;\n    z-index: -1;\n  }\n\n  .info-block {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .name {\n    font-size: 8rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .intro-para {\n    font-size: 2rem;\n    padding: 5rem 3rem;\n  }\n\n  .large-hi {\n    font-size: 4rem;\n    font-weight: 800;\n  }\n\n  .scroll-hint {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.5rem;\n    padding-bottom: 0.5rem;\n  }\n"],Mn||(Mn=Pn.slice(0)),Cn=Object.freeze(Object.defineProperties(Pn,{raw:{value:Object.freeze(Mn)}}))));const Tn=function(){return e.createElement(zn,{className:"row"},e.createElement(Sn,null),e.createElement("div",{className:"col-md-6 info-block"},e.createElement("div",{className:"name"},e.createElement("div",null,"WYATT"),e.createElement("div",null,"HUANG"))),e.createElement("div",{className:"col-md-6 info-block"},e.createElement("div",{className:"intro-para"},e.createElement("p",null,e.createElement("span",{className:"large-hi"},"Hi! ")," I'm a freshman student at University of Illinois at Urbana Champaign. My current major is Mathematics but I am transferring to Computer Science."),e.createElement("p",null,"I'm passionate about web development, blockchain, machine learning, Robotics, and any other disruptive technology."))),e.createElement("div",{className:"row scroll-hint"},"Scroll to Explore"))};var On,Rn=Te.div(On||(On=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}([""])));const An=function(){return e.createElement(Rn,null,e.createElement(Tn,null))};var _n,In=Te.div(_n||(_n=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(['\n  box-sizing: border-box;\n\n  font-family: "Raleway", sans-serif;\n'])));const Ln=In,Dn=function(t){var n=t.link;return e.createElement("a",{href:n,className:"icon"},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"#fff","aria-label":"LinkedIn",viewBox:"0 0 512 512"},e.createElement("rect",{width:"512",height:"512",fill:"#0077b5",rx:"15%"}),e.createElement("circle",{cx:"142",cy:"138",r:"37"}),e.createElement("path",{stroke:"#fff",strokeWidth:"66",d:"M244 194v198M142 194v198"}),e.createElement("path",{d:"M276 282c0-20 13-40 36-40 24 0 33 18 33 45v105h66V279c0-61-32-89-76-89-34 0-51 19-59 32"})))},Fn=function(t){var n=t.link;return e.createElement("a",{href:n,className:"icon"},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16"},e.createElement("linearGradient",{id:"a",x1:"1.464",x2:"14.536",y1:"14.536",y2:"1.464",gradientUnits:"userSpaceOnUse"},e.createElement("stop",{offset:"0",stopColor:"#FFC107"}),e.createElement("stop",{offset:".507",stopColor:"#F44336"}),e.createElement("stop",{offset:".99",stopColor:"#9C27B0"})),e.createElement("path",{fill:"url(#a)",d:"M11 0H5a5 5 0 0 0-5 5v6a5 5 0 0 0 5 5h6a5 5 0 0 0 5-5V5a5 5 0 0 0-5-5zm3.5 11c0 1.93-1.57 3.5-3.5 3.5H5c-1.93 0-3.5-1.57-3.5-3.5V5c0-1.93 1.57-3.5 3.5-3.5h6c1.93 0 3.5 1.57 3.5 3.5v6z"}),e.createElement("linearGradient",{id:"b",x1:"5.172",x2:"10.828",y1:"10.828",y2:"5.172",gradientUnits:"userSpaceOnUse"},e.createElement("stop",{offset:"0",stopColor:"#FFC107"}),e.createElement("stop",{offset:".507",stopColor:"#F44336"}),e.createElement("stop",{offset:".99",stopColor:"#9C27B0"})),e.createElement("path",{fill:"url(#b)",d:"M8 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8zm0 6.5A2.503 2.503 0 0 1 5.5 8c0-1.379 1.122-2.5 2.5-2.5s2.5 1.121 2.5 2.5c0 1.378-1.122 2.5-2.5 2.5z"}),e.createElement("linearGradient",{id:"c",x1:"11.923",x2:"12.677",y1:"4.077",y2:"3.323",gradientUnits:"userSpaceOnUse"},e.createElement("stop",{offset:"0",stopColor:"#FFC107"}),e.createElement("stop",{offset:".507",stopColor:"#F44336"}),e.createElement("stop",{offset:".99",stopColor:"#9C27B0"})),e.createElement("circle",{cx:"12.3",cy:"3.7",r:".533",fill:"url(#c)"})))},Nn=function(t){var n=t.link;return e.createElement("a",{href:n,className:"icon"},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16"},e.createElement("path",{d:"M7.999 0C3.582 0 0 3.596 0 8.032a8.031 8.031 0 0 0 5.472 7.621c.4.074.546-.174.546-.387 0-.191-.007-.696-.011-1.366-2.225.485-2.695-1.077-2.695-1.077-.363-.928-.888-1.175-.888-1.175-.727-.498.054-.488.054-.488.803.057 1.225.828 1.225.828.714 1.227 1.873.873 2.329.667.072-.519.279-.873.508-1.074-1.776-.203-3.644-.892-3.644-3.969 0-.877.312-1.594.824-2.156-.083-.203-.357-1.02.078-2.125 0 0 .672-.216 2.2.823a7.633 7.633 0 0 1 2.003-.27 7.65 7.65 0 0 1 2.003.271c1.527-1.039 2.198-.823 2.198-.823.436 1.106.162 1.922.08 2.125.513.562.822 1.279.822 2.156 0 3.085-1.87 3.764-3.652 3.963.287.248.543.738.543 1.487 0 1.074-.01 1.94-.01 2.203 0 .215.144.465.55.386A8.032 8.032 0 0 0 16 8.032C16 3.596 12.418 0 7.999 0z"})))},jn=function(t){var n=t.link;return e.createElement("a",{href:n,className:"icon resume-icon"},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",viewBox:"0 0 512 512"},e.createElement("rect",{width:"360.73",height:"497",x:"75.64",y:"7.5",fill:"#fff8cc",rx:"30"}),e.createElement("path",{fill:"#f66",d:"M233.52,223.77H142.14a21.5,21.5,0,0,1-21.5-21.51v-5.63a39.88,39.88,0,0,1,32.43-39.19l34.76-6.63,34.76,6.63A39.88,39.88,0,0,1,255,196.63v5.63A21.5,21.5,0,0,1,233.52,223.77Z"}),e.createElement("path",{fill:"#ff4e4e",d:"M222.59,157.44l-34.76-6.63-9.16,1.75,25.61,4.88a39.88,39.88,0,0,1,32.43,39.19v5.63a21.51,21.51,0,0,1-21.5,21.51h18.31A21.5,21.5,0,0,0,255,202.26v-5.63A39.88,39.88,0,0,0,222.59,157.44Z"}),e.createElement("path",{fill:"#ffcd85",d:"M173.11,144.66h29.44a0,0,0,0,1,0,0v14.72a14.72,14.72,0,0,1-14.72,14.72h0a14.72,14.72,0,0,1-14.72-14.72V144.66A0,0,0,0,1,173.11,144.66Z"}),e.createElement("path",{fill:"#ffcd85",d:"M173.11,144.66h29.44a0,0,0,0,1,0,0v14.72a14.72,14.72,0,0,1-14.72,14.72h0a14.72,14.72,0,0,1-14.72-14.72V144.66A0,0,0,0,1,173.11,144.66Z"}),e.createElement("path",{fill:"#ffc166",d:"M190.77,144.66v14.71a14.72,14.72,0,0,1-8.83,13.49,14.61,14.61,0,0,0,5.89,1.23h0a14.72,14.72,0,0,0,14.72-14.72V144.66Z"}),e.createElement("path",{fill:"#595f74",d:"M211.86,80,152.63,91.16V63.67c0-6.17,5-12.77,11.17-12.77H223V68.83A11.17,11.17,0,0,1,211.86,80Z"}),e.createElement("path",{fill:"#4a4f60",d:"M208,50.9V68.83A11.17,11.17,0,0,1,196.86,80l-44.23,8.33v2.83L211.86,80A11.17,11.17,0,0,0,223,68.83V50.9Z"}),e.createElement("path",{fill:"#ffcd85",d:"M165.43,80h44.8A12.8,12.8,0,0,1,223,92.79v22.4a35.2,35.2,0,0,1-35.2,35.2h0a35.2,35.2,0,0,1-35.2-35.2V92.79A12.8,12.8,0,0,1,165.43,80Z"}),e.createElement("path",{fill:"#ffc166",d:"M210.23,80h-15A12.8,12.8,0,0,1,208,92.79v22.4a35.21,35.21,0,0,1-27.7,34.39,35.68,35.68,0,0,0,7.5.81h0a35.2,35.2,0,0,0,35.2-35.2V92.79A12.8,12.8,0,0,0,210.23,80Z"}),e.createElement("path",{fill:"#272a33",d:"M128.14,263.5a7.5,7.5,0,1,0,7.5,7.5A7.5,7.5,0,0,0,128.14,263.5Zm0,135a7.5,7.5,0,1,0,7.5,7.5A7.5,7.5,0,0,0,128.14,398.5Zm0-90a7.5,7.5,0,1,0,7.5,7.5A7.5,7.5,0,0,0,128.14,308.5Zm0,135a7.5,7.5,0,1,0,7.5,7.5A7.5,7.5,0,0,0,128.14,443.5ZM262.52,202.26v-5.63A47.44,47.44,0,0,0,224,150.07l-9.25-1.76a42.62,42.62,0,0,0,15.79-33.12V92.79a20.14,20.14,0,0,0-4.16-12.25,18.52,18.52,0,0,0,4.16-11.71V50.9a7.5,7.5,0,0,0-7.5-7.5H163.8c-11,0-18.67,10.68-18.67,20.27V91.16a6.84,6.84,0,0,0,.05.79c0,.28-.05.56-.05.84v22.4a42.62,42.62,0,0,0,15.79,33.12l-9.25,1.76a47.44,47.44,0,0,0-38.53,46.56v5.63a29,29,0,0,0,29,29h91.38A29,29,0,0,0,262.52,202.26ZM160.13,63.67c0-2.49,2.19-5.27,3.67-5.27h51.73V68.83a3.68,3.68,0,0,1-3.67,3.67,6.85,6.85,0,0,0-.79,0c-.28,0-.56,0-.84,0h-44.8a20.23,20.23,0,0,0-5.3.72Zm0,51.52V92.79a5.3,5.3,0,0,1,5.3-5.29h44.8a5.3,5.3,0,0,1,5.3,5.29v22.4a27.7,27.7,0,1,1-55.4,0Zm34.92,42.08v2.1a7.22,7.22,0,1,1-14.44,0v-2.1a42.35,42.35,0,0,0,14.44,0Zm-66.91,45v-5.63a32.44,32.44,0,0,1,26.33-31.83l11.38-2.16a22.22,22.22,0,0,0,44,0l11.38,2.16a32.44,32.44,0,0,1,26.33,31.83v5.63a14,14,0,0,1-14,14H142.14A14,14,0,0,1,128.14,202.26Zm0,151.24a7.5,7.5,0,1,0,7.5,7.5A7.5,7.5,0,0,0,128.14,353.5ZM391.36,216.27H291.7a7.5,7.5,0,0,0,0,15h99.66a7.5,7.5,0,0,0,0-15Zm0-30H291.7a7.5,7.5,0,0,0,0,15h99.66a7.5,7.5,0,0,0,0-15Zm0-141.27H291.7a7.5,7.5,0,0,0,0,15h99.66a7.5,7.5,0,0,0,0-15ZM291.7,90h54.66a7.5,7.5,0,0,0,0-15H291.7a7.5,7.5,0,0,0,0,15ZM406.36,0H105.64a37.54,37.54,0,0,0-37.5,37.5v437a37.54,37.54,0,0,0,37.5,37.5H406.36a37.54,37.54,0,0,0,37.5-37.5V37.5A37.54,37.54,0,0,0,406.36,0Zm22.5,474.5a22.52,22.52,0,0,1-22.5,22.5H105.64a22.52,22.52,0,0,1-22.5-22.5V37.5A22.52,22.52,0,0,1,105.64,15H406.36a22.52,22.52,0,0,1,22.5,22.5Zm-37.5-76H167.72a7.5,7.5,0,0,0,0,15H391.36a7.5,7.5,0,0,0,0-15Zm0,45H167.72a7.5,7.5,0,0,0,0,15H391.36a7.5,7.5,0,0,0,0-15Zm0-180H167.72a7.5,7.5,0,0,0,0,15H391.36a7.5,7.5,0,0,0,0-15Zm0,90H167.72a7.5,7.5,0,0,0,0,15H391.36a7.5,7.5,0,0,0,0-15Zm0-45H167.72a7.5,7.5,0,0,0,0,15H391.36a7.5,7.5,0,0,0,0-15Z"})))};var Hn,Vn=Te.div(Hn||(Hn=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  height: 15vh;\n  width: 100%;\n  background-color: #dbd9db;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .icon {\n    width: 3rem;\n    margin: 1rem 3rem;\n  }\n\n  .resume-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .resume-icon {\n    margin-right: 1rem;\n  }\n"])));const Bn=function(){return e.createElement(Vn,null,e.createElement(Dn,{link:"https://www.linkedin.com/in/wyatt-huang/"}),e.createElement(Fn,{link:"https://www.instagram.com/z.wyatt_h/?hl=en"}),e.createElement(Nn,{link:"https://github.com/wyatt-h"}),e.createElement("div",{className:"resume-box"},e.createElement(jn,{link:"/Resume.pdf"}),e.createElement("div",null,e.createElement("i",{className:"fa-solid fa-arrow-left"}),"Resume")))};var Un=function(){return e.createElement(Ln,null,e.createElement(An,null),e.createElement(Bn,null))};t.render(e.createElement(Un,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,